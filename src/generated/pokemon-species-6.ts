// AUTO GENERATED FILE
import {Language} from './language.enum.js';
import {Species} from './species.enum.js';
import {Variety} from './variety.enum.js';
import {Form} from './form.enum.js';
import {Type} from './type.enum.js';
import {VersionGroup} from './version-group.enum.js';
import {Color} from './color.enum.js';
import {EggGroup} from './egg-group.enum.js';
import {Stat} from './stat.enum.js';
import {Item} from './item.enum.js';
import {Ability} from './ability.enum.js';
import {Generation} from './generation.enum.js';
import {GrowthRate} from './growth-rate.enum.js';
import {Shape} from './shape.enum.js';
import {Move} from './move.enum.js';
import {MoveLearnMethod} from './move-learn-method.enum.js';

import {Version} from './version.enum.js';
import {PokemonSpecies} from './pokemon-species.js';
import type {MoveLearnData} from './pokemon-species.js';

// This is a used to shorten the code by collapsing data into a single line
function move(
	versionGroupMin: VersionGroup,
	versionGroupMax: VersionGroup,
	learnMethod: MoveLearnMethod,
	move: Move,
	levelLearnedAt?: number,
): MoveLearnData {
	return {
		versionGroups: [versionGroupMin, versionGroupMax],
		learnMethod,
		move,
		levelLearnedAt,
	};
}

// This is a used to shorten the code by collapsing moves that have the same general data into a single line
function moves(
	data: Omit<MoveLearnData, 'move'>,
	...moves: Move[]
): MoveLearnData[] {
	return moves.map<MoveLearnData>((move) => ({
		...data,
		move,
	}));
}

import {PokemonSpeciesBits, PokemonFormBits} from './pokemon-species.js';
const VersionGroup_RedBlue = VersionGroup.RedBlue;
const VersionGroup_Yellow = VersionGroup.Yellow;
const VersionGroup_GoldSilver = VersionGroup.GoldSilver;
const VersionGroup_Crystal = VersionGroup.Crystal;
const VersionGroup_RubySapphire = VersionGroup.RubySapphire;
const VersionGroup_Emerald = VersionGroup.Emerald;
const VersionGroup_FireredLeafgreen = VersionGroup.FireredLeafgreen;
const VersionGroup_DiamondPearl = VersionGroup.DiamondPearl;
const VersionGroup_Platinum = VersionGroup.Platinum;
const VersionGroup_HeartgoldSoulsilver = VersionGroup.HeartgoldSoulsilver;
const VersionGroup_BlackWhite = VersionGroup.BlackWhite;
const VersionGroup_Colosseum = VersionGroup.Colosseum;
const VersionGroup_Xd = VersionGroup.Xd;
const VersionGroup_Black2White2 = VersionGroup.Black2White2;
const VersionGroup_XY = VersionGroup.XY;
const VersionGroup_OmegaRubyAlphaSapphire = VersionGroup.OmegaRubyAlphaSapphire;
const VersionGroup_SunMoon = VersionGroup.SunMoon;
const VersionGroup_UltraSunUltraMoon = VersionGroup.UltraSunUltraMoon;
const VersionGroup_LetsGoPikachuLetsGoEevee =
	VersionGroup.LetsGoPikachuLetsGoEevee;
const VersionGroup_SwordShield = VersionGroup.SwordShield;
const VersionGroup_TheIsleOfArmor = VersionGroup.TheIsleOfArmor;
const VersionGroup_TheCrownTundra = VersionGroup.TheCrownTundra;
const VersionGroup_BrilliantDiamondAndShiningPearl =
	VersionGroup.BrilliantDiamondAndShiningPearl;
const VersionGroup_LegendsArceus = VersionGroup.LegendsArceus;
const VersionGroup_ScarletViolet = VersionGroup.ScarletViolet;
const VersionGroup_TheTealMask = VersionGroup.TheTealMask;
const VersionGroup_TheIndigoDisk = VersionGroup.TheIndigoDisk;
const MoveLearnMethod_LevelUp = MoveLearnMethod.LevelUp;
const MoveLearnMethod_Egg = MoveLearnMethod.Egg;
const MoveLearnMethod_Tutor = MoveLearnMethod.Tutor;
const MoveLearnMethod_Machine = MoveLearnMethod.Machine;
const MoveLearnMethod_StadiumSurfingPikachu =
	MoveLearnMethod.StadiumSurfingPikachu;
const MoveLearnMethod_LightBallEgg = MoveLearnMethod.LightBallEgg;
const MoveLearnMethod_ColosseumPurification =
	MoveLearnMethod.ColosseumPurification;
const MoveLearnMethod_XdShadow = MoveLearnMethod.XdShadow;
const MoveLearnMethod_XdPurification = MoveLearnMethod.XdPurification;
const MoveLearnMethod_FormChange = MoveLearnMethod.FormChange;
const MoveLearnMethod_ZygardeCube = MoveLearnMethod.ZygardeCube;

new PokemonSpecies(
	Species.Chespin,
	70,
	45,
	Color.Green,
	[EggGroup.Ground],
	1,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.MediumSlow,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['ハリマロン'],
		[Language.Roomaji]: ['Harimaron'],
		[Language.Ko]: ['도치마론'],
		[Language.ZhHant]: ['哈力栗'],
		[Language.Fr]: ['Marisson'],
		[Language.De]: ['Igamaro'],
		[Language.Es]: ['Chespin'],
		[Language.It]: ['Chespin'],
		[Language.En]: ['Chespin'],
		[Language.Ja]: ['ハリマロン'],
		[Language.ZhHans]: ['哈力栗'],
	},
	{
		[Language.JaHrkt]: ['いがぐりポケモン'],
		[Language.Ko]: ['밤송이포켓몬'],
		[Language.ZhHant]: ['刺栗寶可夢'],
		[Language.Fr]: ['Pokémon Bogue'],
		[Language.De]: ['Stachelkopf'],
		[Language.Es]: ['Pokémon Erizo'],
		[Language.It]: ['Pokémon Castanriccio'],
		[Language.En]: ['Spiny Nut Pokémon'],
		[Language.Ja]: ['いがぐりポケモン'],
		[Language.ZhHans]: ['刺栗宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'ふだん　やわらかい　あたまの　トゲは\nちからを　こめると　するどく　とがり\nいわをも　つらぬくほど　かたくなる。',
			'あたまと　せなかを　かたい　カラで\nおおわれているため　トラックが\nぶつかってきても　へっちゃらだ。',
		],
		[Language.Ko]: [
			'머리의 가시는 평소에는 부드럽지만\n힘을 주면 뾰족하고 날카로워지며\n바위를 뚫어 버릴 정도로 단단해진다.',
			'머리와 등이 단단한 껍데기로\n덮여 있기 때문에 트럭이\n부딪혀와도 아무렇지 않다.',
		],
		[Language.Fr]: [
			'Lorsqu’il rassemble ses forces, les piquants souples\nqui recouvrent sa tête deviennent si durs et acérés\nqu’ils pourraient transpercer un rocher.',
			'Sa tête et son dos sont recouverts d’une carapace\ntellement dure que même une collision avec\nun camion ne lui ferait rien.',
			'Sa tête et son dos sont recouverts d’une carapace tellement\ndure que même une collision avec un camion ne lui ferait rien.',
		],
		[Language.De]: [
			'Wenn es seine Kraft auf die sonst eher weichen\nStacheln auf seinem Kopf konzentriert, werden\ndiese robust genug, um damit Steine zu zertrümmern.',
			'Sein Kopf und Rücken werden von einer harten Hülle\nbedeckt, die so robust ist, dass sie selbst einer\nKollision mit einem LKW standhalten würde.',
			'Wenn es seine Kraft auf die sonst eher weichen Stacheln\nauf seinem Kopf konzentriert, werden diese robust genug,\num damit Steine zu zertrümmern.',
			'Sein Kopf und Rücken werden von einer harten Hülle bedeckt,\ndie so robust ist, dass sie selbst einer Kollision mit einem LKW\nstandhalten würde.',
		],
		[Language.Es]: [
			'Cuando acumula energía, las suaves púas de su\ncabeza se vuelven tan duras y afiladas que hasta\npueden atravesar rocas.',
			'La robusta coraza que le recubre la cabeza y la\nespalda lo protege de tal manera que podría\nchocar contra un camión y permanecer impasible.',
			'Cuando acumula energía, las suaves púas de su cabeza se\nvuelven tan duras y afiladas que hasta pueden atravesar\nrocas.',
			'La robusta coraza que le recubre la cabeza y la espalda lo\nprotege de tal manera que podría chocar contra un camión y\npermanecer impasible.',
		],
		[Language.It]: [
			'Può indurire le punte che ha sulla testa, di solito\nmorbide, per farle diventare talmente affilate e\nappuntite da penetrare nella roccia.',
			'Ha schiena e testa coperte da un guscio talmente\nresistente che non farebbe una piega nemmeno se\nci passasse sopra un tir.',
			'Può indurire le punte che ha sulla testa, di solito morbide,\nper farle diventare talmente affilate e appuntite da penetrare\nnella roccia.',
			'Ha schiena e testa coperte da un guscio talmente resistente\nche non farebbe una piega nemmeno se ci passasse sopra\nun tir.',
		],
		[Language.En]: [
			'The quills on its head are usually soft.\nWhen it flexes them, the points become\nso hard and sharp that they can pierce rock.',
			'Such a thick shell of wood covers its head and back\nthat even a direct hit from a truck wouldn’t faze it.',
		],
		[Language.Ja]: [
			'普段　やわらかい　頭の　トゲは\n力を　こめると　鋭く　とがり\n岩をも　つらぬくほど　硬くなる。',
			'頭と　背中を　硬い　樹木の　殻で\n覆われているため　トラックが\nぶつかってきても　平気なのだ。',
		],
	},
	[
		[
			Variety.Chespin,
			63,
			4,
			90,
			[Type.Grass],
			{
				frontDefault: 'bd3a00d3.png',
				frontShiny: '144b4700.png',
				backDefault: '1f04a62a.png',
				backShiny: '50401a9a.png',
			},
			{
				[Stat.Hp]: {baseStat: 56},
				[Stat.Attack]: {baseStat: 61},
				[Stat.Defense]: {baseStat: 65, effort: 1},
				[Stat.SpecialAttack]: {baseStat: 48},
				[Stat.SpecialDefense]: {baseStat: 45},
				[Stat.Speed]: {baseStat: 38},
			},
			{},
			[
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.ThunderPunch,
					Move.LowKick,
					Move.GigaDrain,
					Move.PainSplit,
					Move.FocusPunch,
					Move.HelpingHand,
					Move.Endeavor,
					Move.SeedBomb,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.IronHead,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					42,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.Swift,
					Move.SuperFang,
					Move.Curse,
					Move.Spikes,
					Move.Endure,
					Move.MetalClaw,
					Move.RainDance,
					Move.BulletSeed,
					Move.MudShot,
					Move.MagicalLeaf,
					Move.LeafStorm,
					Move.GrassyTerrain,
					Move.GrassyGlide,
					Move.TeraBlast,
					Move.Trailblaze,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PinMissile,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Growl,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.SolarBeam,
					Move.Dig,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.Fling,
					Move.PoisonJab,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.GrassKnot,
					Move.GrassPledge,
					Move.Bulldoze,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.SuperFang,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Curse,
					Move.BellyDrum,
					Move.Spikes,
					Move.Synthesis,
					Move.QuickGuard,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Rollout,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					48,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.WideGuard,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ThunderPunch,
					Move.LowKick,
					Move.SuperFang,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Synthesis,
					Move.FocusPunch,
					Move.HelpingHand,
					Move.Endeavor,
					Move.SeedBomb,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.GrassPledge,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Toxic,
					Move.DoubleTeam,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.Taunt,
					Move.BulkUp,
					Move.GyroBall,
					Move.Payback,
					Move.StoneEdge,
					Move.SmackDown,
					Move.LowSweep,
					Move.Round,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Growl,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					5,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					42,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					27,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PinMissile,
					18,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					11,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.SolarBeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.Fling,
					Move.PoisonJab,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.GrassKnot,
					Move.Bulldoze,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DefenseCurl,
					Move.Rollout,
					Move.PowerUpPunch,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.Superpower,
					Move.IronDefense,
					Move.WorrySeed,
					Move.DualChop,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Curse,
					Move.BellyDrum,
					Move.Spikes,
					Move.Synthesis,
					Move.QuickGuard,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Rollout,
					8,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					39,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					35,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					32,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Roar,
					Move.SolarBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.GyroBall,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.LowSweep,
					Move.Round,
					Move.Bulldoze,
					Move.WorkUp,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Growl,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PinMissile,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DefenseCurl,
					Move.Curse,
					Move.BellyDrum,
					Move.Spikes,
					Move.Rollout,
					Move.Synthesis,
					Move.QuickGuard,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Rollout,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					39,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					32,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.GrassPledge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ThunderPunch,
					Move.LowKick,
					Move.SuperFang,
					Move.Snore,
					Move.GigaDrain,
					Move.PainSplit,
					Move.IronTail,
					Move.Synthesis,
					Move.FocusPunch,
					Move.HelpingHand,
					Move.Superpower,
					Move.Endeavor,
					Move.IronDefense,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.GrassPledge,
					Move.DualChop,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Roar,
					Move.SolarBeam,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.Taunt,
					Move.BrickBreak,
					Move.SecretPower,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.GyroBall,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.LowSweep,
					Move.Round,
					Move.Bulldoze,
					Move.Confide,
					Move.PowerUpPunch,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.Flash,
					Move.RockSmash,
					Move.Retaliate,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					27,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PinMissile,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Growl,
					1,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DefenseCurl,
					Move.Curse,
					Move.BellyDrum,
					Move.Spikes,
					Move.Rollout,
					Move.Synthesis,
					Move.QuickGuard,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Rollout,
					8,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					45,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					39,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					32,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Cut,
					Move.Roar,
					Move.Strength,
					Move.SolarBeam,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Flash,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.RockSmash,
					Move.Facade,
					Move.NaturePower,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.GyroBall,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.LowSweep,
					Move.Round,
					Move.Retaliate,
					Move.Bulldoze,
					Move.Confide,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PinMissile,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DefenseCurl,
					Move.Curse,
					Move.BellyDrum,
					Move.Spikes,
					Move.Rollout,
					Move.Synthesis,
					Move.QuickGuard,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Rollout,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Tutor,
					Move.GrassPledge,
				),
			].flat(),
			[
				{
					ability: Ability.Overgrow,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Bulletproof,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Chespin,
					PokemonFormBits.Default,
					{
						frontDefault: 'bd3a00d3.png',
						frontShiny: '144b4700.png',
						backDefault: '1f04a62a.png',
						backShiny: '50401a9a.png',
					},
					[Type.Grass],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Quilladin,
	70,
	45,
	Color.Green,
	[EggGroup.Ground],
	1,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.MediumSlow,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['ハリボーグ'],
		[Language.Roomaji]: ['Hariborg'],
		[Language.Ko]: ['도치보구'],
		[Language.ZhHant]: ['胖胖哈力'],
		[Language.Fr]: ['Boguérisse'],
		[Language.De]: ['Igastarnish'],
		[Language.Es]: ['Quilladin'],
		[Language.It]: ['Quilladin'],
		[Language.En]: ['Quilladin'],
		[Language.Ja]: ['ハリボーグ'],
		[Language.ZhHans]: ['胖胖哈力'],
	},
	{
		[Language.JaHrkt]: ['とげよろいポケモン'],
		[Language.Ko]: ['가시갑옷포켓몬'],
		[Language.ZhHant]: ['刺鎧寶可夢'],
		[Language.Fr]: ['Pokémon Épinarmure'],
		[Language.De]: ['Spitzpanzer'],
		[Language.Es]: ['Pokémon Corazaespín'],
		[Language.It]: ['Pokémon Spincorazza'],
		[Language.En]: ['Spiny Armor Pokémon'],
		[Language.Ja]: ['とげよろいポケモン'],
		[Language.ZhHans]: ['刺铠宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'からだを　おおう　がんじょうな　カラが\nてきの　こうげきを　はじきかえし\nするどい　トゲで　はんげきする。',
			'なかまどうしで　からだを　ぶつけあい\nあしこしを　きたえる。じぶんからは\nたたかわない　やさしい　せいかく。',
		],
		[Language.Ko]: [
			'몸을 둘러싼 단단한 껍질이\n적의 공격을 튕겨내고\n날카로운 가시로 반격한다.',
			'동료끼리 몸을 서로 부딪쳐\n하반신을 단련한다. 자신이 먼저\n싸움을 걸지 않는 온순한 성격이다.',
		],
		[Language.Fr]: [
			'La carapace qui recouvre son corps le protège\ndes attaques adverses, et ses piquants lui permettent\nde contre-attaquer.',
			'Il renforce ses membres inférieurs en se ruant\nviolemment sur ses congénères. Naturellement\npaisible, il ne provoque jamais un combat.',
			'La carapace qui recouvre son corps le protège des attaques\nadverses, et ses piquants lui permettent de contre-attaquer.',
			'Il renforce ses membres inférieurs en se ruant violemment\nsur ses congénères. Naturellement paisible, il ne provoque\njamais un combat.',
		],
		[Language.De]: [
			'Der Panzer, der seinen Körper umgibt, bietet ihm\nSchutz vor Angreifern und straft direkte Angriffe\npostwendend mit spitzen Stacheln ab.',
			'Sie stärken ihre Beinmuskeln, indem sie sich\ngegenseitig anrempeln. Sie sind sehr freundlich\nund würden niemals einen Streit anfangen.',
			'Der Panzer, der seinen Körper umgibt, bietet ihm Schutz vor\nAngreifern und straft direkte Angriffe postwendend mit spitzen\nStacheln ab.',
			'Sie stärken ihre Beinmuskeln, indem sie sich gegenseitig\nanrempeln. Sie sind sehr freundlich und würden niemals\neinen Streit anfangen.',
		],
		[Language.Es]: [
			'Desvía los ataques de los enemigos con la robusta\ncoraza que cubre su cuerpo y contraataca con sus\ndos afilados cuernos.',
			'Chocan contra sus congéneres para fortalecer sus\npiernas. Debido a su carácter afable, nunca son los\nque provocan un combate.',
			'Desvía los ataques de los enemigos con la robusta coraza que\ncubre su cuerpo y contraataca con sus dos afilados cuernos.',
			'Chocan contra sus congéneres para fortalecer sus piernas.\nDebido a su carácter afable, nunca son los que provocan un\ncombate.',
		],
		[Language.It]: [
			'Respinge gli attacchi dei nemici grazie al guscio che\ngli ricopre il corpo e contrattacca con gli aculei affilati.',
			'Allena la parte inferiore del corpo scontrandosi con i\nsuoi simili. Ha una natura mite e non inizia mai\nuna lotta per primo.',
			'Respinge gli attacchi dei nemici grazie al guscio che gli ricopre\nil corpo e contrattacca con gli aculei affilati.',
			'Allena la parte inferiore del corpo scontrandosi con i suoi\nsimili. Ha una natura mite e non inizia mai una lotta per primo.',
		],
		[Language.En]: [
			'It relies on its sturdy shell to deflect predators’\nattacks. It counterattacks with its sharp quills.',
			'They strengthen their lower bodies by\nrunning into one another. They are very\nkind and won’t start fights.',
		],
		[Language.Ja]: [
			'体を　覆う　頑丈な　殻が\n敵の　攻撃を　弾き返し\n鋭い　トゲで　反撃する。',
			'仲間同士で　体を　ぶつけ合い\n足腰を　鍛える。\n自分からは　戦わない　優しい　性格。',
		],
	},
	[
		[
			Variety.Quilladin,
			142,
			7,
			290,
			[Type.Grass],
			{
				frontDefault: '96120519.png',
				frontShiny: 'd32bf571.png',
				backDefault: 'a0665ab1.png',
				backShiny: 'f0d9ceb6.png',
			},
			{
				[Stat.Hp]: {baseStat: 61},
				[Stat.Attack]: {baseStat: 78},
				[Stat.Defense]: {baseStat: 95, effort: 2},
				[Stat.SpecialAttack]: {baseStat: 56},
				[Stat.SpecialDefense]: {baseStat: 58},
				[Stat.Speed]: {baseStat: 57},
			},
			{},
			[
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.ThunderPunch,
					Move.LowKick,
					Move.SuperFang,
					Move.GigaDrain,
					Move.PainSplit,
					Move.FocusPunch,
					Move.HelpingHand,
					Move.Endeavor,
					Move.IronDefense,
					Move.SeedBomb,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.IronHead,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					1,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					43,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.Swift,
					Move.Curse,
					Move.Spikes,
					Move.Endure,
					Move.MetalClaw,
					Move.RainDance,
					Move.BulletSeed,
					Move.MudShot,
					Move.MagicalLeaf,
					Move.LeafStorm,
					Move.GrassyTerrain,
					Move.GrassyGlide,
					Move.TeraBlast,
					Move.Trailblaze,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					29,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PinMissile,
					24,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Growl,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.SolarBeam,
					Move.Dig,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.GyroBall,
					Move.Fling,
					Move.PoisonJab,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.GrassPledge,
					Move.Bulldoze,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.SuperFang,
					Move.Curse,
					Move.BellyDrum,
					Move.Spikes,
					Move.WideGuard,
					Move.QuickGuard,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Rollout,
					8,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					47,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.Synthesis,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					38,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					34,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					20,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					53,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ThunderPunch,
					Move.LowKick,
					Move.SuperFang,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Synthesis,
					Move.FocusPunch,
					Move.HelpingHand,
					Move.Endeavor,
					Move.IronDefense,
					Move.SeedBomb,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.GrassPledge,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Toxic,
					Move.DoubleTeam,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.Payback,
					Move.SmackDown,
					Move.Round,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Growl,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					48,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					29,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PinMissile,
					19,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					11,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.SolarBeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.GyroBall,
					Move.Fling,
					Move.PoisonJab,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Bulldoze,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.Superpower,
					Move.WorrySeed,
					Move.DualChop,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Rollout,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					52,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NeedleArm,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NeedleArm,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					56,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Roar,
					Move.SolarBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.GyroBall,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.LowSweep,
					Move.Round,
					Move.Bulldoze,
					Move.WorkUp,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Growl,
					Move.NeedleArm,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					29,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PinMissile,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Rollout,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					52,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NeedleArm,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					39,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					56,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.GrassPledge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ThunderPunch,
					Move.LowKick,
					Move.SuperFang,
					Move.Snore,
					Move.GigaDrain,
					Move.PainSplit,
					Move.IronTail,
					Move.Synthesis,
					Move.FocusPunch,
					Move.HelpingHand,
					Move.Superpower,
					Move.Endeavor,
					Move.IronDefense,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.GrassPledge,
					Move.DualChop,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Roar,
					Move.SolarBeam,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.Taunt,
					Move.BrickBreak,
					Move.SecretPower,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.GyroBall,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.LowSweep,
					Move.Round,
					Move.Bulldoze,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.Flash,
					Move.RockSmash,
					Move.HoneClaws,
					Move.Retaliate,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PinMissile,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Growl,
					1,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Rollout,
					8,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					52,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NeedleArm,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					44,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					39,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					55,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Cut,
					Move.Roar,
					Move.Strength,
					Move.SolarBeam,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Flash,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.RockSmash,
					Move.Facade,
					Move.NaturePower,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.GyroBall,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.HoneClaws,
					Move.SmackDown,
					Move.LowSweep,
					Move.Round,
					Move.Retaliate,
					Move.Bulldoze,
					Move.Confide,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PinMissile,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Rollout,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					52,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NeedleArm,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Tutor,
					Move.GrassPledge,
				),
			].flat(),
			[
				{
					ability: Ability.Overgrow,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Bulletproof,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Quilladin,
					PokemonFormBits.Default,
					{
						frontDefault: '96120519.png',
						frontShiny: 'd32bf571.png',
						backDefault: 'a0665ab1.png',
						backShiny: 'f0d9ceb6.png',
					},
					[Type.Grass],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Chesnaught,
	70,
	45,
	Color.Green,
	[EggGroup.Ground],
	1,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.MediumSlow,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['ブリガロン'],
		[Language.Roomaji]: ['Brigarron'],
		[Language.Ko]: ['브리가론'],
		[Language.ZhHant]: ['布里卡隆'],
		[Language.Fr]: ['Blindépique'],
		[Language.De]: ['Brigaron'],
		[Language.Es]: ['Chesnaught'],
		[Language.It]: ['Chesnaught'],
		[Language.En]: ['Chesnaught'],
		[Language.Ja]: ['ブリガロン'],
		[Language.ZhHans]: ['布里卡隆'],
	},
	{
		[Language.JaHrkt]: ['とげよろいポケモン'],
		[Language.Ko]: ['가시갑옷포켓몬'],
		[Language.ZhHant]: ['刺鎧寶可夢'],
		[Language.Fr]: ['Pokémon Épinarmure'],
		[Language.De]: ['Spitzpanzer'],
		[Language.Es]: ['Pokémon Corazaespín'],
		[Language.It]: ['Pokémon Spincorazza'],
		[Language.En]: ['Spiny Armor Pokémon'],
		[Language.Ja]: ['とげよろいポケモン'],
		[Language.ZhHans]: ['刺铠宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'たいあたりで　５０トンの　せんしゃを\nひっくりかえす　パワー。じぶんが\nたてと　なって　なかまを　まもる。',
			'かおの　まえで　こぶしを　あわせて\nぼうぎょの　ポーズを　とると\nばくだんの　ちょくげきも　たえる。',
		],
		[Language.Ko]: [
			'몸통박치기로 50톤 전차를\n뒤집는 파워를 지녔다. 자신이\n방패가 되어 동료를 지킨다.',
			'얼굴 앞에 주먹을 맞대어\n방어 포즈를 취하면\n폭탄의 직격도 견뎌낸다.',
		],
		[Language.Fr]: [
			'Il est si puissant qu’il pourrait renverser un char de\n50 t d’un seul assaut. Il se sert de son corps comme\nd’un bouclier pour protéger ses alliés.',
			'Il se défend en joignant ses poings devant son visage.\nDans cette posture, il peut même résister à l’onde de\nchoc d’une explosion.',
			'Il est si puissant qu’il pourrait renverser un char de 50 t\nd’un seul assaut. Il se sert de son corps comme d’un bouclier\npour protéger ses alliés.',
			'Il se défend en joignant ses poings devant son visage.\nDans cette posture, il peut même résister à l’onde de choc\nd’une explosion.',
		],
		[Language.De]: [
			'Es ist so stark, dass es selbst 50 t schwere Panzer\numkippen kann. Es schützt seine Artgenossen,\nindem es sich ihnen als Schild anbietet.',
			'Wenn es seine Fäuste vors Gesicht hält und so eine\nVerteidigungshaltung einnimmt, kann es selbst eine\nExplosion überstehen.',
			'Es ist so stark, dass es selbst 50 t schwere Panzer umkippen\nkann. Es schützt seine Artgenossen, indem es sich ihnen als\nSchild anbietet.',
		],
		[Language.Es]: [
			'Su fuerza es tal que, de un empellón, puede hacer\nvolcar un tanque de 50 toneladas. Protege a sus\naliados cuando hace de escudo.',
			'Cuando adopta una postura defensiva juntando\nambos puños delante de la cara, es capaz de\nresistir incluso el impacto directo de una bomba.',
			'Su fuerza es tal que, de un empellón, puede hacer volcar un\ntanque de 50 toneladas. Protege a sus aliados cuando hace\nde escudo.',
			'Cuando adopta una postura defensiva juntando ambos puños\ndelante de la cara, es capaz de resistir incluso el impacto\ndirecto de una bomba.',
		],
		[Language.It]: [
			'Attaccando può rovesciare un carro armato da 50 t.\nProtegge gli alleati facendo loro scudo con il proprio\ncorpo.',
			'In posizione difensiva, con i pugni in guardia, è in\ngrado di resistere persino a un’esplosione diretta.',
			'Attaccando può rovesciare un carro armato da 50 t. Protegge\ngli alleati facendo loro scudo con il proprio corpo.',
			'In posizione difensiva, con i pugni in guardia, è in grado\ndi resistere persino a un’esplosione diretta.',
		],
		[Language.En]: [
			'Its Tackle is forceful enough to flip a 50-ton tank.\nIt shields its allies from danger with its own body.',
			'When it takes a defensive posture with its fists\nguarding its face, it could withstand a bomb blast.',
		],
		[Language.Ja]: [
			'体当たりで　５０トンの　戦車を\nひっくり返す　パワー。\n自分が　盾となって　仲間を　守る。',
			'顔の　前で　こぶしを　合わせて\n防御の　ポーズを　とると\n爆弾の　直撃も　耐える。',
		],
	},
	[
		[
			Variety.Chesnaught,
			239,
			16,
			900,
			[Type.Grass, Type.Fighting],
			{
				frontDefault: '5502fda9.png',
				frontShiny: '774504d4.png',
				backDefault: 'b4477dfd.png',
				backShiny: 'ee037677.png',
			},
			{
				[Stat.Hp]: {baseStat: 88},
				[Stat.Attack]: {baseStat: 107},
				[Stat.Defense]: {baseStat: 122, effort: 3},
				[Stat.SpecialAttack]: {baseStat: 74},
				[Stat.SpecialDefense]: {baseStat: 75},
				[Stat.Speed]: {baseStat: 64},
			},
			{},
			[
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.ThunderPunch,
					Move.LowKick,
					Move.SuperFang,
					Move.GigaDrain,
					Move.PainSplit,
					Move.FocusPunch,
					Move.HelpingHand,
					Move.Endeavor,
					Move.IronDefense,
					Move.SeedBomb,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.IronHead,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Roar,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.FrenzyPlant,
					Move.BulkUp,
					Move.GyroBall,
					Move.Fling,
					Move.PoisonJab,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.LowSweep,
					Move.GrassPledge,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Rollout,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
					Move.HammerArm,
					Move.Feint,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					54,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.DoubleEdge,
					Move.Swift,
					Move.Curse,
					Move.Reversal,
					Move.ScaryFace,
					Move.MudSlap,
					Move.Spikes,
					Move.Endure,
					Move.MetalClaw,
					Move.RainDance,
					Move.Crunch,
					Move.KnockOff,
					Move.BulletSeed,
					Move.MudShot,
					Move.MagicalLeaf,
					Move.CloseCombat,
					Move.LeafStorm,
					Move.GrassyTerrain,
					Move.HighHorsepower,
					Move.BodyPress,
					Move.GrassyGlide,
					Move.Coaching,
					Move.TeraBlast,
					Move.Trailblaze,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					29,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PinMissile,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.SuperFang,
					Move.Curse,
					Move.BellyDrum,
					Move.Spikes,
					Move.WideGuard,
					Move.QuickGuard,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					60,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.Synthesis,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.GigaImpact,
					78,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					66,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SpikyShield,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ThunderPunch,
					Move.LowKick,
					Move.SuperFang,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Synthesis,
					Move.FocusPunch,
					Move.HelpingHand,
					Move.Endeavor,
					Move.IronDefense,
					Move.FrenzyPlant,
					Move.SeedBomb,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.GrassPledge,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Roar,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.BulkUp,
					Move.GyroBall,
					Move.Fling,
					Move.PoisonJab,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.LowSweep,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
					Move.Growl,
					Move.Rollout,
					Move.HammerArm,
					Move.Feint,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					5,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					54,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					29,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PinMissile,
					19,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					11,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.Payback,
					Move.Round,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.Superpower,
					Move.Block,
					Move.WorrySeed,
					Move.DualChop,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BellyDrum,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Rollout,
					8,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					60,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.NeedleArm,
					Move.SpikyShield,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					48,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					41,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HammerArm,
					72,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					35,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.GigaImpact,
					78,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					66,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SpikyShield,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Roar,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.BulkUp,
					Move.GyroBall,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.LowSweep,
					Move.Round,
					Move.Bulldoze,
					Move.WorkUp,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
					Move.Growl,
					Move.BellyDrum,
					Move.Rollout,
					Move.NeedleArm,
					Move.HammerArm,
					Move.Feint,
					Move.SpikyShield,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					54,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					29,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PinMissile,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Rollout,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					60,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FrenzyPlant,
					Move.GrassPledge,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					41,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HammerArm,
					72,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.GigaImpact,
					78,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					66,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SpikyShield,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ThunderPunch,
					Move.LowKick,
					Move.SuperFang,
					Move.Snore,
					Move.GigaDrain,
					Move.PainSplit,
					Move.IronTail,
					Move.Synthesis,
					Move.FocusPunch,
					Move.HelpingHand,
					Move.Superpower,
					Move.Endeavor,
					Move.IronDefense,
					Move.Block,
					Move.FrenzyPlant,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.GrassPledge,
					Move.DualChop,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Roar,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.Taunt,
					Move.BrickBreak,
					Move.SecretPower,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.BulkUp,
					Move.GyroBall,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.LowSweep,
					Move.Round,
					Move.Bulldoze,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.Flash,
					Move.RockSmash,
					Move.HoneClaws,
					Move.Retaliate,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					5,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
					Move.BellyDrum,
					Move.HammerArm,
					Move.Feint,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PinMissile,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Rollout,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					52,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NeedleArm,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					44,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HammerArm,
					60,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.GigaImpact,
					70,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SpikyShield,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SpikyShield,
					75,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Cut,
					Move.Roar,
					Move.HyperBeam,
					Move.Strength,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Flash,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.RockSmash,
					Move.Facade,
					Move.NaturePower,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.BulkUp,
					Move.GyroBall,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.HoneClaws,
					Move.SmackDown,
					Move.LowSweep,
					Move.Round,
					Move.Retaliate,
					Move.Bulldoze,
					Move.Confide,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
					Move.BellyDrum,
					Move.HammerArm,
					Move.Feint,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PinMissile,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Rollout,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					52,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NeedleArm,
					26,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FrenzyPlant,
					Move.GrassPledge,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HammerArm,
					60,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.GigaImpact,
					70,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SpikyShield,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SpikyShield,
					75,
				),
			].flat(),
			[
				{
					ability: Ability.Overgrow,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Bulletproof,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Chesnaught,
					PokemonFormBits.Default,
					{
						frontDefault: '5502fda9.png',
						frontShiny: '774504d4.png',
						backDefault: 'b4477dfd.png',
						backShiny: 'ee037677.png',
					},
					[Type.Grass, Type.Fighting],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Fennekin,
	70,
	45,
	Color.Red,
	[EggGroup.Ground],
	1,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.MediumSlow,
	Shape.Quadruped,
	{
		[Language.JaHrkt]: ['フォッコ'],
		[Language.Roomaji]: ['Fokko'],
		[Language.Ko]: ['푸호꼬'],
		[Language.ZhHant]: ['火狐狸'],
		[Language.Fr]: ['Feunnec'],
		[Language.De]: ['Fynx'],
		[Language.Es]: ['Fennekin'],
		[Language.It]: ['Fennekin'],
		[Language.En]: ['Fennekin'],
		[Language.Ja]: ['フォッコ'],
		[Language.ZhHans]: ['火狐狸'],
	},
	{
		[Language.JaHrkt]: ['キツネポケモン'],
		[Language.Ko]: ['여우포켓몬'],
		[Language.ZhHant]: ['狐狸寶可夢'],
		[Language.Fr]: ['Pokémon Renard'],
		[Language.De]: ['Fuchs'],
		[Language.Es]: ['Pokémon Zorro'],
		[Language.It]: ['Pokémon Volpe'],
		[Language.En]: ['Fox Pokémon'],
		[Language.Ja]: ['キツネポケモン'],
		[Language.ZhHans]: ['狐狸宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'こえだを　たべると　げんきになって\nせっし２００どを　こえる　ねっきを\nおおきな　みみから　ふきだす。',
			'こえだを　もちあるき　おやつがわりに\nポリポリ　たべる。みみから　ねっきを\nふきだして　あいてを　いかくする。',
		],
		[Language.Ko]: [
			'잔가지를 먹으면 힘이 나서\n섭씨 200도가 넘는 열기를\n커다란 귀에서 내뿜는다.',
			'작은 나뭇가지를 들고 다니며 간식 대신\n아작아작 먹는다. 귀에서 열기를\n뿜어내어 상대를 위협한다.',
		],
		[Language.Fr]: [
			'En cas de coup de fatigue, il grignote des rameaux\npour recharger ses batteries. Ses oreilles dégagent\nune chaleur qui dépasse les 200 °C.',
			'Il a toujours une brindille avec lui en cas de petit\ncreux. Il projette de l’air chaud par ses oreilles pour\nintimider ses ennemis.',
			'Il a toujours une brindille avec lui en cas de petit creux.\nIl projette de l’air chaud par ses oreilles pour intimider\nses ennemis.',
		],
		[Language.De]: [
			'Wenn es Zweige frisst, fasst es neue Kraft und stößt\nüber seine Ohren über 200 °C heiße Luft aus.',
			'Anstelle eines Snacks kaut es unterwegs auf einem\nZweig herum. Es schreckt Gegner ab, indem es über\nseine Ohren heiße Luft ausstößt.',
			'Wenn es Zweige frisst, fasst es neue Kraft und stößt über\nseine Ohren über 200 °C heiße Luft aus.',
			'Anstelle eines Snacks kaut es unterwegs auf einem Zweig\nherum. Es schreckt Gegner ab, indem es über seine Ohren\nheiße Luft ausstößt.',
		],
		[Language.Es]: [
			'Tras masticar e ingerir pequeñas ramas se siente\npletórico y expulsa aire caliente por sus grandes\norejas a temperaturas superiores a los 200 ºC.',
			'Mordisquea una ramita mientras camina, como si de\nun aperitivo se tratase. Intimida a su enemigo\nexpulsando aire caliente por las orejas.',
			'Tras masticar e ingerir pequeñas ramas se siente pletórico y\nexpulsa aire caliente por sus grandes orejas a temperaturas\nsuperiores a los 200 °C.',
			'Mordisquea una ramita mientras camina, como si de un\naperitivo se tratase. Intimida a su enemigo expulsando aire\ncaliente por las orejas.',
		],
		[Language.It]: [
			'Fa il pieno di energia mangiando ramoscelli ed emette\naria calda dalle grandi orecchie a una temperatura\ndi oltre 200 °C.',
			'Se ne va in giro sgranocchiando un rametto.\nIntimidisce i nemici emettendo aria calda dalle\norecchie.',
			'Fa il pieno di energia mangiando ramoscelli ed emette aria\ncalda dalle grandi orecchie a una temperatura di oltre 200 °C.',
			'Se ne va in giro sgranocchiando un rametto. Intimidisce\ni nemici emettendo aria calda dalle orecchie.',
		],
		[Language.En]: [
			'Eating a twig fills it with energy,\nand its roomy ears give vent to air\nhotter than 390 degrees Fahrenheit.',
			'As it walks, it munches on a twig in place\nof a snack. It intimidates opponents\nby puffing hot air out of its ears.',
		],
		[Language.Ja]: [
			'小枝を　食べると　元気になって\n摂氏２００度を　超える　熱気を\n大きな　耳から　噴き出す。',
			'小枝を　持ち歩き　おやつがわりに\nポリポリ　食べる。耳から　熱気を\n噴き出して　相手を　威嚇する。',
		],
	},
	[
		[
			Variety.Fennekin,
			61,
			4,
			94,
			[Type.Fire],
			{
				frontDefault: 'd06b21e2.png',
				frontShiny: '6c08b61a.png',
				backDefault: 'bf337910.png',
				backShiny: '8dc30954.png',
			},
			{
				[Stat.Hp]: {baseStat: 40},
				[Stat.Attack]: {baseStat: 45},
				[Stat.Defense]: {baseStat: 40},
				[Stat.SpecialAttack]: {baseStat: 62, effort: 1},
				[Stat.SpecialDefense]: {baseStat: 60},
				[Stat.Speed]: {baseStat: 60},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.TailWhip,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.Psybeam,
					Move.FireSpin,
					Move.Agility,
					Move.Swift,
					Move.MudSlap,
					Move.Endure,
					Move.Charm,
					Move.Encore,
					Move.HeatWave,
					Move.HelpingHand,
					Move.Trick,
					Move.SkillSwap,
					Move.Imprison,
					Move.MudShot,
					Move.CalmMind,
					Move.FlareBlitz,
					Move.TrickRoom,
					Move.StoredPower,
					Move.BurningJealousy,
					Move.TeraBlast,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Overheat,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FlameCharge,
					Move.FirePledge,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FireSpin,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					41,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Hypnosis,
					Move.HeatWave,
					Move.Wish,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FireBlast,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SunnyDay,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Howl,
					11,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.Copycat,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.MagicRoom,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					14,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.FoulPlay,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.PsychicTerrain,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.TailWhip,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					35,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Overheat,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FlameCharge,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FireSpin,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.PsychUp,
					Move.Embargo,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					41,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Hypnosis,
					Move.HeatWave,
					Move.Wish,
					Move.PsychicTerrain,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					27,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FireBlast,
					48,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.Covet,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SunnyDay,
					43,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HeatWave,
					Move.MagicCoat,
					Move.MagicRoom,
					Move.FoulPlay,
					Move.FirePledge,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Egg,
					Move.MagicCoat,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Howl,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					25,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					46,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.TailWhip,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.WillOWisp,
					Move.Facade,
					Move.Overheat,
					Move.Embargo,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FlameCharge,
					Move.Round,
					Move.EchoedVoice,
					Move.WorkUp,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FireSpin,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					41,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Hypnosis,
					Move.HeatWave,
					Move.Wish,
					Move.MagicCoat,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FireBlast,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SunnyDay,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Howl,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					46,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.FirePledge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.TailWhip,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Incinerate,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					35,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.WillOWisp,
					Move.Facade,
					Move.SecretPower,
					Move.Overheat,
					Move.Embargo,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FlameCharge,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FireSpin,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					41,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Hypnosis,
					Move.HeatWave,
					Move.Wish,
					Move.MagicCoat,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					27,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FireBlast,
					48,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.HeatWave,
					Move.MagicCoat,
					Move.Covet,
					Move.MagicRoom,
					Move.FoulPlay,
					Move.FirePledge,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SunnyDay,
					43,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Howl,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					46,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					14,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.TailWhip,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.WillOWisp,
					Move.Facade,
					Move.Overheat,
					Move.Embargo,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FlameCharge,
					Move.Round,
					Move.EchoedVoice,
					Move.Incinerate,
					Move.Confide,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FireSpin,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					41,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Hypnosis,
					Move.HeatWave,
					Move.Wish,
					Move.MagicCoat,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FireBlast,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SunnyDay,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Howl,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					14,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Tutor,
					Move.FirePledge,
				),
			].flat(),
			[
				{
					ability: Ability.Blaze,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Magician,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Fennekin,
					PokemonFormBits.Default,
					{
						frontDefault: 'd06b21e2.png',
						frontShiny: '6c08b61a.png',
						backDefault: 'bf337910.png',
						backShiny: '8dc30954.png',
					},
					[Type.Fire],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Braixen,
	70,
	45,
	Color.Red,
	[EggGroup.Ground],
	1,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.MediumSlow,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['テールナー'],
		[Language.Roomaji]: ['Tairenar'],
		[Language.Ko]: ['테르나'],
		[Language.ZhHant]: ['長尾火狐'],
		[Language.Fr]: ['Roussil'],
		[Language.De]: ['Rutena'],
		[Language.Es]: ['Braixen'],
		[Language.It]: ['Braixen'],
		[Language.En]: ['Braixen'],
		[Language.Ja]: ['テールナー'],
		[Language.ZhHans]: ['长尾火狐'],
	},
	{
		[Language.JaHrkt]: ['キツネポケモン'],
		[Language.Ko]: ['여우포켓몬'],
		[Language.ZhHant]: ['狐狸寶可夢'],
		[Language.Fr]: ['Pokémon Renard'],
		[Language.De]: ['Fuchs'],
		[Language.Es]: ['Pokémon Zorro'],
		[Language.It]: ['Pokémon Volpe'],
		[Language.En]: ['Fox Pokémon'],
		[Language.Ja]: ['キツネポケモン'],
		[Language.ZhHans]: ['狐狸宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'きのえだを　しっぽに　さしている。\nしっぽの　けの　まさつねつで\nえだに　ひをつけて　たたかう。',
			'きのえだを　しっぽから　ひきぬくとき\nまさつで　ちゃっか。えだの　ほのおを\nふって　なかまに　あいずを　おくる。',
		],
		[Language.Ko]: [
			'나뭇가지를 꼬리에 꽂고 있다.\n꼬리털의 마찰열로\n가지에 불을 붙여 싸운다.',
			'나뭇가지를 꼬리에서 뽑을 때\n마찰로 불이 붙는다. 나뭇가지의 불꽃을\n흔들어 동료에게 신호를 보낸다.',
		],
		[Language.Fr]: [
			'Il allume la branche plantée dans sa queue en la\nfrottant contre son pelage et s’en sert au combat.',
			'Quand il saisit la branche plantée dans sa queue,\nelle prend feu par friction. Il peut communiquer avec\nses congénères en agitant ce bâton enflammé.',
			'Il allume la branche plantée dans sa queue en la frottant\ncontre son pelage et s’en sert au combat.',
			'Quand il saisit la branche plantée dans sa queue, elle prend\nfeu par friction. Il peut communiquer avec ses congénères\nen agitant ce bâton enflammé.',
		],
		[Language.De]: [
			'In seinem Schweif steckt ein Zweig, den es bei Bedarf\nmit der Reibungswärme seiner Schweifhaare anzündet\nund im Kampf einsetzt.',
			'Sein Zweig entzündet sich durch die Reibung, die beim\nHerausziehen aus seinem Schweif entsteht. Mit der\nFlamme sendet es Signale an Kameraden.',
			'In seinem Schweif steckt ein Zweig, den es bei Bedarf mit der\nReibungswärme seiner Schweifhaare anzündet und im Kampf\neinsetzt.',
			'Sein Zweig entzündet sich durch die Reibung, die beim\nHerausziehen aus seinem Schweif entsteht. Mit der Flamme\nsendet es Signale an Kameraden.',
		],
		[Language.Es]: [
			'Tiene una rama enredada en la cola. Cuando la saca,\nla rama prende fuego al hacer fricción con su pelaje\ny se lanza al ataque con ella.',
			'Al extraer la rama que tiene en la cola, esta prende\ndebido a la fricción. Usa esa rama candente para\nenviar señales a sus compañeros.',
			'Tiene una rama enredada en la cola. Cuando la saca, la rama\nprende fuego al hacer fricción con su pelaje y se lanza al\nataque con ella.',
			'Al extraer la rama que tiene en la cola, esta prende debido a\nla fricción. Usa esa rama candente para enviar señales a sus\ncompañeros.',
		],
		[Language.It]: [
			'Incendia il ramo che ha infilato nella coda grazie allo\nsfregamento del pelo per poi lanciarsi nella lotta.',
			'Incendia il rametto che ha nella coda semplicemente\nestraendolo, grazie alla frizione del pelo. Lo usa anche\nper mandare segnali ai suoi compagni.',
		],
		[Language.En]: [
			'It has a twig stuck in its tail. With\nfriction from its tail fur, it sets the\ntwig on fire and launches into battle.',
			'When the twig is plucked from its tail,\nfriction sets the twig alight. The flame\nis used to send signals to its allies.',
		],
		[Language.Ja]: [
			'木の枝を　尻尾に　挿している。\n尻尾の　毛の　摩擦熱で\n枝に　火をつけて　戦う。',
			'木の枝を　尻尾から　引き抜くとき\n摩擦で　着火。枝の　炎を　振って\n仲間に　合図を　送る。',
		],
	},
	[
		[
			Variety.Braixen,
			143,
			10,
			145,
			[Type.Fire],
			{
				frontDefault: 'db551beb.png',
				frontShiny: '0f552480.png',
				backDefault: '9f8ecd95.png',
				backShiny: 'ded3315b.png',
			},
			{
				[Stat.Hp]: {baseStat: 59},
				[Stat.Attack]: {baseStat: 59},
				[Stat.Defense]: {baseStat: 58},
				[Stat.SpecialAttack]: {baseStat: 90, effort: 2},
				[Stat.SpecialDefense]: {baseStat: 70},
				[Stat.Speed]: {baseStat: 73},
			},
			{},
			[
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.HeatWave,
					Move.Trick,
					Move.SkillSwap,
					Move.ZenHeadbutt,
					Move.FoulPlay,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.TailWhip,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.Psybeam,
					Move.FireSpin,
					Move.Agility,
					Move.Swift,
					Move.MudSlap,
					Move.Endure,
					Move.Charm,
					Move.Encore,
					Move.HelpingHand,
					Move.Imprison,
					Move.MudShot,
					Move.CalmMind,
					Move.FlareBlitz,
					Move.TrickRoom,
					Move.StoredPower,
					Move.PsychicTerrain,
					Move.BurningJealousy,
					Move.TeraBlast,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					41,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Overheat,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FlameCharge,
					Move.FirePledge,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FireSpin,
					22,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					49,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Hypnosis,
					Move.HeatWave,
					Move.Wish,
					Move.Copycat,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FireBlast,
					59,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SunnyDay,
					52,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Howl,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					56,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.MagicRoom,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					14,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.HeatWave,
					Move.Trick,
					Move.SkillSwap,
					Move.ZenHeadbutt,
					Move.Telekinesis,
					Move.MagicRoom,
					Move.FoulPlay,
					Move.AllySwitch,
					Move.FirePledge,
					Move.LaserFocus,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.TailWhip,
					Move.Ember,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					41,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Overheat,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FlameCharge,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					18,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FireSpin,
					22,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.PsychUp,
					Move.Embargo,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					31,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FireBlast,
					59,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.MagicCoat,
					Move.Recycle,
					Move.Snatch,
					Move.Covet,
					Move.ShockWave,
					Move.WonderRoom,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SunnyDay,
					52,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					45,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Howl,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					28,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					36,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					56,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.TailWhip,
					Move.Ember,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					41,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.WillOWisp,
					Move.Facade,
					Move.Overheat,
					Move.Embargo,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FlameCharge,
					Move.Round,
					Move.EchoedVoice,
					Move.WorkUp,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FireSpin,
					22,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FireBlast,
					59,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SunnyDay,
					52,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Howl,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					56,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.FirePledge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.Snore,
					Move.IronTail,
					Move.HeatWave,
					Move.Trick,
					Move.MagicCoat,
					Move.Recycle,
					Move.SkillSwap,
					Move.Snatch,
					Move.Covet,
					Move.ShockWave,
					Move.ZenHeadbutt,
					Move.WonderRoom,
					Move.MagicRoom,
					Move.FoulPlay,
					Move.FirePledge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.TailWhip,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Incinerate,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					41,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.WillOWisp,
					Move.Facade,
					Move.SecretPower,
					Move.Overheat,
					Move.Embargo,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FlameCharge,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FireSpin,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FireBlast,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SunnyDay,
					51,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					45,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Howl,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					53,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					14,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.TailWhip,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.WillOWisp,
					Move.Facade,
					Move.Overheat,
					Move.Embargo,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FlameCharge,
					Move.Round,
					Move.EchoedVoice,
					Move.Incinerate,
					Move.Confide,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FireSpin,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FireBlast,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SunnyDay,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Howl,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					53,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					14,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Tutor,
					Move.FirePledge,
				),
			].flat(),
			[
				{
					ability: Ability.Blaze,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Magician,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Braixen,
					PokemonFormBits.Default,
					{
						frontDefault: 'db551beb.png',
						frontShiny: '0f552480.png',
						backDefault: '9f8ecd95.png',
						backShiny: 'ded3315b.png',
					},
					[Type.Fire],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Delphox,
	70,
	45,
	Color.Red,
	[EggGroup.Ground],
	1,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.MediumSlow,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['マフォクシー'],
		[Language.Roomaji]: ['Mahoxy'],
		[Language.Ko]: ['마폭시'],
		[Language.ZhHant]: ['妖火紅狐'],
		[Language.Fr]: ['Goupelin'],
		[Language.De]: ['Fennexis'],
		[Language.Es]: ['Delphox'],
		[Language.It]: ['Delphox'],
		[Language.En]: ['Delphox'],
		[Language.Ja]: ['マフォクシー'],
		[Language.ZhHans]: ['妖火红狐'],
	},
	{
		[Language.JaHrkt]: ['キツネポケモン'],
		[Language.Ko]: ['여우포켓몬'],
		[Language.ZhHant]: ['狐狸寶可夢'],
		[Language.Fr]: ['Pokémon Renard'],
		[Language.De]: ['Fuchs'],
		[Language.Es]: ['Pokémon Zorro'],
		[Language.It]: ['Pokémon Volpe'],
		[Language.En]: ['Fox Pokémon'],
		[Language.Ja]: ['キツネポケモン'],
		[Language.ZhHans]: ['狐狸宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'つえの　せんたんで　もえる　ほのおを\nみつめて　せいしんとういつすると\nみらいの　できごとを　みとおせる。',
			'せっし３０００どの　ほのおの　うずを\nちょうのうりょくで　あやつる。\nてきを　うずで　つつみ　やきつくす。',
		],
		[Language.Ko]: [
			'지팡이 끝의 타오르는 불꽃을\n바라보며 정신을 통일하면\n미래에 일어날 일을 내다볼 수 있다.',
			'섭씨 3000도의 불꽃 소용돌이를\n초능력으로 조종한다.\n적을 소용돌이로 감싸 불태운다.',
		],
		[Language.Fr]: [
			'Peut prédire l’avenir s’il se concentre en fixant\nla flamme qui danse au bout de sa canne.',
			'Ses pouvoirs psychiques lui permettent de créer\ndes tourbillons de flammes à 3 000 °C qui\nenveloppent et consument ses ennemis.',
			'Peut prédire l’avenir s’il se concentre en fixant la flamme\nqui danse au bout de sa canne.',
			'Ses pouvoirs psychiques lui permettent de créer\ndes tourbillons de flammes à 3 000 °C qui enveloppent\net consument ses ennemis.',
		],
		[Language.De]: [
			'Es kann die Zukunft vorhersehen, indem es\nkonzentriert in die Flamme an der Spitze\nseines Zweiges blickt.',
			'Mit seinen übernatürlichen Kräften kontrolliert es einen\n3 000 °C heißen Flammenwirbel, mit dem es seine\nGegner umhüllt und sie verbrennt.',
			'Es kann die Zukunft vorhersehen, indem es konzentriert\nin die Flamme an der Spitze seines Zweiges blickt.',
			'Mit seinen übernatürlichen Kräften kontrolliert es einen\n3 000 °C heißen Flammenwirbel, mit dem es seine Gegner\numhüllt und sie verbrennt.',
		],
		[Language.Es]: [
			'Fija la mirada en la llama que arde en la punta de su\nbastón para concentrarse y prever sucesos que\ntienen lugar en el futuro.',
			'Sus poderes psíquicos le permiten controlar vórtices\nde fuego a 3000 °C que envuelven y calcinan a sus\nenemigos.',
			'Fija la mirada en la llama que arde en la punta de su bastón\npara concentrarse y prever sucesos que tienen lugar en el\nfuturo.',
			'Sus poderes psíquicos le permiten controlar vórtices de fuego\na 3000 °C que envuelven y calcinan a sus enemigos.',
		],
		[Language.It]: [
			'Fissando la fiamma del ramo che ha in mano, aumenta\nal massimo la concentrazione e può predire il futuro.',
			'Grazie ai suoi poteri psichici, può generare un vortice\ndi fiamme a 3000 °C con il quale avvolge i nemici\ne li incenerisce.',
		],
		[Language.En]: [
			'It gazes into the flame at the tip of\nits branch to achieve a focused state,\nwhich allows it to see into the future.',
			'Using psychic power, it generates a\nfiery vortex of 5,400 degrees Fahrenheit,\nincinerating foes swept into this whirl of flame.',
		],
		[Language.Ja]: [
			'杖の　先端で　燃える　炎を　見つめて\n精神統一すると\n未来の　出来事を　見通せる。',
			'摂氏３０００度の　炎の　渦を\n超能力で　操る。\n敵を　渦で　包み　焼きつくす。',
		],
	},
	[
		[
			Variety.Delphox,
			240,
			15,
			390,
			[Type.Fire, Type.Psychic],
			{
				frontDefault: 'be9ccf62.png',
				frontShiny: '16fc1c69.png',
				backDefault: 'aad7798c.png',
				backShiny: '3aad205d.png',
			},
			{
				[Stat.Hp]: {baseStat: 75},
				[Stat.Attack]: {baseStat: 69},
				[Stat.Defense]: {baseStat: 72},
				[Stat.SpecialAttack]: {baseStat: 114, effort: 3},
				[Stat.SpecialDefense]: {baseStat: 100},
				[Stat.Speed]: {baseStat: 104},
			},
			{},
			[
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.HeatWave,
					Move.Trick,
					Move.SkillSwap,
					Move.ZenHeadbutt,
					Move.FoulPlay,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.TailWhip,
					Move.ShadowBall,
					Move.FutureSight,
					Move.RolePlay,
					Move.Switcheroo,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.Psybeam,
					Move.FireSpin,
					Move.Agility,
					Move.NightShade,
					Move.ConfuseRay,
					Move.Reflect,
					Move.Metronome,
					Move.Swift,
					Move.MudSlap,
					Move.Endure,
					Move.Charm,
					Move.Encore,
					Move.FutureSight,
					Move.HelpingHand,
					Move.Imprison,
					Move.HyperVoice,
					Move.MudShot,
					Move.FlareBlitz,
					Move.FocusBlast,
					Move.NastyPlot,
					Move.StoredPower,
					Move.Hex,
					Move.PsychicTerrain,
					Move.ExpandingForce,
					Move.BurningJealousy,
					Move.ScorchingSands,
					Move.TeraBlast,
					Move.PsychicNoise,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Ember,
					Move.Howl,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					45,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.BlastBurn,
					Move.Overheat,
					Move.CalmMind,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FlameCharge,
					Move.FirePledge,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FireSpin,
					22,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					57,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Hypnosis,
					Move.HeatWave,
					Move.Wish,
					Move.Copycat,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FireBlast,
					74,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SunnyDay,
					62,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					51,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					68,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.MagicRoom,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MysticalFire,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.HeatWave,
					Move.Trick,
					Move.SkillSwap,
					Move.BlastBurn,
					Move.ZenHeadbutt,
					Move.Telekinesis,
					Move.MagicRoom,
					Move.FoulPlay,
					Move.AllySwitch,
					Move.FirePledge,
					Move.LaserFocus,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.TailWhip,
					Move.Ember,
					Move.ShadowBall,
					Move.FutureSight,
					Move.RolePlay,
					Move.Howl,
					Move.Switcheroo,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					45,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.Overheat,
					Move.CalmMind,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FlameCharge,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					18,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FireSpin,
					22,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.Embargo,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					57,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					31,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FireBlast,
					74,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.RolePlay,
					Move.MagicCoat,
					Move.Recycle,
					Move.Snatch,
					Move.SignalBeam,
					Move.Covet,
					Move.ShockWave,
					Move.WonderRoom,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SunnyDay,
					62,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FutureSight,
					80,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Howl,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					28,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					38,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					68,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MysticalFire,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MysticalFire,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.TailWhip,
					Move.Ember,
					Move.ShadowBall,
					Move.FutureSight,
					Move.RolePlay,
					Move.Howl,
					Move.Switcheroo,
					Move.MysticalFire,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					45,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.Overheat,
					Move.CalmMind,
					Move.Embargo,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FlameCharge,
					Move.Round,
					Move.EchoedVoice,
					Move.WorkUp,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FireSpin,
					22,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					57,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FireBlast,
					74,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SunnyDay,
					62,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FutureSight,
					80,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					51,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.BlastBurn,
					Move.FirePledge,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Howl,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					68,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MysticalFire,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.Snore,
					Move.IronTail,
					Move.HeatWave,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.Recycle,
					Move.SkillSwap,
					Move.Snatch,
					Move.BlastBurn,
					Move.SignalBeam,
					Move.Covet,
					Move.ShockWave,
					Move.ZenHeadbutt,
					Move.WonderRoom,
					Move.MagicRoom,
					Move.FoulPlay,
					Move.FirePledge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.TailWhip,
					Move.ShadowBall,
					Move.FutureSight,
					Move.RolePlay,
					Move.Switcheroo,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Incinerate,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					42,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.SecretPower,
					Move.Overheat,
					Move.CalmMind,
					Move.Embargo,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FlameCharge,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FireSpin,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FireBlast,
					61,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SunnyDay,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FutureSight,
					69,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					47,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Howl,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					58,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					14,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MysticalFire,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MysticalFire,
					75,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.TailWhip,
					Move.ShadowBall,
					Move.FutureSight,
					Move.RolePlay,
					Move.Switcheroo,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.Overheat,
					Move.CalmMind,
					Move.Embargo,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FlameCharge,
					Move.Round,
					Move.EchoedVoice,
					Move.Incinerate,
					Move.Confide,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FireSpin,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FireBlast,
					61,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SunnyDay,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FutureSight,
					69,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					47,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.BlastBurn,
					Move.FirePledge,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Howl,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					58,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					14,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MysticalFire,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MysticalFire,
					75,
				),
			].flat(),
			[
				{
					ability: Ability.Blaze,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Magician,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Delphox,
					PokemonFormBits.Default,
					{
						frontDefault: 'be9ccf62.png',
						frontShiny: '16fc1c69.png',
						backDefault: 'aad7798c.png',
						backShiny: '3aad205d.png',
					},
					[Type.Fire, Type.Psychic],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Froakie,
	70,
	45,
	Color.Blue,
	[EggGroup.Water1],
	1,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.MediumSlow,
	Shape.Quadruped,
	{
		[Language.JaHrkt]: ['ケロマツ'],
		[Language.Roomaji]: ['Keromatsu'],
		[Language.Ko]: ['개구마르'],
		[Language.ZhHant]: ['呱呱泡蛙'],
		[Language.Fr]: ['Grenousse'],
		[Language.De]: ['Froxy'],
		[Language.Es]: ['Froakie'],
		[Language.It]: ['Froakie'],
		[Language.En]: ['Froakie'],
		[Language.Ja]: ['ケロマツ'],
		[Language.ZhHans]: ['呱呱泡蛙'],
	},
	{
		[Language.JaHrkt]: ['あわがえるポケモン'],
		[Language.Ko]: ['거품개구리포켓몬'],
		[Language.ZhHant]: ['泡蛙寶可夢'],
		[Language.Fr]: ['Pokémon Crapobulle'],
		[Language.De]: ['Blubbfrosch'],
		[Language.Es]: ['Pokémon Burburrana'],
		[Language.It]: ['Pokémon Schiumorana'],
		[Language.En]: ['Bubble Frog Pokémon'],
		[Language.Ja]: ['あわがえるポケモン'],
		[Language.ZhHans]: ['泡蛙宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'むねと　せなかから　あわを　だす。\nだんりょくのある　あわで　こうげきを\nうけとめて　ダメージを　へらす。',
			'せんさいな　あわで　からだを　つつみ\nはだを　まもる。のんきに　みせかけて\nぬけめなく　しゅういを　うかがう。',
		],
		[Language.Ko]: [
			'가슴과 등에서 거품을 내뿜는다.\n탄력 있는 거품으로 공격을\n막아내고 데미지를 줄인다.',
			'섬세한 거품으로 몸을 감싸\n피부를 보호한다. 태평한 척하면서\n빈틈없이 주위를 살핀다.',
		],
		[Language.Fr]: [
			'Sa poitrine et son dos sécrètent une mousse qui\nlui permet de subir moins de dégâts en amortissant\nle choc des attaques.',
			'Il protège son corps en l’entourant d’une mousse\ndélicate. Malgré son apparence insouciante,\nce Pokémon est en fait constamment à l’affût.',
			'Sa poitrine et son dos sécrètent une mousse qui lui permet\nde subir moins de dégâts en amortissant le choc des attaques.',
			'Il protège son corps en l’entourant d’une mousse délicate.\nMalgré son apparence insouciante, ce Pokémon est en fait\nconstamment à l’affût.',
		],
		[Language.De]: [
			'Es stößt aus Brust und Rücken elastische Blasen aus,\nmit denen es gegnerische Angriffe abfängt und so\nden erlittenen Schaden verringert.',
			'Es schützt seine Haut mit feinen Blasen, die seinen\nKörper umhüllen. Es mag unbekümmert aussehen,\nbehält die Umgebung aber immer aufmerksam im Auge.',
			'Es stößt aus Brust und Rücken elastische Blasen aus,\nmit denen es gegnerische Angriffe abfängt und so den\nerlittenen Schaden verringert.',
		],
		[Language.Es]: [
			'Secreta burbujas tanto por la espalda como\npor el pecho. Gracias a la elasticidad de estas,\npuede parar ataques y reducir el daño recibido.',
			'Protege su piel cubriendo el cuerpo con una fina capa\nde burbujas. Aunque parezca despreocupado, no deja\nde vigilar con astucia lo que le rodea.',
			'Secreta burbujas tanto por la espalda como por el pecho.\nGracias a la elasticidad de estas, puede parar ataques y\nreducir el daño recibido.',
			'Protege su piel cubriendo el cuerpo con una fina capa de\nburbujas. Aunque parezca despreocupado, no deja de vigilar\ncon astucia lo que le rodea.',
		],
		[Language.It]: [
			'Dal petto e dalla schiena secerne una schiuma\nche gli permette di attutire i danni causati dagli\nattacchi nemici.',
			'Si protegge avvolgendo il corpo in una schiuma\ndelicata. Nonostante l’aria spensierata, scruta sempre\nl’ambiente circostante con molta attenzione.',
			'Dal petto e dalla schiena secerne una schiuma che gli\npermette di attutire i danni causati dagli attacchi nemici.',
			'Si protegge avvolgendo il corpo in una schiuma delicata.\nNonostante l’aria spensierata, scruta sempre l’ambiente\ncircostante con molta attenzione.',
		],
		[Language.En]: [
			'It secretes flexible bubbles from its chest and back.\nThe bubbles reduce the damage it would otherwise\ntake when attacked.',
			'It protects its skin by covering its body in\ndelicate bubbles. Beneath its happy-go-lucky air,\nit keeps a watchful eye on its surroundings.',
		],
		[Language.Ja]: [
			'胸と　背中から　泡を　出す。\n弾力のある　泡で　攻撃を　受け止めて\nダメージを　減らす。',
			'繊細な　泡で　体を　包み\n肌を　守る。のんきに　見せかけて\n抜け目なく　周囲を　うかがう。',
		],
	},
	[
		[
			Variety.Froakie,
			63,
			3,
			70,
			[Type.Water],
			{
				frontDefault: 'd97ccae6.png',
				frontShiny: 'dfc98f3e.png',
				backDefault: 'c0a9935e.png',
				backShiny: '0d02ac16.png',
			},
			{
				[Stat.Hp]: {baseStat: 41},
				[Stat.Attack]: {baseStat: 56},
				[Stat.Defense]: {baseStat: 40},
				[Stat.SpecialAttack]: {baseStat: 62},
				[Stat.SpecialDefense]: {baseStat: 44},
				[Stat.Speed]: {baseStat: 71, effort: 1},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.HydroPump,
					Move.Swift,
					Move.MudSlap,
					Move.Spikes,
					Move.Endure,
					Move.FalseSwipe,
					Move.HelpingHand,
					Move.MudShot,
					Move.ToxicSpikes,
					Move.Liquidation,
					Move.TeraBlast,
					Move.Snowscape,
					Move.Trailblaze,
					Move.ChillingWater,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Dig,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Acrobatics,
					Move.WaterPledge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Counter,
					Move.Spikes,
					Move.Switcheroo,
					Move.Retaliate,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					35,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IcyWind,
					Move.WaterPulse,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Fling,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.ToxicSpikes,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					29,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Round,
					21,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					48,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Acrobatics,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Confide,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					43,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					18,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.MindReader,
					Move.Camouflage,
					Move.MudSport,
					Move.WaterSport,
					Move.Bestow,
					Move.PowerUpPunch,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Spite,
					Move.RolePlay,
					Move.Snatch,
					Move.Bounce,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.IcyWind,
					Move.WaterPulse,
					Move.WaterPledge,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					39,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Fling,
					25,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Egg,
					Move.ToxicSpikes,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					29,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Round,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Acrobatics,
					Move.WorkUp,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.MindReader,
					Move.Camouflage,
					Move.MudSport,
					Move.WaterSport,
					Move.ToxicSpikes,
					Move.Bestow,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					39,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Fling,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					29,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Round,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.WaterPledge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.RockSmash,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					48,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.SecretPower,
					Move.Dive,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Acrobatics,
					Move.Confide,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					43,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					35,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.MindReader,
					Move.Camouflage,
					Move.MudSport,
					Move.WaterSport,
					Move.ToxicSpikes,
					Move.Bestow,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Spite,
					Move.IcyWind,
					Move.RolePlay,
					Move.Snatch,
					Move.Bounce,
					Move.WaterPulse,
					Move.WaterPledge,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					39,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Fling,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					29,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Round,
					21,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Strength,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.RockSmash,
					Move.Facade,
					Move.Taunt,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Acrobatics,
					Move.Confide,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.MindReader,
					Move.Camouflage,
					Move.MudSport,
					Move.WaterSport,
					Move.ToxicSpikes,
					Move.Bestow,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Fling,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					29,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Round,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Tutor,
					Move.WaterPledge,
				),
			].flat(),
			[
				{
					ability: Ability.Torrent,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Protean,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Froakie,
					PokemonFormBits.Default,
					{
						frontDefault: 'd97ccae6.png',
						frontShiny: 'dfc98f3e.png',
						backDefault: 'c0a9935e.png',
						backShiny: '0d02ac16.png',
					},
					[Type.Water],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Frogadier,
	70,
	45,
	Color.Blue,
	[EggGroup.Water1],
	1,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.MediumSlow,
	Shape.Humanoid,
	{
		[Language.JaHrkt]: ['ゲコガシラ'],
		[Language.Roomaji]: ['Gekogashira'],
		[Language.Ko]: ['개굴반장'],
		[Language.ZhHant]: ['呱頭蛙'],
		[Language.Fr]: ['Croâporal'],
		[Language.De]: ['Amphizel'],
		[Language.Es]: ['Frogadier'],
		[Language.It]: ['Frogadier'],
		[Language.En]: ['Frogadier'],
		[Language.Ja]: ['ゲコガシラ'],
		[Language.ZhHans]: ['呱头蛙'],
	},
	{
		[Language.JaHrkt]: ['あわがえるポケモン'],
		[Language.Ko]: ['거품개구리포켓몬'],
		[Language.ZhHant]: ['泡蛙寶可夢'],
		[Language.Fr]: ['Pokémon Crapobulle'],
		[Language.De]: ['Blubbfrosch'],
		[Language.Es]: ['Pokémon Burburrana'],
		[Language.It]: ['Pokémon Schiumorana'],
		[Language.En]: ['Bubble Frog Pokémon'],
		[Language.Ja]: ['あわがえるポケモン'],
		[Language.ZhHans]: ['泡蛙宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'あわで　つつんだ　こいしを　なげる\nわざを　つかう。３０メートル　さきの\nあきかんに　あてる　コントロール。',
			'みがるさは　だれにも　まけない。\n６００メートルを　こえる　タワーの\nてっぺんまで　１ぷんで　のぼりきる。',
		],
		[Language.Ko]: [
			'거품으로 싸인 돌멩이를 던지는\n기술을 쓴다. 30m 앞에 있는\n빈 캔을 맞출 정도로 컨트롤이 좋다.',
			'누구보다도 가벼운 몸을 갖고 있다.\n600m를 넘는 타워의\n꼭대기까지 1분이면 올라간다.',
			'거품으로 싸인 돌멩이를 던지는\n기술을 쓴다. 30m 앞에 있는\n빈 캔을 맞힐 정도로 컨트롤이 좋다.',
		],
		[Language.Fr]: [
			'Il est capable de lancer des pierres recouvertes\nde mousse avec une précision suffisante pour toucher\nune canette vide à 30 m.',
			'Son agilité est incomparable.\nIl peut gravir une tour de 600 m de haut en moins\nd’une minute.',
			'Il est capable de lancer des pierres recouvertes de mousse\navec une précision suffisante pour toucher une canette vide\nà 30 m.',
			'Son agilité est incomparable. Il peut gravir une tour de 600 m\nde haut en moins d’une minute.',
		],
		[Language.De]: [
			'Es kann kleine in Blasen gehüllte Steine mit solcher\nPräzision werfen, dass es selbst 30 m entfernte Dosen\nproblemlos trifft.',
			'Seine Flinkheit sucht ihresgleichen. Es kann einen\n600 m hohen Turm in weniger als einer Minute\nerklimmen.',
			'Es kann kleine in Blasen gehüllte Steine mit solcher Präzision\nwerfen, dass es selbst 30 m entfernte Dosen problemlos trifft.',
			'Seine Flinkheit sucht ihresgleichen. Es kann einen 600 m\nhohen Turm in weniger als einer Minute erklimmen.',
		],
		[Language.Es]: [
			'Puede lanzar piedras envueltas en burbujas con tal\npuntería, que acierta latas vacías a 30 metros de\ndistancia.',
			'Su agilidad no tiene parangón. De hecho, es capaz\nde escalar una torre de más de 600 metros en tan\nsolo un minuto.',
			'Puede lanzar piedras envueltas en burbujas con tal puntería\nque acierta latas vacías a 30 metros de distancia.',
			'Su agilidad no tiene parangón. De hecho, es capaz de escalar\nuna torre de más de 600 metros en tan solo un minuto.',
		],
		[Language.It]: [
			'Lancia dei sassi racchiusi in bolle di schiuma.\nÈ talmente preciso da riuscire a colpire una lattina\nvuota a 30 m di distanza.',
			'Grazie alla sua straordinaria agilità, è in grado di\nscalare una torre alta più di 600 m in meno\ndi un minuto.',
			'Lancia dei sassi racchiusi in bolle di schiuma. È talmente\npreciso da riuscire a colpire una lattina vuota a 30 m\ndi distanza.',
			'Grazie alla sua straordinaria agilità, è in grado di scalare una\ntorre alta più di 600 m in meno di un minuto.',
		],
		[Language.En]: [
			'It can throw bubble-covered pebbles with precise\ncontrol, hitting empty cans up to a hundred feet away.',
			'Its swiftness is unparalleled.\nIt can scale a tower of more\nthan 2,000 feet in a minute’s time.',
		],
		[Language.Ja]: [
			'泡で　包んだ　小石を　投げる\n技を　使う。３０メートル　先の\n空き缶に　当てる　コントロール。',
			'身軽さは　だれにも　負けない。\n６００メートルを　超える　タワーの\n天辺まで　１分で　登りきる。',
		],
	},
	[
		[
			Variety.Frogadier,
			142,
			6,
			109,
			[Type.Water],
			{
				frontDefault: '954ac983.png',
				frontShiny: '6b85e7a6.png',
			},
			{
				[Stat.Hp]: {baseStat: 54},
				[Stat.Attack]: {baseStat: 63},
				[Stat.Defense]: {baseStat: 52},
				[Stat.SpecialAttack]: {baseStat: 83},
				[Stat.SpecialDefense]: {baseStat: 56},
				[Stat.Speed]: {baseStat: 97, effort: 2},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IcePunch,
					Move.LowKick,
					Move.IcyWind,
					Move.WaterPulse,
					Move.GunkShot,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.TakeDown,
					Move.HydroPump,
					Move.Swift,
					Move.MudSlap,
					Move.Spikes,
					Move.Endure,
					Move.FalseSwipe,
					Move.HelpingHand,
					Move.MudShot,
					Move.ToxicSpikes,
					Move.Liquidation,
					Move.TeraBlast,
					Move.Snowscape,
					Move.Trailblaze,
					Move.ChillingWater,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					1,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					56,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Dig,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Acrobatics,
					Move.WaterPledge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Counter,
					Move.Spikes,
					Move.ToxicSpikes,
					Move.Switcheroo,
					Move.Retaliate,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					50,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Fling,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Round,
					23,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.IcePunch,
					Move.LowKick,
					Move.IcyWind,
					Move.WaterPulse,
					Move.GunkShot,
					Move.WaterPledge,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					56,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Acrobatics,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.DarkPulse,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Confide,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					50,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					19,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					40,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Spite,
					Move.RolePlay,
					Move.Snatch,
					Move.Bounce,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					45,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Fling,
					28,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					33,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Round,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
					Move.Bubble,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					56,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.DarkPulse,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Acrobatics,
					Move.WorkUp,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					50,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Fling,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					33,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Round,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.WaterPledge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.IcePunch,
					Move.LowKick,
					Move.Snore,
					Move.Spite,
					Move.IcyWind,
					Move.RolePlay,
					Move.Snatch,
					Move.Bounce,
					Move.WaterPulse,
					Move.GunkShot,
					Move.WaterPledge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.RockSmash,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					55,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.SecretPower,
					Move.Dive,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.DarkPulse,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Acrobatics,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					44,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Fling,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					33,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Round,
					23,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Strength,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.RockSmash,
					Move.Facade,
					Move.Taunt,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.DarkPulse,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Acrobatics,
					Move.Confide,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Fling,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Round,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Tutor,
					Move.WaterPledge,
				),
			].flat(),
			[
				{
					ability: Ability.Torrent,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Protean,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Frogadier,
					PokemonFormBits.Default,
					{
						frontDefault: '954ac983.png',
						frontShiny: '6b85e7a6.png',
					},
					[Type.Water],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Greninja,
	70,
	45,
	Color.Blue,
	[EggGroup.Water1],
	1,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.MediumSlow,
	Shape.Humanoid,
	{
		[Language.JaHrkt]: ['ゲッコウガ'],
		[Language.Roomaji]: ['Gekkouga'],
		[Language.Ko]: ['개굴닌자'],
		[Language.ZhHant]: ['甲賀忍蛙'],
		[Language.Fr]: ['Amphinobi'],
		[Language.De]: ['Quajutsu'],
		[Language.Es]: ['Greninja'],
		[Language.It]: ['Greninja'],
		[Language.En]: ['Greninja'],
		[Language.Ja]: ['ゲッコウガ'],
		[Language.ZhHans]: ['甲贺忍蛙'],
	},
	{
		[Language.JaHrkt]: ['しのびポケモン'],
		[Language.Ko]: ['시노비포켓몬'],
		[Language.ZhHant]: ['忍者寶可夢'],
		[Language.Fr]: ['Pokémon Ninja'],
		[Language.De]: ['Ninja'],
		[Language.Es]: ['Pokémon Ninja'],
		[Language.It]: ['Pokémon Ninja'],
		[Language.En]: ['Ninja Pokémon'],
		[Language.Ja]: ['しのびポケモン'],
		[Language.ZhHans]: ['忍者宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'みずを　あっしゅくして　しゅりけんを\nつくりだす。こうそくかいてんさせて\nとばすと　きんぞくも　まっぷたつ。',
			'にんじゃのように　しんしゅつきぼつ。\nすばやい　うごきで　ほんろうしつつ\nみずの　しゅりけんで　きりさく。',
		],
		[Language.Ko]: [
			'물을 압축시켜 수리검을\n만들어 낸다. 고속으로 회전시키며\n던지면 금속도 두 동강이 난다.',
			'닌자처럼 신출귀몰하다.\n재빠른 움직임으로 상대를 농락하면서\n물의 수리검으로 벤다.',
		],
		[Language.Fr]: [
			'Il transforme des jets d’eau sous pression\nen redoutables shuriken. Une fois lancés, ils tournent\nsi vite qu’ils peuvent même couper le métal.',
			'Aussi insaisissable qu’un ninja, il se joue de\nses ennemis grâce à sa célérité, et les tranche\nde ses Sheauriken.',
			'Il transforme des jets d’eau sous pression en redoutables\nshuriken. Une fois lancés, ils tournent si vite qu’ils peuvent\nmême couper le métal.',
			'Aussi insaisissable qu’un ninja, il se joue de ses ennemis\ngrâce à sa célérité, et les tranche de ses Sheauriken.',
		],
		[Language.De]: [
			'Es stellt Wurfsterne aus komprimiertem Wasser\nher, die durch ihre hohe Drehgeschwindigkeit\nbeim Werfen sogar Metall durchtrennen.',
			'Kaum hat man es erspäht, verschwindet es auch schon\nwieder. Mit der Agilität eines Ninjas verwirrt es seine\nGegner, um sie dann mit Wasser-Shuriken anzugreifen.',
			'Es stellt Wurfsterne aus komprimiertem Wasser her, die durch\nihre hohe Drehgeschwindigkeit beim Werfen sogar Metall\ndurchtrennen.',
			'Kaum hat man es erspäht, verschwindet es auch schon wieder.\nMit der Agilität eines Ninjas verwirrt es seine Gegner, um sie\ndann mit Wasser-Shuriken anzugreifen.',
		],
		[Language.Es]: [
			'Comprime el agua y crea estrellas ninja con las que\nataca al enemigo. Cuando las hace girar a gran\nvelocidad cortan en dos hasta el metal.',
			'Aparece y desaparece de improvisto, cual ninja. Marea\nal oponente con su soberbia agilidad y lo hace trizas\ncon sus Shuriken de Agua.',
			'Comprime el agua y crea estrellas ninja con las que ataca al\nenemigo. Cuando las hace girar a gran velocidad cortan en\ndos hasta el metal.',
			'Aparece y desaparece de improvisto, cual ninja. Marea al\noponente con su soberbia agilidad y lo hace trizas con sus\nShuriken de Agua.',
		],
		[Language.It]: [
			'Crea lame d’acqua micidiali che ruotano\nad alta velocità e, se lanciate, possono perforare\nil metallo.',
			'Agile e sfuggente come un ninja, si fa beffe dei nemici\ngrazie alla sua velocità e li bersaglia di shuriken\nd’acqua.',
			'Crea lame d’acqua micidiali che ruotano ad alta velocità e,\nse lanciate, possono perforare il metallo.',
			'Agile e sfuggente come un ninja, si fa beffe dei nemici grazie\nalla sua velocità e li bersaglia di shuriken d’acqua.',
		],
		[Language.En]: [
			'It creates throwing stars out of compressed water.\nWhen it spins them and throws them at high speed,\nthese stars can split metal in two.',
			'It appears and vanishes with a ninja’s grace.\nIt toys with its enemies using swift movements, while\nslicing them with throwing stars of sharpest water.',
		],
		[Language.Ja]: [
			'水を　圧縮して　手裏剣を　作り出す。\n高速回転させて　飛ばすと\n金属も　真っ二つ。',
			'忍者のように　神出鬼没。\n素早い　動きで　翻弄しつつ\n水の　手裏剣で　切り裂く。',
		],
	},
	[
		[
			Variety.Greninja,
			239,
			15,
			400,
			[Type.Water, Type.Dark],
			{
				frontDefault: 'b6e0cacf.png',
				frontShiny: '80af1622.png',
				backDefault: '5dc10e8b.png',
				backShiny: 'e199d3c8.png',
			},
			{
				[Stat.Hp]: {baseStat: 72},
				[Stat.Attack]: {baseStat: 95},
				[Stat.Defense]: {baseStat: 67},
				[Stat.SpecialAttack]: {baseStat: 103},
				[Stat.SpecialDefense]: {baseStat: 71},
				[Stat.Speed]: {baseStat: 122, effort: 3},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
					Move.RolePlay,
					Move.NightSlash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IcePunch,
					Move.LowKick,
					Move.IcyWind,
					Move.WaterPulse,
					Move.GunkShot,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.TakeDown,
					Move.HydroPump,
					Move.Haze,
					Move.Swift,
					Move.MudSlap,
					Move.Spikes,
					Move.Endure,
					Move.FalseSwipe,
					Move.HelpingHand,
					Move.BrickBreak,
					Move.WeatherBall,
					Move.MudShot,
					Move.ToxicSpikes,
					Move.SludgeWave,
					Move.LowSweep,
					Move.Liquidation,
					Move.TeraBlast,
					Move.Snowscape,
					Move.Trailblaze,
					Move.ChillingWater,
					Move.UpperHand,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					1,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					68,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Dig,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.HydroCannon,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Acrobatics,
					Move.WaterPledge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Counter,
					Move.Spikes,
					Move.ToxicSpikes,
					Move.Switcheroo,
					Move.Retaliate,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.QuickAttack,
					Move.Haze,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					56,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Spikes,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					49,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterShuriken,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
					Move.QuickAttack,
					Move.Haze,
					Move.RolePlay,
					Move.NightSlash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.IcePunch,
					Move.LowKick,
					Move.IcyWind,
					Move.HydroCannon,
					Move.WaterPulse,
					Move.GunkShot,
					Move.WaterPledge,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					68,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Acrobatics,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					56,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					70,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bubble,
					Move.WaterShuriken,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					42,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Spite,
					Move.RolePlay,
					Move.Snatch,
					Move.Bounce,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					33,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Spikes,
					28,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					49,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					77,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					23,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.WorkUp,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MatBlock,
					1,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterShuriken,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
					Move.QuickAttack,
					Move.Haze,
					Move.Bubble,
					Move.RolePlay,
					Move.NightSlash,
					Move.MatBlock,
					Move.WaterShuriken,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					68,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Acrobatics,
					Move.WorkUp,
					Move.Confide,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					56,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					33,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Spikes,
					28,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HydroCannon,
					Move.WaterPledge,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					77,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterShuriken,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
					Move.RolePlay,
					Move.NightSlash,
					Move.MatBlock,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.IcePunch,
					Move.LowKick,
					Move.Snore,
					Move.Spite,
					Move.IcyWind,
					Move.RolePlay,
					Move.Snatch,
					Move.HydroCannon,
					Move.Bounce,
					Move.WaterPulse,
					Move.GunkShot,
					Move.WaterPledge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.RockSmash,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					60,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.SecretPower,
					Move.Dive,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Acrobatics,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					52,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					56,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					43,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					33,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Spikes,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					49,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					70,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WaterShuriken,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WaterShuriken,
					75,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
					Move.RolePlay,
					Move.NightSlash,
					Move.MatBlock,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Strength,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.RockSmash,
					Move.Facade,
					Move.Taunt,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Acrobatics,
					Move.Confide,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					60,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					52,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					56,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Spikes,
					28,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HydroCannon,
					Move.WaterPledge,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					70,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WaterShuriken,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WaterShuriken,
					75,
				),
			].flat(),
			[
				{
					ability: Ability.Torrent,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Protean,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Greninja,
					PokemonFormBits.Default,
					{
						frontDefault: 'b6e0cacf.png',
						frontShiny: '80af1622.png',
						backDefault: '5dc10e8b.png',
						backShiny: 'e199d3c8.png',
					},
					[Type.Water, Type.Dark],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
		[
			Variety.GreninjaBattleBond,
			239,
			15,
			400,
			[Type.Water, Type.Dark],
			{
				frontDefault: '77aec504.png',
				frontShiny: '9dfa5d34.png',
				backDefault: '58c53139.png',
				backShiny: '6593328a.png',
			},
			{
				[Stat.Hp]: {baseStat: 72},
				[Stat.Attack]: {baseStat: 95},
				[Stat.Defense]: {baseStat: 67},
				[Stat.SpecialAttack]: {baseStat: 103},
				[Stat.SpecialDefense]: {baseStat: 71},
				[Stat.Speed]: {baseStat: 122, effort: 3},
			},
			{},
			[
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
					Move.QuickAttack,
					Move.Haze,
					Move.Bubble,
					Move.RolePlay,
					Move.NightSlash,
					Move.MatBlock,
					Move.WaterShuriken,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.IcePunch,
					Move.LowKick,
					Move.Snore,
					Move.Spite,
					Move.IcyWind,
					Move.RolePlay,
					Move.Snatch,
					Move.Bounce,
					Move.WaterPulse,
					Move.GunkShot,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					68,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Acrobatics,
					Move.WorkUp,
					Move.Confide,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					56,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					33,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Spikes,
					28,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HydroCannon,
					Move.WaterPledge,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					77,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterShuriken,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
					Move.QuickAttack,
					Move.Haze,
					Move.Bubble,
					Move.RolePlay,
					Move.NightSlash,
					Move.MatBlock,
					Move.WaterShuriken,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					68,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Acrobatics,
					Move.WorkUp,
					Move.Confide,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					56,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					33,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Spikes,
					28,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HydroCannon,
					Move.WaterPledge,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					77,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterShuriken,
				),
			].flat(),
			[
				{
					ability: Ability.BattleBond,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.GreninjaBattleBond,
					PokemonFormBits.Default,
					{
						frontDefault: '77aec504.png',
						frontShiny: '9dfa5d34.png',
						backDefault: '58c53139.png',
						backShiny: '6593328a.png',
					},
					[Type.Water, Type.Dark],
					VersionGroup.SunMoon,
					{
						[Language.Fr]: ['Amphinobi Synergie'],
						[Language.De]: ['Battle Bond Quajutsu'],
						[Language.En]: ['Battle Bond Greninja'],
					},
					{
						[Language.De]: ['Freundschaftsaktform'],
					},
					'battle-bond',
				],
			],
		],
		[
			Variety.GreninjaAsh,
			288,
			15,
			400,
			[Type.Water, Type.Dark],
			{
				frontDefault: 'b177430d.png',
				frontShiny: '18054d80.png',
			},
			{
				[Stat.Hp]: {baseStat: 72},
				[Stat.Attack]: {baseStat: 145},
				[Stat.Defense]: {baseStat: 67},
				[Stat.SpecialAttack]: {baseStat: 153},
				[Stat.SpecialDefense]: {baseStat: 71},
				[Stat.Speed]: {baseStat: 132, effort: 3},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
					Move.QuickAttack,
					Move.Haze,
					Move.RolePlay,
					Move.NightSlash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IcePunch,
					Move.LowKick,
					Move.IcyWind,
					Move.WaterPulse,
					Move.GunkShot,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.TakeDown,
					Move.HydroPump,
					Move.Dig,
					Move.Swift,
					Move.MudSlap,
					Move.Spikes,
					Move.Endure,
					Move.FalseSwipe,
					Move.HelpingHand,
					Move.BrickBreak,
					Move.MudShot,
					Move.ToxicSpikes,
					Move.LowSweep,
					Move.Liquidation,
					Move.TeraBlast,
					Move.Snowscape,
					Move.Trailblaze,
					Move.ChillingWater,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					1,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					68,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.HydroCannon,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.WaterPledge,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					56,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Spikes,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					49,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					33,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterShuriken,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
					Move.QuickAttack,
					Move.Haze,
					Move.RolePlay,
					Move.NightSlash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.IcePunch,
					Move.LowKick,
					Move.Snore,
					Move.Spite,
					Move.IcyWind,
					Move.RolePlay,
					Move.Snatch,
					Move.HydroCannon,
					Move.Bounce,
					Move.WaterPulse,
					Move.GunkShot,
					Move.WaterPledge,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					68,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.GrassKnot,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SmackDown,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Acrobatics,
					Move.WorkUp,
					Move.Confide,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					56,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					70,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bubble,
					Move.MatBlock,
					Move.WaterShuriken,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					33,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Spikes,
					28,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					49,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					77,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					23,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterShuriken,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.Growl,
					Move.QuickAttack,
					Move.Haze,
					Move.Bubble,
					Move.RolePlay,
					Move.NightSlash,
					Move.MatBlock,
					Move.WaterShuriken,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					68,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.RockTomb,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.EchoedVoice,
					Move.Scald,
					Move.Acrobatics,
					Move.WorkUp,
					Move.Confide,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					56,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Smokescreen,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Lick,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Substitute,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					33,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Spikes,
					28,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HydroCannon,
					Move.WaterPledge,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					77,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterShuriken,
				),
			].flat(),
			[
				{
					ability: Ability.BattleBond,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.GreninjaAsh,
					PokemonFormBits.BattleOnly | PokemonFormBits.Default,
					{
						frontDefault: 'b177430d.png',
						frontShiny: '18054d80.png',
					},
					[Type.Water, Type.Dark],
					VersionGroup.SunMoon,
					{
						[Language.Fr]: ['Amphinobi Forme Sacha'],
						[Language.De]: ['Ash Quajutsu'],
						[Language.En]: ["Ash's Greninja"],
					},
					{
						[Language.JaHrkt]: ['サトシゲッコウガ'],
						[Language.Ko]: ['지우개굴닌자'],
						[Language.ZhHant]: ['小智版甲賀忍蛙'],
						[Language.Fr]: ['Forme Sacha'],
						[Language.De]: ['Ash-Form'],
						[Language.Es]: ['Forma Ash'],
						[Language.It]: ['Forma Ash'],
						[Language.En]: ['Ash-Greninja'],
						[Language.Ja]: ['サトシゲッコウガ'],
						[Language.ZhHans]: ['小智版甲贺忍蛙'],
					},
					'ash',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Bunnelby,
	50,
	255,
	Color.Brown,
	[EggGroup.Ground],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	15,
	GrowthRate.Medium,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['ホルビー'],
		[Language.Roomaji]: ['Horubee'],
		[Language.Ko]: ['파르빗'],
		[Language.ZhHant]: ['掘掘兔'],
		[Language.Fr]: ['Sapereau'],
		[Language.De]: ['Scoppel'],
		[Language.Es]: ['Bunnelby'],
		[Language.It]: ['Bunnelby'],
		[Language.En]: ['Bunnelby'],
		[Language.Ja]: ['ホルビー'],
		[Language.ZhHans]: ['掘掘兔'],
	},
	{
		[Language.JaHrkt]: ['あなほりポケモン'],
		[Language.Ko]: ['땅구멍파기포켓몬'],
		[Language.ZhHant]: ['挖洞寶可夢'],
		[Language.Fr]: ['Pokémon Fouisseur'],
		[Language.De]: ['Baugräber-Pokémon'],
		[Language.Es]: ['Pokémon Excavador'],
		[Language.It]: ['Pokémon Scavabuche'],
		[Language.En]: ['Digging Pokémon'],
		[Language.Ja]: ['あなほりポケモン'],
		[Language.ZhHans]: ['挖洞宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'おおきな　みみで　じめんを　ほって\nすあなを　つくる。ひとばんじゅう\nやすまずに　ほりつづけられる。',
			'シャベルのような　みみを　もつ。\nあなほりで　きたえた　みみは　ふとい\nねっこを　たちきる　いりょくだ。',
			'みみで　あなを　ほるのが　とくい。\nちか１０メートルに　とどく　すあなを\nひとばんで　つくってしまう。',
			'きけんに　びんかん。　アーマーガアの\nはおとを　ききとると　あっというまに\nあなを　ほって　じめんに　もぐる。',
		],
		[Language.Ko]: [
			'커다란 귀로 땅을 파고\n보금자리를 만든다. 하룻밤 동안\n쉬지 않고 계속 팔 수 있다.',
			'삽과 같은 귀를 가졌다.\n구멍을 파는 데 단련된 귀는 두꺼운\n뿌리를 자를 정도의 위력이다.',
			'귀로 구멍을 파는 것이 특기다.\n지하 10m에 달하는 굴을\n하룻밤 만에 만들어버린다.',
			'위험에 민감하다. 아머까오의\n날갯소리를 들으면 눈 깜짝할 사이에\n구멍을 파고 땅으로 숨어든다.',
		],
		[Language.Fr]: [
			'Ses larges oreilles lui permettent de creuser\ndes terriers. Il est capable de forer sans s’arrêter\npendant toute une nuit.',
			'Il est doté d’oreilles ressemblant à des pelles.\nÀ force de creuser des galeries, leur puissance est\ntelle qu’elles peuvent trancher de grosses racines.',
			'Ses larges oreilles lui permettent de creuser des terriers.\nIl est capable de forer sans s’arrêter pendant toute une nuit.',
			'Il est doté d’oreilles ressemblant à des pelles. À force de\ncreuser des galeries, leur puissance est telle qu’elles peuvent\ntrancher de grosses racines.',
			'Il est très doué pour creuser avec ses oreilles.\nIl peut forer un terrier atteignant dix mètres\nde profondeur en une nuit.',
			'Il est sensible au danger. Lorsqu’il entend\nle battement d’ailes de Corvaillus, il creuse\nprestement un terrier et s’y cache.',
		],
		[Language.De]: [
			'Mit seinen großen Ohren schaufelt es sich einen Bau.\nEs kann die ganze Nacht ohne Pause durchschaufeln.',
			'Es besitzt schaufelähnliche Ohren, die durch ständiges\nGraben so kräftig werden, dass sie auch dicke Wurzeln\ndurchtrennen können.',
			'Es besitzt schaufelähnliche Ohren, die durch ständiges Graben\nso kräftig werden, dass sie auch dicke Wurzeln durchtrennen\nkönnen.',
			'Mit den Ohren schaufelt es Löcher. Es braucht nur\neine Nacht, um einen 10 m tiefen Bau zu graben.',
			'Es ist permanent in Alarmbereitschaft. Sobald es\ndie Flügel eines Krarmors rascheln hört, gräbt es\nein Loch und verschwindet im Boden.',
		],
		[Language.Es]: [
			'Usa sus grandes orejas para excavar en la tierra y así\ncrear madrigueras. Puede pasarse una noche entera\ncavando sin parar.',
			'Tiene unas orejas tan grandes que parecen palas.\nLas ha fortalecido tanto usándolas para excavar que\nson capaces de arrancar raíces bien gruesas.',
			'Usa sus grandes orejas para excavar en la tierra y así crear\nmadrigueras. Puede pasarse una noche entera cavando sin\nparar.',
			'Tiene unas orejas tan grandes que parecen palas.\nLas ha fortalecido tanto usándolas para excavar que son\ncapaces de arrancar raíces bien gruesas.',
			'Usa hábilmente las orejas para hacer hoyos. Es\ncapaz de excavar una madriguera a 10 m bajo\ntierra en una sola noche.',
			'Está en alerta permanente. En cuanto oye el batir\nde alas de un Corviknight, cava un agujero y se\noculta bajo tierra.',
		],
		[Language.It]: [
			'Scava tane nel terreno grazie alle grandi orecchie.\nPuò andare avanti senza fermarsi per tutta la notte.',
			'Usa le orecchie come pale per scavare buche\nnel terreno. Queste propaggini sono talmente potenti\nda permettergli di strappare via enormi radici.',
			'Usa le orecchie come pale per scavare buche nel terreno.\nQueste propaggini sono talmente potenti da permettergli di\nstrappare via enormi radici.',
			'Usa abilmente le orecchie per scavare buche\nnel terreno. Gli basta una notte per scavare\nuna tana profonda 10 m.',
			'È sempre all’erta contro i pericoli. Se percepisce\nil battito d’ali di Corviknight scava una buca\ne si nasconde sotto terra.',
		],
		[Language.En]: [
			'They use their large ears to dig burrows.\nThey will dig the whole night through.',
			'It has ears like shovels. Digging holes\nstrengthens its ears so much that they\ncan sever thick roots effortlessly.',
			'It excels at digging holes. Using its ears, it can\ndig a nest 33 feet deep in one night.',
			'It’s very sensitive to danger. The sound of\nCorviknight’s flapping will have Bunnelby\ndigging a hole to hide underground in moments.',
		],
		[Language.Ja]: [
			'大きな　耳で　地面を　掘って\n巣穴を　作る。\n一晩中　休まずに　掘り続けられる。',
			'シャベルのような　耳を　持つ。\n穴掘りで　鍛えた　耳は\n太い　根っこを　断ち切る　威力だ。',
			'耳で　穴を　掘るのが　得意。\n地下１０メートルに　とどく　巣穴を\n一晩で　つくってしまう。',
			'危険に　敏感。　アーマーガアの\n羽音を　聴きとると　あっという間に\n穴を　掘って　地面に　潜る。',
		],
		[Language.ZhHant]: [
			'擅長用耳朵挖洞。\n只需一個晚上就能挖出\n深至地下１０公尺的巢穴。',
			'對危險很敏感。只要聽到\n鋼鎧鴉拍打翅膀的聲音，\n就會馬上挖洞鑽進地下藏身。',
		],
		[Language.ZhHans]: [
			'擅长用耳朵挖洞。\n只需一个晚上就能挖出\n深至地下１０米的巢穴。',
			'对危险很敏感。只要听到\n钢铠鸦拍打翅膀的声音，\n就会马上挖洞钻进地下藏身。',
		],
	},
	[
		[
			Variety.Bunnelby,
			47,
			4,
			50,
			[Type.Normal],
			{
				frontDefault: '97bc4d47.png',
				frontShiny: '2de0700b.png',
				backDefault: 'd37f6b87.png',
				backShiny: 'b2d1ca32.png',
			},
			{
				[Stat.Hp]: {baseStat: 38},
				[Stat.Attack]: {baseStat: 36},
				[Stat.Defense]: {baseStat: 38},
				[Stat.SpecialAttack]: {baseStat: 32},
				[Stat.SpecialDefense]: {baseStat: 36},
				[Stat.Speed]: {baseStat: 57, effort: 1},
			},
			{},
			[
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					33,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Agility,
					Move.Endure,
					Move.MudShot,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DoubleKick,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					3,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Leer,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.Earthquake,
					Move.Dig,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Spikes,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.BulkUp,
					Move.UTurn,
					Move.Payback,
					Move.Fling,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.Round,
					Move.Bulldoze,
					Move.WildCharge,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					9,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DefenseCurl,
					Move.Rollout,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					39,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronTail,
					Move.Bounce,
					Move.IronHead,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					27,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LaserFocus,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleSlap,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleKick,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Agility,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Leer,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.BulkUp,
					Move.UTurn,
					Move.Payback,
					Move.Fling,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.Round,
					Move.Bulldoze,
					Move.WorkUp,
					Move.WildCharge,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					33,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.NaturePower,
					Move.SmackDown,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					7,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DefenseCurl,
					Move.Spikes,
					Move.Rollout,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					42,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.SuperFang,
					Move.Recycle,
					Move.Endeavor,
					Move.LastResort,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.Bounce,
					Move.IronHead,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					29,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Facade,
					47,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleSlap,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleKick,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
					Move.Agility,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.Facade,
					Move.NaturePower,
					Move.BrickBreak,
					Move.RockTomb,
					Move.BulkUp,
					Move.UTurn,
					Move.Payback,
					Move.Fling,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.Bulldoze,
					Move.WorkUp,
					Move.WildCharge,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					33,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					7,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DefenseCurl,
					Move.Spikes,
					Move.Rollout,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					29,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Facade,
					47,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DoubleSlap,
					10,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.RockSmash,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DoubleKick,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
					Move.Agility,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.Facade,
					Move.NaturePower,
					Move.BrickBreak,
					Move.SecretPower,
					Move.RockTomb,
					Move.BulkUp,
					Move.UTurn,
					Move.Payback,
					Move.Fling,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					49,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					33,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					7,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DefenseCurl,
					Move.Spikes,
					Move.Rollout,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					42,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.SuperFang,
					Move.Snore,
					Move.IronTail,
					Move.Recycle,
					Move.Endeavor,
					Move.Bounce,
					Move.LastResort,
					Move.IronHead,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					29,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Facade,
					47,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DoubleSlap,
					10,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Surf,
					Move.Strength,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RockSmash,
					Move.Torment,
					Move.Facade,
					Move.NaturePower,
					Move.BrickBreak,
					Move.RockTomb,
					Move.BulkUp,
					Move.UTurn,
					Move.Payback,
					Move.Fling,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Confide,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DoubleKick,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
					Move.Agility,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					7,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DefenseCurl,
					Move.Spikes,
					Move.Rollout,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					29,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Facade,
					47,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					18,
				),
			].flat(),
			[
				{
					ability: Ability.Pickup,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.CheekPouch,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.HugePower,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Bunnelby,
					PokemonFormBits.Default,
					{
						frontDefault: '97bc4d47.png',
						frontShiny: '2de0700b.png',
						backDefault: 'd37f6b87.png',
						backShiny: 'b2d1ca32.png',
					},
					[Type.Normal],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Diggersby,
	50,
	127,
	Color.Brown,
	[EggGroup.Ground],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	15,
	GrowthRate.Medium,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['ホルード'],
		[Language.Roomaji]: ['Horudo'],
		[Language.Ko]: ['파르토'],
		[Language.ZhHant]: ['掘地兔'],
		[Language.Fr]: ['Excavarenne'],
		[Language.De]: ['Grebbit'],
		[Language.Es]: ['Diggersby'],
		[Language.It]: ['Diggersby'],
		[Language.En]: ['Diggersby'],
		[Language.Ja]: ['ホルード'],
		[Language.ZhHans]: ['掘地兔'],
	},
	{
		[Language.JaHrkt]: ['あなほりポケモン'],
		[Language.Ko]: ['땅구멍파기포켓몬'],
		[Language.ZhHant]: ['挖洞寶可夢'],
		[Language.Fr]: ['Pokémon Fouisseur'],
		[Language.De]: ['Baugräber-Pokémon'],
		[Language.Es]: ['Pokémon Excavador'],
		[Language.It]: ['Pokémon Scavabuche'],
		[Language.En]: ['Digging Pokémon'],
		[Language.Ja]: ['あなほりポケモン'],
		[Language.ZhHans]: ['挖洞宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'おおきな　みみは　１トンを　こえる\nいわを　らくに　もちあげる　パワー。\nこうじげんばで　だいかつやくする。',
			'ショベルカーなみの　パワーの　みみで\nかたい　がんばんも　コナゴナ。あなを\nほりおえると　ダラダラと　すごす。',
			'ショベルカーに　まけない　パワーで\nかたい　がんばんも　ほりすすむ。\nトンネルこうじで　だいかつやく。',
			'おなかの　たいもうは　ほおんせいに\nすぐれる。　むかしの　ひとは　ぬけた\nたいもうで　ぼうかんぎを　つくった。',
		],
		[Language.Ko]: [
			'커다란 귀에는 무게가 1톤을 넘는 바위를\n가뿐히 들어 올릴 만한 파워가 있다.\n공사 현장에서 대활약한다.',
			'굴착기에 버금가는 파워의 귀로\n단단한 암반도 산산조각 낸다.\n구멍을 다 파면 빈둥빈둥 지낸다.',
			'굴착기에 뒤지지 않는 파워로\n단단한 암반도 파고 들어간다.\n터널 공사에서 크게 활약한다.',
			'배의 털은 보온성이 뛰어나다.\n옛날 사람들은 파르토의 몸에서\n빠진 털로 방한복을 만들었다.',
		],
		[Language.Fr]: [
			'Ses grandes oreilles sont si musclées qu’il peut\nsoulever un rocher d’une tonne sans broncher.\nCe Pokémon est souvent utilisé sur les chantiers.',
			'Ses oreilles sont de véritables excavateurs, venant à\nbout des blocs de pierre les plus durs.\nAprès l’effort, il se repose en paressant.',
			'Ses grandes oreilles sont si musclées qu’il peut soulever\nun rocher d’une tonne sans broncher. Ce Pokémon est\nsouvent utilisé sur les chantiers.',
			'Ses oreilles sont de véritables excavateurs, venant à bout\ndes blocs de pierre les plus durs. Après l’effort, il se repose\nen paressant.',
			'Aussi puissant qu’une pelleteuse, il peut venir\nà bout de la roche la plus dure. On fait souvent\nappel à lui pour forer des tunnels.',
			'La fourrure de son ventre est un excellent isolant\nthermique. Jadis, on fabriquait des vêtements\nchauds en se servant de sa mue.',
		],
		[Language.De]: [
			'Seine großen Ohren besitzen die Kraft, selbst Felsen,\ndie 1 t schwer sind, mühelos hochzuheben.\nEs wird daher oft auf Baustellen eingesetzt.',
			'Mit Ohren so mächtig wie ein Bagger kann es selbst\ndas härteste Gestein zertrümmern. Ist es fertig mit\nGraben, lümmelt es herum.',
			'Seine großen Ohren besitzen die Kraft, selbst Felsen,\ndie 1 t schwer sind, mühelos hochzuheben. Es wird daher\noft auf Baustellen eingesetzt.',
			'Mit Ohren so mächtig wie ein Bagger kann es selbst das\nhärteste Gestein zertrümmern. Ist es fertig mit Graben,\nlümmelt es herum.',
			'Seine Stärke gleicht der eines Baggers, sodass es\nsich durch harte Gesteinsschichten graben kann.\nEs leistet großartige Arbeit beim Tunnelbau.',
			'Das Fell an seinem Bauch hält es schön warm.\nFrüher haben die Menschen daraus Kleidung\ngefertigt, die sie vor Kälte schützte.',
		],
		[Language.Es]: [
			'Sus grandes orejas tienen tal fuerza que con ellas\npuede levantar con facilidad rocas de más de una\ntonelada. Es de una ayuda inestimable en las obras.',
			'Sus orejas, tan poderosas como una excavadora,\npueden hacer añicos hasta la roca más sólida.\nCuando termina de cavar, se toma un respiro.',
			'Sus grandes orejas tienen tal fuerza que con ellas puede\nlevantar con facilidad rocas de más de una tonelada. Es de\nuna ayuda inestimable en las obras.',
			'Sus orejas, tan poderosas como una excavadora, pueden\nhacer añicos hasta la roca más sólida. Cuando termina de\ncavar, se toma un respiro.',
			'Puede horadar incluso el duro sustrato rocoso\ncon la fuerza de una excavadora, por lo que su\nayuda resulta inestimable para construir túneles.',
			'El pelaje de su abdomen es un aislante térmico\nexcelente, tanto que antaño se usaba el que\nmudaba para confeccionar prendas de abrigo.',
		],
		[Language.It]: [
			'Con le sue grandi orecchie può sollevare facilmente\nmassi da più di una tonnellata. Può essere di grande\naiuto nei cantieri edili.',
			'Le orecchie potenti quanto una scavatrice\ngli permettono di sbriciolare anche rocce durissime.\nQuando ha finito di scavare, si rilassa beatamente.',
			'Con le sue grandi orecchie può sollevare facilmente massi\nda più di una tonnellata. Può essere di grande aiuto nei\ncantieri edili.',
			'Le orecchie potenti quanto una scavatrice gli permettono di\nsbriciolare anche rocce durissime. Quando ha finito di scavare,\nsi rilassa beatamente.',
			'Riesce a scavare strati rocciosi durissimi grazie\nalla sua forza pari a quella di una scavatrice.\nÈ di grande aiuto nei lavori di scavo dei tunnel.',
			'La pelliccia sul suo addome lo mantiene caldo.\nGli antichi confezionavano abiti termici resistenti\nal freddo con il pelo raccolto dopo la sua muta.',
		],
		[Language.En]: [
			'With their powerful ears, they can heft\nboulders of a ton or more with ease.\nThey can be a big help at construction sites.',
			'As powerful as an excavator, its ears\ncan reduce dense bedrock to rubble.\nWhen it’s finished digging, it lounges lazily.',
			'With power equal to an excavator, it can dig\nthrough dense bedrock. It’s a huge help during\ntunnel construction.',
			'The fur on its belly retains heat exceptionally\nwell. People used to make heavy winter clothing\nfrom fur shed by this Pokémon.',
		],
		[Language.Ja]: [
			'大きな　耳は　１トンを　超える 岩を\n楽に　持ち上げる　パワー。\n工事現場で　大活躍する。',
			'ショベルカー並みの　パワーの　耳で\n硬い　岩盤も　コナゴナ。穴を\n掘り終えると　ダラダラと　過ごす。',
			'ショベルカーに　負けない　パワーで\n硬い　岩盤も　掘り進む。\nトンネル工事で　大活躍。',
			'お腹の　体毛は　保温性に\n優れる。　昔の　人は　抜けた\n体毛で　防寒着を　つくった。',
		],
		[Language.ZhHant]: [
			'力量不亞於挖掘機，\n連堅硬的岩盤也能挖掘。\n在隧道建設工程中十分活躍。',
			'肚子上的體毛保溫性能優秀。\n在過去，人們會用牠掉落的毛\n來製作保暖服裝。',
		],
		[Language.ZhHans]: [
			'力量不亚于挖掘机，\n连坚硬的岩盘也能挖掘。\n在隧道建设工程中十分活跃。',
			'肚子上的体毛保温性能优秀。\n在过去，人们会用它的落毛\n来制作保暖服装。',
		],
	},
	[
		[
			Variety.Diggersby,
			148,
			10,
			424,
			[Type.Normal, Type.Ground],
			{
				frontDefault: '8dfe7758.png',
				frontShiny: 'a940df4c.png',
			},
			{
				[Stat.Hp]: {baseStat: 85, effort: 2},
				[Stat.Attack]: {baseStat: 56},
				[Stat.Defense]: {baseStat: 77},
				[Stat.SpecialAttack]: {baseStat: 50},
				[Stat.SpecialDefense]: {baseStat: 77},
				[Stat.Speed]: {baseStat: 78},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.MegaPunch,
					Move.MegaKick,
					Move.BodySlam,
					Move.Agility,
					Move.Spikes,
					Move.Endure,
					Move.SandTomb,
					Move.MudShot,
					Move.HighHorsepower,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.FirePunch,
					Move.IcePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.Snore,
					Move.IronTail,
					Move.Uproar,
					Move.Superpower,
					Move.Bounce,
					Move.EarthPower,
					Move.GunkShot,
					Move.IronHead,
					Move.FoulPlay,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					43,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.BulkUp,
					Move.UTurn,
					Move.Payback,
					Move.Fling,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.Round,
					Move.Bulldoze,
					Move.WildCharge,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DoubleKick,
					18,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					38,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					48,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					9,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					53,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.MudSlap,
					Move.LaserFocus,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					33,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HammerArm,
					58,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					23,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.WorkUp,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.StompingTantrum,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.ScorchingSands,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleSlap,
					13,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.IcePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.Snore,
					Move.IronTail,
					Move.Uproar,
					Move.Superpower,
					Move.Bounce,
					Move.EarthPower,
					Move.GunkShot,
					Move.IronHead,
					Move.FoulPlay,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Agility,
					Move.HammerArm,
					Move.Bulldoze,
					Move.Rototiller,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.BulkUp,
					Move.UTurn,
					Move.Payback,
					Move.Fling,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.Round,
					Move.Bulldoze,
					Move.WorkUp,
					Move.WildCharge,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleKick,
					21,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					37,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.NaturePower,
					Move.SmackDown,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					7,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					48,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.SuperFang,
					Move.FocusPunch,
					Move.Recycle,
					Move.KnockOff,
					Move.Endeavor,
					Move.Snatch,
					Move.GastroAcid,
					Move.LastResort,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Facade,
					54,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HammerArm,
					60,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 13,
					},

					Move.DoubleSlap,
					Move.MudSlap,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Tackle,
					Move.Leer,
					Move.Agility,
					Move.HammerArm,
					Move.Bulldoze,
					Move.Rototiller,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.Facade,
					Move.NaturePower,
					Move.BrickBreak,
					Move.RockTomb,
					Move.BulkUp,
					Move.UTurn,
					Move.Payback,
					Move.Fling,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.Bulldoze,
					Move.WorkUp,
					Move.WildCharge,
					Move.Confide,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleKick,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					57,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					37,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					7,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					32,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Facade,
					54,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HammerArm,
					60,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.IcePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.SuperFang,
					Move.Snore,
					Move.IronTail,
					Move.Uproar,
					Move.FocusPunch,
					Move.Superpower,
					Move.Recycle,
					Move.KnockOff,
					Move.Endeavor,
					Move.Snatch,
					Move.Bounce,
					Move.GastroAcid,
					Move.LastResort,
					Move.EarthPower,
					Move.GunkShot,
					Move.IronHead,
					Move.FoulPlay,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Tackle,
					Move.Leer,
					Move.Agility,
					Move.HammerArm,
					Move.Bulldoze,
					Move.Rototiller,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.Facade,
					Move.NaturePower,
					Move.BrickBreak,
					Move.SecretPower,
					Move.RockTomb,
					Move.BulkUp,
					Move.UTurn,
					Move.Payback,
					Move.Fling,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.RockSmash,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DoubleKick,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					57,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					37,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					7,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Facade,
					53,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HammerArm,
					60,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Tackle,
					Move.Leer,
					Move.Agility,
					Move.HammerArm,
					Move.Bulldoze,
					Move.Rototiller,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Cut,
					Move.Surf,
					Move.HyperBeam,
					Move.Strength,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RockSmash,
					Move.Torment,
					Move.Facade,
					Move.NaturePower,
					Move.BrickBreak,
					Move.RockTomb,
					Move.BulkUp,
					Move.UTurn,
					Move.Payback,
					Move.Fling,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.Round,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Confide,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DoubleKick,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					37,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					7,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Facade,
					53,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MudShot,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HammerArm,
					60,
				),
			].flat(),
			[
				{
					ability: Ability.Pickup,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.CheekPouch,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.HugePower,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Diggersby,
					PokemonFormBits.Default,
					{
						frontDefault: '8dfe7758.png',
						frontShiny: 'a940df4c.png',
					},
					[Type.Normal, Type.Ground],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Fletchling,
	50,
	255,
	Color.Red,
	[EggGroup.Flying],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	15,
	GrowthRate.MediumSlow,
	Shape.Wings,
	{
		[Language.JaHrkt]: ['ヤヤコマ'],
		[Language.Roomaji]: ['Yayakoma'],
		[Language.Ko]: ['화살꼬빈'],
		[Language.ZhHant]: ['小箭雀'],
		[Language.Fr]: ['Passerouge'],
		[Language.De]: ['Dartiri'],
		[Language.Es]: ['Fletchling'],
		[Language.It]: ['Fletchling'],
		[Language.En]: ['Fletchling'],
		[Language.Ja]: ['ヤヤコマ'],
		[Language.ZhHans]: ['小箭雀'],
	},
	{
		[Language.JaHrkt]: ['コマドリポケモン'],
		[Language.Ko]: ['울새포켓몬'],
		[Language.ZhHant]: ['知更鳥寶可夢'],
		[Language.Fr]: ['Pokémon Rougegorge'],
		[Language.De]: ['Rotkehlchen-Pokémon'],
		[Language.Es]: ['Pokémon Petirrojo'],
		[Language.It]: ['Pokémon Pettirosso'],
		[Language.En]: ['Tiny Robin Pokémon'],
		[Language.Ja]: ['コマドリポケモン'],
		[Language.ZhHans]: ['知更鸟宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'ひとなつっこい　せいかく。うつくしい\nさえずりと　おばねを　ふる　うごきで\nなかまに　あいずを　おくる。',
			'さえずる　こえは　うつくしいが\nなわばりに　はいった　あいては\nようしゃしない　あらあらしさだ。',
			'ひとなつっこいので　あつかいやすい\nポケモンだが　ひとたび　たたかいに\nなると　とても　あらあらしいぞ。',
			'こうふん　すると　たいおんが\n２ばいまで　あがり　たいないの\nホルモンが　かっぱつに　なるのだ。',
			'ひとなつっこい　ポケモンだけど\nむりに　さわると　からだを　いっきに\nはつねつさせるので　やけど　するぞ。',
			'からだは　いつでも　あたたかい。\nさむい　ちいきの　トレーナーは\nベッドで　いっしょに　ねるらしい。',
			'うつくしい　さえずりは　いかく。\nなわばりに　はいった　ものは\nようしゃなく　つつきまくる。',
			'こうふんすると　たいおんが\nグッと　あがる。　すでで　さわると\nヤケドすることも　あるほどだ。',
		],
		[Language.Ko]: [
			'사람을 잘 따르는 성격이다. 아름다운\n지저귐과 꽁지를 흔드는 움직임으로\n동료에게 신호를 보낸다.',
			'지저귀는 소리는 아름답지만\n영역에 들어온 상대를\n용서하지 않는 난폭한 성격이다.',
			'사람을 잘 따라서 다루기 쉬운\n포켓몬이지만 한번 싸움이\n붙으면 매우 거칠어진다.',
			'흥분하면 체온이\n2배까지 올라 체내의\n호르몬이 활발해진다.',
			'사람을 잘 따르는 포켓몬이지만,\n억지로 만지면 몸을 단숨에\n발열시켜 화상을 입는다.',
			'몸은 언제나 따뜻하다.\n추운 지역의 트레이너는\n침대에서 함께 잔다고 한다.',
			'아름답게 지저귀는 소리는 위협하고\n있다는 뜻이다. 영역에 들어온 자는\n용서 없이 콕콕 쪼아버린다.',
			'흥분하면 체온이 확 오른다.\n맨손으로 만지면\n화상을 입기도 할 정도다.',
		],
		[Language.Fr]: [
			'Peu farouche, il communique avec ses congénères\npar un doux gazouillis et par des signaux de la queue.',
			'Son chant est harmonieux, mais trompeur !\nLes ennemis qui pénètrent sur son territoire se\nretrouvent confrontés à un déluge de violence.',
			'C’est un Pokémon affectueux et très facile à\nélever, mais une fois en situation de combat,\nil devient un adversaire implacable.',
			'Quand il est tout excité, sa température peut\ndoubler et ses hormones bouillonnent.',
			'Bien qu’il soit affectueux, il peut brusquement\naugmenter sa température et infliger des\nbrûlures à ceux qui le touchent par surprise.',
			'Une agréable chaleur émane toujours de son\npetit corps. Dans les régions froides, il n’est\npas rare qu’il dorme dans le lit de son Dresseur.',
			'Son chant mélodieux est en fait une tentative\nd’intimidation. Il picore sans merci tout individu\nqui pénètre dans son territoire.',
			'Quand il est surexcité, sa température corporelle\naugmente d’un coup, à tel point qu’il est possible\nde se brûler en le touchant à mains nues.',
		],
		[Language.De]: [
			'Ein sehr zutrauliches Pokémon. Durch Zwitschern\nund Bewegen der Schwanzfedern sendet es Signale\nan seine Gefährten.',
			'Sein Zwitschern ist wunderschön, aber wenn Gegner\nsein Revier betreten, kennt es keine Gnade.',
			'Ein sehr zutrauliches Pokémon. Durch Zwitschern und\nBewegen der Schwanzfedern sendet es Signale an seine\nGefährten.',
			'Sein Zwitschern ist wunderschön, aber wenn Gegner sein\nRevier betreten, kennt es keine Gnade.',
			'Ein sehr zutrauliches und pflegeleichtes\nPokémon, das im Kampf jedoch erstaunlich\nwild und ungestüm agiert.',
			'Ist es aufgeregt, steigt seine Körpertemperatur\nauf das Doppelte an und seine Hormone\nspielen verrückt.',
			'Es ist eigentlich sehr zutraulich. Berührt man es\naber gegen seinen Willen, erhitzt es blitzartig\nseinen Körper, was zu Verbrennungen führt.',
			'Sein Körper ist immer warm. In kalten Gebieten\nschlafen Trainer deshalb oft in einem Bett\nmit ihm.',
			'Sein wunderschönes Zwitschern ist in Wirklichkeit\neine Warnung. Wer in sein Revier eindringt, wird\ngnadenlos von ihm gepickt.',
			'Ist es aufgeregt, steigt seine Körpertemperatur\nso stark an, dass man sich verbrennen kann,\nwenn man es mit bloßen Händen anfasst.',
		],
		[Language.Es]: [
			'Es muy amigable y se comunica con sus aliados\nmediante melodiosos gorjeos y el movimiento de su\ncola y sus gráciles alas.',
			'Su melodioso gorjeo lo dota de una gran belleza,\npero adopta una actitud agresiva y despiadada hacia\ncualquiera que ose invadir su territorio.',
			'Es muy amigable y se comunica con sus aliados mediante\nmelodiosos gorjeos y el movimiento de su cola y sus gráciles\nalas.',
			'Su melodioso gorjeo lo dota de una gran belleza, pero\nadopta una actitud agresiva y despiadada hacia cualquiera\nque ose invadir su territorio.',
			'Su carácter amigable lo convierte en un Pokémon\nmuy dócil. Ahora bien, en cuanto se pone a\ncombatir, se vuelve un adversario implacable.',
			'Cuando se exalta, su temperatura corporal llega\na duplicarse y sus hormonas se descontrolan.',
			'Es de carácter afable, pero si lo tocan en contra\nde su voluntad, aumenta repentinamente su\ntemperatura y puede provocar quemaduras.',
			'Su cuerpo emana bastante calor, razón por la\nque los Entrenadores de regiones frías les\npermiten dormir en sus camas.',
			'Sus melodiosos gorjeos son en realidad un aviso.\nAcribilla a picotazos a todo el que ose invadir su\nterritorio.',
			'Su temperatura corporal aumenta de repente\ncuando se exalta y puede causar quemaduras\nal contacto con la piel.',
		],
		[Language.It]: [
			'Ha una natura amichevole. Comunica con i suoi simili\ntramite meravigliosi cinguettii e movimenti delle penne\ndella coda.',
			'Cinguetta in modo meraviglioso, ma diventa\nestremamente aggressivo se un nemico invade\nil suo territorio.',
			'Ha una natura amichevole. Comunica con i suoi simili tramite\nmeravigliosi cinguettii e movimenti delle penne della coda.',
			'Cinguetta in modo meraviglioso, ma diventa estremamente\naggressivo se un nemico invade il suo territorio.',
			'È facile da allenare grazie alla sua indole\namichevole, ma nella lotta diventa\nestremamente aggressivo.',
			'Quando si innervosisce, la sua temperatura\ncorporea sale fino a raddoppiare e gli ormoni\nribollono.',
			'Ha un’indole amichevole, ma se viene infastidito\naumenta all’istante la sua temperatura corporea\nprovocando ustioni al colpevole.',
			'Il suo corpo è sempre caldo e per questo gli\nAllenatori che vivono in zone fredde a volte\nlo lasciano dormire nel loro letto.',
			'I suoi meravigliosi cinguettii sono in realtà\nversi minacciosi. Becca senza pietà chi invade\nil suo territorio.',
			'Quando si innervosisce, la sua temperatura\ncorporea sale di colpo, tanto da causare\nscottature a chi lo tocca a mani nude.',
		],
		[Language.En]: [
			'These friendly Pokémon send signals\nto one another with beautiful chirps\nand tail-feather movements.',
			'Despite the beauty of its lilting voice, it’s\nmerciless to intruders that enter its territory.',
			'This amiable Pokémon is easy to train.\nBut when battle is joined, it shows its\nferocious side.',
			'When it’s excited, its temperature can double,\nspiking hormone production in its body.',
			'While it’s an amiable Pokémon, if you touch it\nunexpectedly, it will heat up its body in an\ninstant, and you’ll be burned.',
			'Its body is always warm. Trainers who live in\ncold areas apparently sleep with it in their bed.',
			'Its melodious cries are actually warnings.\nFletchling will mercilessly peck at anything\nthat enters its territory.',
			'When this Pokémon gets excited, its body\ntemperature increases sharply. If you touch a\nFletchling with bare hands, you might get burned.',
		],
		[Language.Ja]: [
			'人懐っこい　性格。美しい　さえずりと\n尾羽を　振る　動きで\n仲間に　合図を　送る。',
			'さえずる　声は　美しいが\n縄張りに　入った　相手は\n容赦しない　荒々しさだ。',
			'人懐っこいので　扱いやすい\nポケモンだが　一度　戦いに\nなると　とても　荒々しいぞ。',
			'興奮　すると　体温が\n２倍まで　上がり　体内の\nホルモンが　活発に　なるのだ。',
			'人懐っこい　ポケモンだけど\n無理やり　触ると　身体を　一気に\n発熱させるので　火傷　するぞ。',
			'身体は　いつでも　暖かい。\n寒い　地域の　トレーナーは\nベッドで　一緒に　寝るらしい。',
			'美しい　さえずりは　威嚇。\n縄張りに　入った　ものは\n容赦なく　突きまくる。',
			'興奮すると　体温が\nグッと　上がる。　素手で　触ると\n火傷することも　あるほどだ。',
		],
		[Language.ZhHant]: [
			'和人很親近，所以是易於訓練的\n寶可夢，但一旦進入戰鬥，\n就會變得非常兇猛。',
			'一感到興奮，體溫會上升到２倍，\n同時體內的荷爾蒙會變得活躍。',
			'雖然是種容易與人親近的寶可夢，\n但如果強行去摸牠，牠的身體會\n一口氣發熱而讓人灼傷。',
			'身體總是很溫暖。\n寒冷地區的訓練家似乎\n會和牠一起睡在床上。',
			'婉轉的叫聲是在威嚇對方。\n對於闖入自己地盤的傢伙\n會毫不留情地啄個不停。',
			'一旦興奮體溫就會\n急速上升。赤手去摸牠\n有時甚至會被灼傷。',
		],
		[Language.ZhHans]: [
			'和人很亲近，所以是易于训练的\n宝可梦，但一旦进入战斗，\n就会变得非常凶猛。',
			'一兴奋，体温就会上升２倍，\n体内的荷尔蒙就会变得活跃。',
			'是和人很亲近的宝可梦，\n但如果强行触碰，它就会让身体\n一下子发热，从而造成灼伤。',
			'身体一直都很温暖。\n听说寒冷地区的训练家\n会和它一起睡在床上。',
			'它优美的鸣叫其实是威吓。\n对于进入自己领地的家伙，\n会毫不留情地啄个不停。',
			'一旦兴奋体温就会\n急剧上升。赤手去摸\n甚至有可能会被灼伤。',
		],
	},
	[
		[
			Variety.Fletchling,
			56,
			3,
			17,
			[Type.Normal, Type.Flying],
			{
				frontDefault: 'c251f6f6.png',
				frontShiny: '3c63c374.png',
			},
			{
				[Stat.Hp]: {baseStat: 45},
				[Stat.Attack]: {baseStat: 50},
				[Stat.Defense]: {baseStat: 43},
				[Stat.SpecialAttack]: {baseStat: 40},
				[Stat.SpecialDefense]: {baseStat: 38},
				[Stat.Speed]: {baseStat: 62, effort: 1},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.AerialAce,
					Move.Tailwind,
					Move.UTurn,
					Move.Acrobatics,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Fly,
					50,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.DoubleEdge,
					Move.RainDance,
					Move.FeatherDance,
					Move.AirCutter,
					Move.FlareBlitz,
					Move.AirSlash,
					Move.BraveBird,
					Move.FlameCharge,
					Move.Hurricane,
					Move.TeraBlast,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Growl,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					10,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Peck,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					25,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Agility,
					Move.Swift,
					Move.Endure,
					Move.DualWingbeat,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					5,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.HeatWave,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					45,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					35,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.Defog,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.FlameCharge,
					Move.QuickGuard,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Agility,
					Move.Swift,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Endure,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.HeatWave,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.UTurn,
					Move.Acrobatics,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Fly,
					50,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.Peck,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					10,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.Snore,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SteelWing,
					Move.Attract,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					45,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Defog,
					Move.FlameCharge,
					Move.QuickGuard,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.DualWingbeat,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					25,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.AerialAce,
					Move.UTurn,
					Move.FlameCharge,
					Move.Round,
					Move.Acrobatics,
					Move.WorkUp,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Growl,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Peck,
					10,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Roost,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					6,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HeatWave,
					Move.Snatch,
					Move.Tailwind,
					Move.Defog,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Egg,
					Move.Snatch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NaturalGift,
					29,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					45,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Tailwind,
					Move.QuickGuard,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MeFirst,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					39,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					25,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.AerialAce,
					Move.Roost,
					Move.UTurn,
					Move.FlameCharge,
					Move.Round,
					Move.Acrobatics,
					Move.WorkUp,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Peck,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Snatch,
					Move.Tailwind,
					Move.QuickGuard,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NaturalGift,
					29,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MeFirst,
					41,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					34,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					39,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					25,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.Taunt,
					Move.SecretPower,
					Move.Overheat,
					Move.AerialAce,
					Move.Roost,
					Move.UTurn,
					Move.FlameCharge,
					Move.Round,
					Move.Acrobatics,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Peck,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					6,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HeatWave,
					Move.Snatch,
					Move.Tailwind,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					48,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Snatch,
					Move.Tailwind,
					Move.QuickGuard,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					21,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NaturalGift,
					29,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					45,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MeFirst,
					41,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					34,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					25,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.AerialAce,
					Move.Roost,
					Move.UTurn,
					Move.FlameCharge,
					Move.Round,
					Move.Acrobatics,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Peck,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Snatch,
					Move.Tailwind,
					Move.QuickGuard,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NaturalGift,
					29,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MeFirst,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					39,
				),
			].flat(),
			[
				{
					ability: Ability.BigPecks,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.GaleWings,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Fletchling,
					PokemonFormBits.Default,
					{
						frontDefault: 'c251f6f6.png',
						frontShiny: '3c63c374.png',
					},
					[Type.Normal, Type.Flying],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Fletchinder,
	50,
	120,
	Color.Red,
	[EggGroup.Flying],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	15,
	GrowthRate.MediumSlow,
	Shape.Wings,
	{
		[Language.JaHrkt]: ['ヒノヤコマ'],
		[Language.Roomaji]: ['Hinoyakoma'],
		[Language.Ko]: ['불화살빈'],
		[Language.ZhHant]: ['火箭雀'],
		[Language.Fr]: ['Braisillon'],
		[Language.De]: ['Dartignis'],
		[Language.Es]: ['Fletchinder'],
		[Language.It]: ['Fletchinder'],
		[Language.En]: ['Fletchinder'],
		[Language.Ja]: ['ヒノヤコマ'],
		[Language.ZhHans]: ['火箭雀'],
	},
	{
		[Language.JaHrkt]: ['ひのこポケモン'],
		[Language.Ko]: ['불티포켓몬'],
		[Language.ZhHant]: ['火花寶可夢'],
		[Language.Fr]: ['Pokémon Braise'],
		[Language.De]: ['Funkenregen-Pokémon'],
		[Language.Es]: ['Pokémon Lumbre'],
		[Language.It]: ['Pokémon Sfavillante'],
		[Language.En]: ['Ember Pokémon'],
		[Language.Ja]: ['ひのこポケモン'],
		[Language.ZhHans]: ['火花宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'ひのこを　クチバシから　とばして\nくさむらを　こがし　おどろいて\nとびだした　えものを　つかまえる。',
			'おなかの　ほのおぶくろの　かりょくが\nつよまるほど　はやく　とべるが\nてんかするまで　じかんが　かかる。',
			'クチバシから　ひのこを　とばして\nえものに　ぶつける。　つかまえた\nえものは　やいてから　いただくぞ。',
			'はんけい　すうキロの　なわばりを\nもっており　ほかの　ヒノヤコマが\nはいってくることを　ゆるさない。',
			'くさむらに　ひのこを　まきちらす。\nほのおに　おどろいて　とびだしてきた\nむしポケモンを　ぱくりと　いただく。',
			'とびはじめた　ちょくごの　スピードは\nすべての　とりポケモンの　なかでも\nトップクラスの　はやさ　なのだ。',
			'すあなのなかに　ひのこを　とばし　\nおどろいて　でてきた　えものを\nするどい　ツメで　しとめるのだ。',
			'なわばりいしきが　とても　つよく\nこうせんてき。　えさばを　めぐり\nヒノヤコマどうしで　あらそう。',
		],
		[Language.Ko]: [
			'부리에서 불꽃을 뿜어\n풀숲을 태우고 놀라서\n뛰쳐나온 사냥감을 잡는다.',
			'배에 있는 불꽃 주머니의 화력이\n강해질수록 빨리 날 수 있지만\n점화할 때까지 시간이 걸린다.',
			'부리로부터 불꽃을 날려\n먹이에 맞힌다. 잡은\n먹이는 구운 다음 먹는다.',
			'반경 수 km의 영역을\n차지하고 있어 다른 불화살빈이\n들어오는 것을 용서하지 않는다.',
			'풀숲에 불꽃을 흩뿌린다.\n불꽃에 놀라 뛰쳐나온\n벌레포켓몬을 덥석 먹어 치운다.',
			'날기 시작한 직후의 스피드는\n모든 새포켓몬 중에서도\n톱클래스 수준이다.',
			'굴 속에 불똥을 쏜 다음\n놀라서 빠져나온 먹이를\n날카로운 발톱으로 잡는다.',
			'영역에 대한 개념이 매우 강하고\n호전적이다. 먹이 먹는 장소를 두고\n불화살빈끼리 싸운다.',
		],
		[Language.Fr]: [
			'Il crache des étincelles pour brûler les hautes herbes\net attraper les proies surprises qui tentent d’échapper\nà l’incendie.',
			'Il possède une poche remplie de feu sur son ventre.\nPlus elle émet de chaleur, plus il vole vite.\nCependant, elle met quelque temps à chauffer.',
			'Il possède une poche remplie de feu sur son ventre.\nPlus elle émet de chaleur, plus il vole vite. Cependant,\nelle met quelque temps à chauffer.',
			'Il crache des escarbilles par le bec, en visant\nsa proie. Une fois celle-ci capturée, il la fait\nrôtir avant de la déguster.',
			'Son territoire s’étend sur plusieurs kilomètres.\nL’intrusion d’autres Braisillon n’est en aucun cas\ntolérée.',
			'Il enflamme des touffes d’herbe en crachant\ndes escarbilles. Il n’a plus qu’à s’emparer des\nPokémon Insecte qui s’enfuient pour les gober.',
			'À peine décolle-t-il que sa vitesse lui permet\ndéjà de rivaliser avec les Pokémon oiseaux\nles plus rapides.',
			'Il lance des étincelles dans le terrier de ses proies\npour les effrayer. Dès qu’elles en émergent,\nil les attaque à coups de serres.',
			'De nature belliqueuse, il dispose d’un fort\ninstinct territorial. Quand il chasse, il se dispute\nrégulièrement les proies avec ses congénères.',
		],
		[Language.De]: [
			'Es speit Funken aus seinem Schnabel und fängt\ndie Beute, die überrascht aus dem angesengten Gras\nhervorspringt.',
			'Je heißer die Flammen im Feuersack seines Bauches\nlodern, desto schneller kann es fliegen. Es dauert\njedoch eine Weile, bis es zur Zündung kommt.',
			'Es speit Funken aus seinem Schnabel und fängt die Beute,\ndie überrascht aus dem angesengten Gras hervorspringt.',
			'Je heißer die Flammen im Feuersack seines Bauches lodern,\ndesto schneller kann es fliegen. Es dauert jedoch eine Weile,\nbis es zur Zündung kommt.',
			'Es speit Funken aus seinem Schnabel und\nschreckt so die Beute auf. Einmal gefangen,\nwird sie geröstet und dann verspeist.',
			'Sein Revier hat einen Radius von mehreren\nKilometern. Das Eindringen anderer Dartignis\nwird nicht geduldet.',
			'Es versprüht Funken im hohen Gras und fängt\ndie dadurch aufgescheuchten Käfer-Pokémon\nab, indem es sie mit dem Schnabel aufpickt.',
			'Kaum ein anderes Vogel-Pokémon gewinnt\ndirekt nach dem Abflug so schnell an Tempo\nwie Dartignis.',
			'Es speit Funken in Nisthöhlen und erlegt die\nerschrocken daraus hervorkommende Beute\nmit seinen scharfen Krallen.',
			'Dieses kriegerische Pokémon hat ein stark\nausgeprägtes Revierverhalten. Es kämpft mit\nanderen Dartignis um Futterplätze.',
		],
		[Language.Es]: [
			'Lanza chispas por su pico y prende fuego a la hierba\nalta para así sorprender a sus presas y atraparlas\ncuando intentan escapar.',
			'Cuanto más intenso sea el calor que se genera en la\nsaca de fuego de su vientre, más rápido es capaz de\nvolar. Sin embargo, la llama tarda en prender.',
			'Lanza chispas por su pico y prende fuego a la hierba alta para\nasí sorprender a sus presas y atraparlas cuando intentan\nescapar.',
			'Cuanto más intenso sea el calor que se genera en la saca\nde fuego de su vientre, más rápido es capaz de volar. Sin\nembargo, la llama tarda en prender.',
			'Lanza chispas por el pico para atacar a su\npresa, a la que devora una vez calcinada.',
			'No tolera bajo ningún concepto que otro\nFletchinder invada su territorio, cuyo radio\nabarca varios kilómetros.',
			'Prende fuego a los arbustos con las chispas\nque suelta y aprovecha para cazar los Pokémon\nBicho que salen corriendo despavoridos.',
			'La velocidad que alcanza nada más emprender\nel vuelo es de las más altas de entre todos los\nPokémon pájaro.',
			'Lanza chispas al interior de la guarida de su\npresa y, cuando esta sale despavorida, la ataca\npor sorpresa con sus afiladas garras.',
			'Defienden su territorio con suma agresividad.\nSe pelean entre sí por el control de las áreas de\ncaza.',
		],
		[Language.It]: [
			'Incendia i cespugli producendo scintille con il becco\ne cattura le prede che ne escono spaventate.',
			'Nel ventre ha una sacca ardente che gli permette di\nvolare più velocemente in base all’intensità del fuoco,\nma per riscaldarla al punto giusto occorre del tempo.',
			'Incendia i cespugli producendo scintille con il becco e cattura\nle prede che ne escono spaventate.',
			'Nel ventre ha una sacca ardente che gli permette di volare più\nvelocemente in base all’intensità del fuoco, ma per riscaldarla\nal punto giusto occorre del tempo.',
			'Attacca le prede scagliando scintille dal becco\ne, dopo averle catturate, le arrostisce e le\nmangia.',
			'Difende gelosamente il suo territorio, che si\nestende per vari chilometri, tenendo lontani\ngli altri Fletchinder.',
			'Sparge scintille per incendiare i cespugli e fa\nman bassa dei Pokémon Coleottero che saltano\nfuori spaventati.',
			'La velocità che raggiunge subito dopo aver\nspiccato il volo è una delle più alte registrate\ntra i Pokémon alati.',
			'Scaglia scintille nelle tane delle prede e attacca\ncon i suoi artigli affilati quelle che ne escono\nspaventate.',
			'È molto territoriale e aggressivo. Si contende\nil territorio di caccia con gli altri Fletchinder.',
		],
		[Language.En]: [
			'From its beak, it expels embers that set\nthe tall grass on fire. Then it pounces on\nthe bewildered prey that pop out of the grass.',
			'The hotter the flame sac on its belly,\nthe faster it can fly, but it takes some\ntime to get the fire going.',
			'From its beak, it fires embers at its prey. Once\nit has caught them, it grills them at high heat\nbefore feasting upon them.',
			'It will not tolerate other Fletchinder entering its\nterritory, which has a radius of several miles.',
			'It scatters embers in the tall grass. Then bug\nPokémon, frightened by the flames, come\nflying out, and Fletchinder gobbles them up.',
			'Its speed right after takeoff already puts it in\nthe top speed class of all bird Pokémon.',
			'Fletchinder launches embers into the den of\nits prey. When the prey comes leaping out,\nFletchinder’s sharp talons finish it off.',
			'Fletchinder are exceedingly territorial and\naggressive. These Pokémon fight among\nthemselves over feeding grounds.',
		],
		[Language.Ja]: [
			'火の粉を　クチバシから　飛ばして\n草むらを　焦がし　驚いて\n飛び出した　獲物を　捕まえる。',
			'お腹の　炎袋の　火力が\n強まるほど　速く　飛べるが\n点火するまで　時間が　かかる。',
			'クチバシから　火の粉を　飛ばして\n獲物に　ぶつける。　捕まえた\n獲物は　焼いてから　いただくぞ。',
			'半径　数キロの　縄張りを\n持っており　他の　ヒノヤコマが\n入ってくることを　許さない。',
			'草むらに　ひのこを　まき散らす。\n炎に　驚いて　飛び出してきた\nむしポケモンを　ぱくりと　いただく。',
			'飛びはじめた　直後の　スピードは\nすべての　とりポケモンの　中でも\nトップクラスの　速さ　なのだ。',
			'巣穴の中に　火の粉を　飛ばし\n驚いて　出てきた　獲物を\n鋭い　ツメで　しとめるのだ。',
			'縄張り意識が　とても　強く\n好戦的。　餌場を　めぐり\nヒノヤコマ同士で　争う。',
		],
		[Language.ZhHant]: [
			'從鳥嘴裡噴出火花擊向獵物。\n會把捉到的獵物烤過之後再享用。',
			'擁有半徑達數公里的地盤，\n並且不允許其他火箭雀進入。',
			'會向草叢撒出火花，\n然後趁蟲寶可夢被火焰嚇到\n從草叢跳出來時大口吞食。',
			'剛起飛時的速度\n在所有的鳥寶可夢之中\n是數一數二的。',
			'會朝著獵物的巢穴中噴射火花，\n再用銳利的爪子解決掉\n受驚嚇而跑出來的獵物。',
			'地盤意識很強，且性情好戰。\n火箭雀彼此之間也會為了\n爭奪覓食的地方而戰鬥。',
		],
		[Language.ZhHans]: [
			'从鸟嘴里喷出火花击中猎物。\n捉到的猎物烧了之后就会享用。',
			'拥有半径数公里的领地，\n不允许其他火箭雀进入。',
			'向草丛挥撒火花。\n然后大口吞食被火焰吓到\n从草丛跳出来的虫宝可梦。',
			'刚起飞后的速度，\n在所有鸟宝可梦中也是顶级的。',
			'会向猎物的巢穴中喷射火花，\n然后用锐利的爪子\n了结受惊而出的猎物。',
			'领地意识很强，性格好战。\n火箭雀彼此之间会为了\n觅食的地方发生争斗。',
		],
	},
	[
		[
			Variety.Fletchinder,
			134,
			7,
			160,
			[Type.Fire, Type.Flying],
			{
				frontDefault: '645ea8ab.png',
				frontShiny: 'e99a2614.png',
			},
			{
				[Stat.Hp]: {baseStat: 62},
				[Stat.Attack]: {baseStat: 73},
				[Stat.Defense]: {baseStat: 55},
				[Stat.SpecialAttack]: {baseStat: 56},
				[Stat.SpecialDefense]: {baseStat: 52},
				[Stat.Speed]: {baseStat: 84, effort: 2},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Flamethrower,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.AerialAce,
					Move.UTurn,
					Move.Acrobatics,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Fly,
					64,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.DoubleEdge,
					Move.RainDance,
					Move.FeatherDance,
					Move.AirCutter,
					Move.FlareBlitz,
					Move.AirSlash,
					Move.BraveBird,
					Move.FlameCharge,
					Move.Hurricane,
					Move.TeraBlast,
					Move.TemperFlare,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Growl,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Ember,
					Move.QuickAttack,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Peck,
					Move.Feint,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.FireSpin,
					Move.Agility,
					Move.Swift,
					Move.Endure,
					Move.DualWingbeat,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					29,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					50,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HeatWave,
					Move.Tailwind,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					57,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					22,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Flamethrower,
					Move.FireSpin,
					Move.Agility,
					Move.FireBlast,
					Move.Swift,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Endure,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.HeatWave,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.UTurn,
					Move.Acrobatics,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Fly,
					64,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.Ember,
					Move.Peck,
					Move.QuickAttack,
					Move.Feint,
					Move.FlameCharge,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					29,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.Snore,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					50,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SteelWing,
					Move.Attract,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					57,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					43,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					22,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.DualWingbeat,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					27,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Flamethrower,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.AerialAce,
					Move.UTurn,
					Move.FlameCharge,
					Move.Round,
					Move.Acrobatics,
					Move.WorkUp,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.Ember,
					Move.QuickAttack,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Ember,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Peck,
					10,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Roost,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					6,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HeatWave,
					Move.Tailwind,
					Move.Defog,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					55,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Tutor,
					Move.Snatch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NaturalGift,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MeFirst,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					27,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Flamethrower,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.AerialAce,
					Move.Roost,
					Move.UTurn,
					Move.FlameCharge,
					Move.Round,
					Move.Acrobatics,
					Move.WorkUp,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
					Move.Ember,
					Move.QuickAttack,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Ember,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Peck,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NaturalGift,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					51,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MeFirst,
					46,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					27,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Flamethrower,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.SecretPower,
					Move.Overheat,
					Move.AerialAce,
					Move.Roost,
					Move.UTurn,
					Move.FlameCharge,
					Move.Round,
					Move.Acrobatics,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					17,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Peck,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					6,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HeatWave,
					Move.Snatch,
					Move.Tailwind,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					55,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NaturalGift,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					51,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MeFirst,
					46,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Incinerate,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					27,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Flamethrower,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.AerialAce,
					Move.Roost,
					Move.UTurn,
					Move.FlameCharge,
					Move.Round,
					Move.Incinerate,
					Move.Acrobatics,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Peck,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NaturalGift,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MeFirst,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					42,
				),
			].flat(),
			[
				{
					ability: Ability.FlameBody,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.GaleWings,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Fletchinder,
					PokemonFormBits.Default,
					{
						frontDefault: '645ea8ab.png',
						frontShiny: 'e99a2614.png',
					},
					[Type.Fire, Type.Flying],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Talonflame,
	50,
	45,
	Color.Red,
	[EggGroup.Flying],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	15,
	GrowthRate.MediumSlow,
	Shape.Wings,
	{
		[Language.JaHrkt]: ['ファイアロー'],
		[Language.Roomaji]: ['Fiarrow'],
		[Language.Ko]: ['파이어로'],
		[Language.ZhHant]: ['烈箭鷹'],
		[Language.Fr]: ['Flambusard'],
		[Language.De]: ['Fiaro'],
		[Language.Es]: ['Talonflame'],
		[Language.It]: ['Talonflame'],
		[Language.En]: ['Talonflame'],
		[Language.Ja]: ['ファイアロー'],
		[Language.ZhHans]: ['烈箭鹰'],
	},
	{
		[Language.JaHrkt]: ['れっかポケモン'],
		[Language.Ko]: ['열화포켓몬'],
		[Language.ZhHant]: ['烈火寶可夢'],
		[Language.Fr]: ['Pokémon Fournaise'],
		[Language.De]: ['Stichflammen-Pokémon'],
		[Language.Es]: ['Pokémon Flamígero'],
		[Language.It]: ['Pokémon Ardifiamma'],
		[Language.En]: ['Scorching Pokémon'],
		[Language.Ja]: ['れっかポケモン'],
		[Language.ZhHans]: ['烈火宝可梦'],
	},
	{
		[Language.ZhHant]: [
			'主要的獵物是鳥寶可夢。\n會急速接近對手，然後用\n猛烈的腳踢把對手擊落到地面。',
			'喜歡吃長翅鷗和小篤兒。\n會對獵物施展猛烈的踢腿，\n再用銳利的爪子牢牢抓住。',
			'從翅膀的縫隙裡噴出火花，\n同時以５００公里的時速\n直線衝向獵物。',
			'羽毛很結實而且能夠防火。\n在過去消防隊員的制服\n是用烈箭鷹的羽毛製成的。',
			'主要的獵物是鳥寶可夢。\n會從羽毛的縫隙裡噴出\n火花威嚇對手。',
			'會以時速５００公里的速度\n進行突擊。對手連逃跑都來不及\n就被牠猛烈的腳踢給解決了。',
		],
		[Language.JaHrkt]: [
			'はげしい　たたかいで　こうふんすると\nぜんしんの　うもうの　すきまから\nひのこを　ふきだして　ひこうする。',
			'えものに　おそいかかるときの\nスピードは　じそく５００キロ。\nきょうれつな　キックで　しとめる。',
			'こうぶつは　キャモメや　ツツケラ。\nきょうれつな　キックを　おみまいし\nするどいツメで　がっちり　キャッチ。',
			'はねの　すきまから　ひのこを\nふきだしながら　じそく５００キロで\nえものに　むかって　いっちょくせん。',
			'はねは　ひを　とおさず　じょうぶ。\nむかしの　しょうぼうしの　ふくは\nファイアローの　はねで　できていた。',
			'とりポケモンが　おもな　えもの。\nきゅうせっきんからの　ちからづよい\nキックで　じめんに　たたきおとす。',
			'とりポケモンが　おもな　えもの。\nうもうの　あいだから　ひのこを\nふきだし　あいてを　いかくする。',
			'じそく５００キロで　とつげき。\nえものが　にげるすきを　あたえずに\nきょうれつな　けりで　しとめる。',
		],
		[Language.Ko]: [
			'격렬한 싸움으로 흥분하게 되면\n온몸의 깃털 사이에서\n불꽃을 뿜어내며 비행한다.',
			'사냥감을 덮칠 때의\n스피드는 시속 500km이다.\n강렬한 킥으로 꼼짝 못하게 한다.',
			'좋아하는 것은 갈모매와 콕코구리다.\n강렬한 킥으로 타격을 가하고\n날카로운 발톱으로 꽉 잡는다.',
			'깃털 사이로 불꽃을 뿜어내며\n시속 500km로 먹이를 향해\n똑바로 날아간다.',
			'날개는 불이 붙지 않고 튼튼하다.\n옛날에는 소방관들의 옷을\n파이어로의 날개로 만들었다.',
			'새포켓몬이 주된 먹이다.\n갑자기 접근한 뒤 강력한\n킥으로 땅에 떨어뜨린다.',
			'새포켓몬이 주요 먹이다.\n깃털 사이로 불똥을\n뿜어내며 상대를 위협한다.',
			'시속 500km로 돌격한다.\n먹이가 도망칠 틈을 주지 않고\n강렬한 발차기로 꼼짝 못 하게 한다.',
		],
		[Language.Fr]: [
			'Exalté par un combat sans merci, il s’envole en\nsemant dans son sillage les escarbilles du feu qui\ncouve dans son plumage.',
			'Quand il s’abat sur ses proies, sa vitesse dépasse\nles 500 km/h. Il les achève d’un puissant coup de\nserre.',
			'Exalté par un combat sans merci, il s’envole en semant\ndans son sillage les escarbilles du feu qui couve dans\nson plumage.',
			'Quand il s’abat sur ses proies, sa vitesse dépasse\nles 500 km/h. Il les achève d’un puissant coup de serre.',
			'Il raffole des Goélise et des Picassaut.\nIl déstabilise ses proies d’un bon coup de patte\navant de les capturer avec ses serres acérées.',
			'Il fond sur ses proies en piqué à 500 km/h,\nsemant derrière lui une pluie d’escarbilles\néchappées de ses ailes.',
			'Son plumage résistant est ignifugé.\nJadis, la combinaison portée par les pompiers\nétait faite de plumes de Flambusard.',
			'La plupart de ses proies sont des Pokémon\noiseaux. Il surgit sans prévenir et propulse\nsa victime au sol d’un puissant coup de patte.',
			'Flambusard chasse surtout les Pokémon oiseaux.\nIl intimide ses adversaires en produisant\ndes étincelles avec son plumage.',
			'Flambusard attaque à une vitesse de 500 km/h.\nIl achève ses proies d’un puissant coup de patte\nsans leur laisser la moindre chance de fuir.',
		],
		[Language.De]: [
			'Die Aufregung eines harten Kampfes veranlasst es\ndazu, im Flug Funken aus den Zwischenräumen\nseines Gefieders zu sprühen.',
			'Bei der Jagd erreicht es Geschwindigkeiten von bis zu\n500 km/h. Es erledigt seine Beute mit einem kräftigen\nTritt.',
			'Die Aufregung eines harten Kampfes veranlasst es dazu,\nim Flug Funken aus den Zwischenräumen seines Gefieders\nzu sprühen.',
			'Bei der Jagd erreicht es Geschwindigkeiten von bis zu\n500 km/h. Es erledigt seine Beute mit einem kräftigen Tritt.',
			'Auf seinem Speiseplan stehen bevorzugt Wingull\nund Peppeck. Es schaltet seine Beute mit einem\nkräftigen Tritt aus, um sie sich dann zu krallen.',
			'Bei bis zu 500 km/h sprüht es im Flug Funken\naus den Zwischenräumen seines Gefieders und\nstürzt sich schnurstracks auf seine Beute.',
			'Sein Gefieder ist robust und feuerfest. Früher\nfertigte man Feuerwehranzüge deshalb aus\nFiaro-Federn.',
			'Fiaro ernährt sich vor allem von Vogel-Pokémon.\nEs nähert sich überfallartig seiner Beute und\nbefördert sie mit einem kräftigen Tritt zu Boden.',
			'Fiaro ernährt sich vor allem von Vogel-Pokémon.\nAus den Zwischenräumen seines Gefieders sprüht\nes Funken, um seine Gegner einzuschüchtern.',
			'Fiaro greift mit einer Geschwindigkeit von bis zu\n500 km/h an. Mit einem kräftigen Tritt erlegt es\nseine Beute und gibt ihr keine Chance zur Flucht.',
		],
		[Language.Es]: [
			'Si se exalta durante un combate reñido, arroja chispas\ny ascuas de los intersticios entre su plumaje\nmientras vuela.',
			'Llega a alcanzar los 500 km/h al perseguir a su presa,\na quien le asesta el golpe de gracia con una patada\nmuy potente.',
			'Si se exalta durante un combate reñido, arroja chispas y\nascuas de los intersticios entre su plumaje mientras vuela.',
			'Llega a alcanzar los 500 km/h al perseguir a su presa, a\nquien le asesta el golpe de gracia con una patada muy\npotente.',
			'Wingull y Pikipek son sus presas favoritas.\nLes asesta un potente golpe y después las\natrapa sin remisión con sus garras afiladas.',
			'Se abalanza en línea recta sobre su presa a una\nvelocidad de 500 km/h mientras arroja chispas\ny ascuas de los intersticios entre su plumaje.',
			'Sus alas son resistentes al fuego, por lo que se\nsolían usar sus plumas para confeccionar trajes\nde bombero.',
			'Su presa favorita son los Pokémon pájaro, a los\ncuales se acerca a velocidades vertiginosas y\nderriba con la temible potencia de sus patas.',
			'Su presa predilecta son los Pokémon pájaro.\nIntimida a sus rivales lanzando ascuas desde\nlos intersticios de su plumaje.',
			'Arremete contra sus presas a una velocidad de\n500 km/h y les asesta el golpe de gracia con una\npatada muy potente, sin dejarles escapatoria.',
		],
		[Language.It]: [
			'Durante lotte senza esclusione di colpi, spicca il\nvolo sprizzando scintille dalle fessure che ha tra\nle piume.',
			'Piomba sulle prede a 500 km/h e le attacca con\nartigli potentissimi.',
			'Durante lotte senza esclusione di colpi, spicca il volo\nsprizzando scintille dalle fessure che ha tra le piume.',
			'Piomba sulle prede a 500 km/h e le attacca con artigli\npotentissimi.',
			'È ghiotto di Wingull e Pikipek.\nStordisce le prede con potenti zampate e poi\nle afferra saldamente con i suoi artigli aguzzi.',
			'Piomba dritto sulle prede a 500 km/h,\nsprizzando scintille dalle fessure che ha\ntra le piume.',
			'Le sue ali sono robuste e ignifughe.\nIn passato le divise dei pompieri venivano\nfabbricate con le sue piume.',
			'Caccia soprattutto Pokémon alati. Si avvicina\nrapido alla preda e l’abbatte con un calcio\npotentissimo, facendola precipitare al suolo.',
			'Caccia soprattutto Pokémon alati.\nIntimorisce il bersaglio sprizzando scintille\ndalle fessure che ha tra le piume.',
			'Piomba sulle prede a 500 km/h e le attacca\ncon calci potentissimi senza dargli via di scampo.',
		],
		[Language.En]: [
			'In the fever of an exciting battle, it\nshowers embers from the gaps between\nits feathers and takes to the air.',
			'When attacking prey, it can reach speeds\nof up to 310 mph. It finishes its prey off\nwith a colossal kick.',
			'Its favorite foods are Wingull and Pikipek.\nIt attacks with a powerful kick and grasps them\nfirmly in its talons.',
			'It zooms directly at its prey at flight speeds of\nclose to 310 mph, while fiery embers scatter\nfrom gaps in its feathers.',
			'Its tough wings don’t allow fire to pass through\nthem. A long time ago, firefighters’ outfits were\nmade from Talonflame wings.',
			'Bird Pokémon make up most of its diet.\nIt approaches at high speeds and smacks them\ndown to the ground with its powerful kick.',
			'Talonflame mainly preys upon other bird\nPokémon. To intimidate opponents, it sends\nembers spewing from gaps between its feathers.',
			'Talonflame dives toward prey at speeds of up to\n310 mph and assaults them with powerful kicks,\ngiving the prey no chance to escape.',
		],
		[Language.Ja]: [
			'激しい　戦いで　興奮すると\n全身の　羽毛の　すきまから\n火の粉を　噴き出して　飛行する。',
			'獲物に　襲いかかるときの\nスピードは　時速５００キロ。\n強烈な　キックで　しとめる。',
			'好物は　キャモメや　ツツケラ。\n強烈な　キックを　お見舞いし\n鋭いツメで　がっちり　キャッチ。',
			'羽の　すき間から　火の粉を\n吹きだしながら　時速５００キロで\n獲物に　向かって　一直線。',
			'羽は　火を　通さず　丈夫。\n昔の　消防士の　服は\nファイアローの　羽で　できていた。',
			'とりポケモンが　主な　獲物。\n急接近からの　力強い\nキックで　地面に　叩き落す。',
			'鳥ポケモンが　おもな　獲物。\n羽毛の　あいだから　火の粉を\n噴き出し　相手を　威嚇する。',
			'時速５００キロで　突撃。\n獲物が　逃げるすきを　与えずに\n強烈な　蹴りで　しとめる。',
		],
		[Language.ZhHans]: [
			'喜欢吃的是长翅鸥和小笃儿。\n会施展猛烈的踢腿，\n用锐利的爪子牢牢抓住。',
			'从翅膀的缝隙里喷出火花，\n同时以５００公里的时速\n呈一直线冲向猎物。',
			'羽毛很结实，连火都烧不穿。\n过去的消防员服就是用\n烈箭鹰的羽毛做成的。',
			'鸟宝可梦是它的主要猎物。\n用迅速接近后的强力踢\n将对方打落到地面。',
			'主要以鸟宝可梦为食。\n会从羽毛的缝隙里\n喷出火花来威吓对手。',
			'会以５００公里的时速进行突击。\n不给猎物留下逃跑的机会，\n直接以猛烈的踢击将其解决。',
		],
	},
	[
		[
			Variety.Talonflame,
			175,
			12,
			245,
			[Type.Fire, Type.Flying],
			{
				frontDefault: '613c574e.png',
				frontShiny: '9f2c1970.png',
				backDefault: 'bd3fa970.png',
				backShiny: '1f97ae97.png',
			},
			{
				[Stat.Hp]: {baseStat: 78},
				[Stat.Attack]: {baseStat: 81},
				[Stat.Defense]: {baseStat: 71},
				[Stat.SpecialAttack]: {baseStat: 74},
				[Stat.SpecialDefense]: {baseStat: 69},
				[Stat.Speed]: {baseStat: 126, effort: 3},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.AerialAce,
					Move.BulkUp,
					Move.UTurn,
					Move.GigaImpact,
					Move.FlameCharge,
					Move.Acrobatics,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Fly,
					74,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.DoubleEdge,
					Move.RainDance,
					Move.FeatherDance,
					Move.AirCutter,
					Move.AirSlash,
					Move.TeraBlast,
					Move.TemperFlare,
					Move.UpperHand,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.FlareBlitz,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Ember,
					Move.Peck,
					Move.QuickAttack,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.FireSpin,
					Move.Agility,
					Move.Swift,
					Move.Endure,
					Move.FlareBlitz,
					Move.BraveBird,
					Move.Hurricane,
					Move.DualWingbeat,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					29,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					56,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HeatWave,
					Move.Tailwind,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					38,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					65,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Feint,
					Move.FlameCharge,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					47,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BraveBird,
					83,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					22,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.FireSpin,
					Move.Agility,
					Move.FireBlast,
					Move.Swift,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Endure,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.HeatWave,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.BulkUp,
					Move.UTurn,
					Move.FlareBlitz,
					Move.BraveBird,
					Move.GigaImpact,
					Move.Acrobatics,
					Move.Hurricane,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Fly,
					74,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.Ember,
					Move.Peck,
					Move.QuickAttack,
					Move.Feint,
					Move.FlareBlitz,
					Move.FlameCharge,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					29,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.Snore,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					56,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SteelWing,
					Move.Attract,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					38,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					65,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					47,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BraveBird,
					83,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					22,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.DualWingbeat,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					27,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.AerialAce,
					Move.BulkUp,
					Move.UTurn,
					Move.GigaImpact,
					Move.FlameCharge,
					Move.Round,
					Move.Acrobatics,
					Move.WorkUp,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.BraveBird,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.Ember,
					Move.Peck,
					Move.QuickAttack,
					Move.FlareBlitz,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Peck,
					10,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Roost,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					6,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HeatWave,
					Move.Tailwind,
					Move.Defog,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					60,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Tutor,
					Move.Snatch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NaturalGift,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MeFirst,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BraveBird,
					64,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					27,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.AerialAce,
					Move.BulkUp,
					Move.Roost,
					Move.UTurn,
					Move.GigaImpact,
					Move.FlameCharge,
					Move.Round,
					Move.Acrobatics,
					Move.WorkUp,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
					Move.Ember,
					Move.Peck,
					Move.QuickAttack,
					Move.FlareBlitz,
					Move.BraveBird,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Peck,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					60,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NaturalGift,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MeFirst,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BraveBird,
					64,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					39,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					44,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					27,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.SecretPower,
					Move.Overheat,
					Move.AerialAce,
					Move.BulkUp,
					Move.Roost,
					Move.UTurn,
					Move.GigaImpact,
					Move.FlameCharge,
					Move.Round,
					Move.Acrobatics,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
					Move.FlareBlitz,
					Move.BraveBird,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					17,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Peck,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					6,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HeatWave,
					Move.Snatch,
					Move.Tailwind,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					60,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NaturalGift,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					55,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MeFirst,
					49,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BraveBird,
					64,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HoneClaws,
					Move.Incinerate,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					39,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					27,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.AerialAce,
					Move.BulkUp,
					Move.Roost,
					Move.UTurn,
					Move.GigaImpact,
					Move.HoneClaws,
					Move.FlameCharge,
					Move.Round,
					Move.Incinerate,
					Move.Acrobatics,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
					Move.FlareBlitz,
					Move.BraveBird,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Peck,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SteelWing,
					60,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NaturalGift,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MeFirst,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BraveBird,
					64,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Acrobatics,
					44,
				),
			].flat(),
			[
				{
					ability: Ability.FlameBody,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.GaleWings,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Talonflame,
					PokemonFormBits.Default,
					{
						frontDefault: '613c574e.png',
						frontShiny: '9f2c1970.png',
						backDefault: 'bd3fa970.png',
						backShiny: '1f97ae97.png',
					},
					[Type.Fire, Type.Flying],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Scatterbug,
	70,
	255,
	Color.Black,
	[EggGroup.Bug],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	15,
	GrowthRate.Medium,
	Shape.Armor,
	{
		[Language.JaHrkt]: ['コフキムシ'],
		[Language.Roomaji]: ['Kofukimushi'],
		[Language.Ko]: ['분이벌레'],
		[Language.ZhHant]: ['粉蝶蟲'],
		[Language.Fr]: ['Lépidonille'],
		[Language.De]: ['Purmel'],
		[Language.Es]: ['Scatterbug'],
		[Language.It]: ['Scatterbug'],
		[Language.En]: ['Scatterbug'],
		[Language.Ja]: ['コフキムシ'],
		[Language.ZhHans]: ['粉蝶虫'],
	},
	{
		[Language.JaHrkt]: ['こなふきポケモン'],
		[Language.Ko]: ['가루뿜기포켓몬'],
		[Language.ZhHant]: ['噴粉寶可夢'],
		[Language.Fr]: ['Pokémon Exhalécaille'],
		[Language.De]: ['Puderinsekt'],
		[Language.Es]: ['Pokémon Tiraescamas'],
		[Language.It]: ['Pokémon Tirascaglie'],
		[Language.En]: ['Scatterdust Pokémon'],
		[Language.Ja]: ['こなふきポケモン'],
		[Language.ZhHans]: ['喷粉宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'とりポケモンに　おそわれると\nくろい　こなを　まきちらす。\nふれると　マヒする　どくのこなだ。',
			'からだを　おおう　こなが　たいおんを\nちょうせつするので　どんな　きこうや\nふうどの　ちいきでも　くらせる。',
		],
		[Language.Ko]: [
			'새포켓몬에게 습격당하면\n검은 가루를 흩뿌린다.\n만지면 마비되는 독가루다.',
			'몸을 덮은 가루가 체온을\n조절하고 있어 어떤 기후나\n풍토의 지역에서도 살 수 있다.',
		],
		[Language.Fr]: [
			'Lorsqu’il est poursuivi par un Pokémon Oiseau,\nil projette une poudre noire qui paralyse tous ceux\nqu’elle touche.',
			'La poudre qui recouvre son corps l’aide à réguler\nsa température. Il peut s’adapter à tous les climats.',
			'Lorsqu’il est poursuivi par un Pokémon Oiseau, il projette\nune poudre noire qui paralyse tous ceux qu’elle touche.',
		],
		[Language.De]: [
			'Wird es von einem fliegenden Pokémon angegriffen,\nverstreut es schwarzen Puder. Der giftige Puder löst\nbei Berührung Paralyse aus.',
			'Es reguliert seine Körpertemperatur mit dem Puder,\ndas seinen Körper bedeckt, und kommt deswegen\nin jedem Klima und jeder Region zurecht.',
			'Wird es von einem fliegenden Pokémon angegriffen, verstreut\nes schwarzen Puder. Der giftige Puder löst bei Berührung\nParalyse aus.',
			'Es reguliert seine Körpertemperatur mit dem Puder,\ndas seinen Körper bedeckt, und kommt deswegen in\njedem Klima und jeder Region zurecht.',
		],
		[Language.Es]: [
			'Cuando recibe el ataque de un Pokémon pájaro,\nexpulsa unas escamas negras que provocan parálisis\nsi se entra en contacto con ellas.',
			'Gracias al polvo de escamas que lo recubre y regula\nsu temperatura, puede vivir en cualquier región, sin\nimportar las características del terreno o el clima.',
			'Cuando recibe el ataque de un Pokémon pájaro, expulsa unas\nescamas negras que provocan parálisis si se entra en contacto\ncon ellas.',
			'Gracias al polvo de escamas que lo recubre y regula su\ntemperatura, puede vivir en cualquier región, sin importar\nlas características del terreno o el clima.',
		],
		[Language.It]: [
			'Se assalito da Pokémon uccello, si difende emettendo\nvelenose scaglie nere che paralizzano al minimo\ncontatto.',
			'La sua temperatura corporea è regolata dalle scaglie\nche ne ricoprono il corpo. Grazie ad esse può adattarsi\ne sopravvivere in qualsiasi condizione climatica.',
			'Se assalito da Pokémon uccello, si difende emettendo\nvelenose scaglie nere che paralizzano al minimo contatto.',
			'La sua temperatura corporea è regolata dalle scaglie che ne\nricoprono il corpo. Grazie ad esse può adattarsi e sopravvivere\nin qualsiasi condizione climatica.',
		],
		[Language.En]: [
			'When under attack from bird Pokémon,\nit spews a poisonous black powder\nthat causes paralysis on contact.',
			'The powder that covers its body\nregulates its temperature, so it\ncan live in any region or climate.',
		],
		[Language.Ja]: [
			'とりポケモンに　襲われると\n黒い　粉を　まき散らす。\n触れると　マヒする　毒の粉だ。',
			'体を　覆う　粉が　体温を\n調節するので　どんな　気候や　風土の\n地域でも　暮らせる。',
		],
	},
	[
		[
			Variety.Scatterbug,
			40,
			3,
			25,
			[Type.Bug],
			{
				frontDefault: 'a7f567bf.png',
				frontShiny: '5e5bf233.png',
			},
			{
				[Stat.Hp]: {baseStat: 38},
				[Stat.Attack]: {baseStat: 35},
				[Stat.Defense]: {baseStat: 40, effort: 1},
				[Stat.SpecialAttack]: {baseStat: 27},
				[Stat.SpecialDefense]: {baseStat: 25},
				[Stat.Speed]: {baseStat: 35},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.StringShot,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.PoisonPowder,
					Move.RagePowder,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.StunSpore,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BugBite,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.BugBite,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.StruggleBug,
					Move.TeraBlast,
					Move.Pounce,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.StringShot,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.PoisonPowder,
					Move.RagePowder,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.StunSpore,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Egg,
					Move.StunSpore,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BugBite,
					15,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Tutor,
					Move.BugBite,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.StringShot,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.PoisonPowder,
					Move.StunSpore,
					Move.RagePowder,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.StunSpore,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BugBite,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.StringShot,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.PoisonPowder,
					Move.StunSpore,
					Move.RagePowder,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.StunSpore,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BugBite,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Tutor,
					Move.BugBite,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.StringShot,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.PoisonPowder,
					Move.StunSpore,
					Move.RagePowder,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.StunSpore,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BugBite,
					15,
				),
			].flat(),
			[
				{
					ability: Ability.ShieldDust,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.CompoundEyes,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.FriendGuard,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.ScatterbugIcySnow,
					PokemonFormBits.Default,
					{
						frontDefault: 'a7f567bf.png',
						frontShiny: '5e5bf233.png',
					},
					[Type.Bug],
					VersionGroup.XY,
					{},
					{},
					'icy-snow',
				],
				[
					Form.ScatterbugPolar,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'polar',
				],
				[
					Form.ScatterbugTundra,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'tundra',
				],
				[
					Form.ScatterbugContinental,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'continental',
				],
				[
					Form.ScatterbugGarden,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'garden',
				],
				[
					Form.ScatterbugElegant,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'elegant',
				],
				[
					Form.ScatterbugMeadow,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'meadow',
				],
				[
					Form.ScatterbugModern,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'modern',
				],
				[
					Form.ScatterbugMarine,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'marine',
				],
				[
					Form.ScatterbugArchipelago,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'archipelago',
				],
				[
					Form.ScatterbugHighPlains,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'high-plains',
				],
				[
					Form.ScatterbugSandstorm,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'sandstorm',
				],
				[
					Form.ScatterbugRiver,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'river',
				],
				[
					Form.ScatterbugMonsoon,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'monsoon',
				],
				[
					Form.ScatterbugSavanna,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'savanna',
				],
				[
					Form.ScatterbugSun,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'sun',
				],
				[
					Form.ScatterbugOcean,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'ocean',
				],
				[
					Form.ScatterbugJungle,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'jungle',
				],
				[
					Form.ScatterbugFancy,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'fancy',
				],
				[
					Form.ScatterbugPokeBall,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'poke-ball',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Spewpa,
	70,
	120,
	Color.Black,
	[EggGroup.Bug],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	15,
	GrowthRate.Medium,
	Shape.Blob,
	{
		[Language.JaHrkt]: ['コフーライ'],
		[Language.Roomaji]: ['Kofuurai'],
		[Language.Ko]: ['분떠도리'],
		[Language.ZhHant]: ['粉蝶蛹'],
		[Language.Fr]: ['Pérégrain'],
		[Language.De]: ['Puponcho'],
		[Language.Es]: ['Spewpa'],
		[Language.It]: ['Spewpa'],
		[Language.En]: ['Spewpa'],
		[Language.Ja]: ['コフーライ'],
		[Language.ZhHans]: ['粉蝶蛹'],
	},
	{
		[Language.JaHrkt]: ['こなふきポケモン'],
		[Language.Ko]: ['가루뿜기포켓몬'],
		[Language.ZhHant]: ['噴粉寶可夢'],
		[Language.Fr]: ['Pokémon Exhalécaille'],
		[Language.De]: ['Puderinsekt'],
		[Language.Es]: ['Pokémon Tiraescamas'],
		[Language.It]: ['Pokémon Tirascaglie'],
		[Language.En]: ['Scatterdust Pokémon'],
		[Language.Ja]: ['こなふきポケモン'],
		[Language.ZhHans]: ['喷粉宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'しげみの　かげに　かくれて　くらす。\nてきに　おそわれると　からだの　けを\nするどく　さかだてて　いかくする。',
			'かたい　からだは　とりポケモンの\nクチバシでも　キズひとつ　つかない。\nコナを　まきちらして　ぼうせんする。',
		],
		[Language.Ko]: [
			'수풀의 그늘에 숨어 산다.\n적에게 공격당하면 몸의 털을\n뾰족하게 곤두세우며 위협한다.',
			'단단한 몸은 새포켓몬의\n부리로도 상처 하나 입지 않는다.\n가루를 뿌려서 방어한다.',
		],
		[Language.Fr]: [
			'Vit caché sous le couvert des buissons.\nPoursuivi par un ennemi, il tente de l’intimider\nen hérissant les poils qui lui couvrent le corps.',
			'Même les becs acérés des Pokémon Oiseaux ne\nparviennent pas à meurtrir son corps très dur.\nIl se défend en crachant de la poudre.',
			'Vit caché sous le couvert des buissons. Poursuivi par\nun ennemi, il tente de l’intimider en hérissant les poils\nqui lui couvrent le corps.',
			'Même les becs acérés des Pokémon Oiseaux ne parviennent\npas à meurtrir son corps très dur. Il se défend en crachant\nde la poudre.',
		],
		[Language.De]: [
			'Es lebt versteckt im schattigen Dickicht. Wird es\nvon einem Feind angegriffen, stellt es sein Fell\nzur Abschreckung zu scharfen Spitzen auf.',
			'Der Schnabel eines Vogel-Pokémon kann seinem\nharten Körper keinen Kratzer zufügen. Es verteidigt\nsich, indem es Puder spuckt.',
			'Es lebt versteckt im schattigen Dickicht. Wird es von einem\nFeind angegriffen, stellt es sein Fell zur Abschreckung zu\nscharfen Spitzen auf.',
			'Der Schnabel eines Vogel-Pokémon kann seinem harten\nKörper keinen Kratzer zufügen. Es verteidigt sich, indem es\nPuder spuckt.',
		],
		[Language.Es]: [
			'Habita en la sombra de la espesura. Si percibe alguna\namenaza, su pelaje se eriza y se vuelve muy afilado\npara así intimidar al enemigo.',
			'Su cuerpo es tan duro que ni siquiera los Pokémon\npájaro pueden hacerle el menor rasguño con sus\npicos. Esparce polvo de escamas para defenderse.',
			'Habita en la sombra de la espesura. Si percibe alguna\namenaza, su pelaje se eriza y se vuelve muy afilado para\nasí intimidar al enemigo.',
			'Su cuerpo es tan duro que ni siquiera los Pokémon pájaro\npueden hacerle el menor rasguño con sus picos. Esparce\npolvo de escamas para defenderse.',
		],
		[Language.It]: [
			'Vive nascosto nella boscaglia. Se attaccato, minaccia\ni nemici rizzando il pelo.',
			'Il becco dei Pokémon uccello non può neppure scalfire\nil suo durissimo corpo. Si difende spargendo scaglie.',
			'Vive nascosto nella boscaglia. Se attaccato, minaccia i nemici\nrizzando il pelo.',
			'Il becco dei Pokémon uccello non può neppure scalfire il suo\ndurissimo corpo. Si difende spargendo scaglie.',
		],
		[Language.En]: [
			'It lives hidden within thicket shadows.\nWhen predators attack, it quickly bristles the fur\ncovering its body in an effort to threaten them.',
			'The beaks of bird Pokémon can’t begin\nto scratch its stalwart body.\nTo defend itself, it spews powder.',
		],
		[Language.Ja]: [
			'しげみの　陰に　隠れて　暮らす。\n敵に　襲われると　体の　毛を\n鋭く　逆立てて　威嚇する。',
			'硬い　体は　とりポケモンの\nクチバシでも　傷ひとつ　つかない。\n粉を　まき散らして　防戦する。',
		],
	},
	[
		[
			Variety.Spewpa,
			75,
			3,
			84,
			[Type.Bug],
			{
				frontDefault: 'e8a5517c.png',
				frontShiny: 'eca85c79.png',
				backDefault: 'b13b2a95.png',
				backShiny: 'c73cf662.png',
			},
			{
				[Stat.Hp]: {baseStat: 45},
				[Stat.Attack]: {baseStat: 22},
				[Stat.Defense]: {baseStat: 60, effort: 2},
				[Stat.SpecialAttack]: {baseStat: 27},
				[Stat.SpecialDefense]: {baseStat: 30},
				[Stat.Speed]: {baseStat: 29},
			},
			{},
			[
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Harden,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Protect,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Protect,
					Move.StruggleBug,
					Move.TeraBlast,
					Move.Pounce,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IronDefense,
					Move.BugBite,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Harden,
					1,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Protect,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					1,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Machine,
					Move.Protect,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.IronDefense,
					Move.BugBite,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Tutor,
					Move.Electroweb,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Harden,
					Move.Protect,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Protect,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Machine,
					Move.Protect,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Harden,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					9,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Protect,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.IronDefense,
					Move.BugBite,
					Move.Electroweb,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Harden,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Machine,
					Move.Protect,
				),
			].flat(),
			[
				{
					ability: Ability.ShedSkin,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.FriendGuard,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.SpewpaIcySnow,
					PokemonFormBits.Default,
					{
						frontDefault: 'e8a5517c.png',
						frontShiny: 'eca85c79.png',
						backDefault: 'b13b2a95.png',
						backShiny: 'c73cf662.png',
					},
					[Type.Bug],
					VersionGroup.XY,
					{},
					{},
					'icy-snow',
				],
				[
					Form.SpewpaPolar,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'polar',
				],
				[
					Form.SpewpaTundra,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'tundra',
				],
				[
					Form.SpewpaContinental,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'continental',
				],
				[
					Form.SpewpaGarden,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'garden',
				],
				[
					Form.SpewpaElegant,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'elegant',
				],
				[
					Form.SpewpaMeadow,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'meadow',
				],
				[
					Form.SpewpaModern,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'modern',
				],
				[
					Form.SpewpaMarine,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'marine',
				],
				[
					Form.SpewpaArchipelago,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'archipelago',
				],
				[
					Form.SpewpaHighPlains,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'high-plains',
				],
				[
					Form.SpewpaSandstorm,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'sandstorm',
				],
				[
					Form.SpewpaRiver,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'river',
				],
				[
					Form.SpewpaMonsoon,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'monsoon',
				],
				[
					Form.SpewpaSavanna,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'savanna',
				],
				[
					Form.SpewpaSun,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'sun',
				],
				[
					Form.SpewpaOcean,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'ocean',
				],
				[
					Form.SpewpaJungle,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'jungle',
				],
				[
					Form.SpewpaFancy,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'fancy',
				],
				[
					Form.SpewpaPokeBall,
					PokemonFormBits.None,
					{},
					[Type.Bug],
					VersionGroup.UltraSunUltraMoon,
					{},
					{},
					'poke-ball',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Vivillon,
	70,
	45,
	Color.White,
	[EggGroup.Bug],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	15,
	GrowthRate.Medium,
	Shape.BugWings,
	{
		[Language.JaHrkt]: ['ビビヨン'],
		[Language.Roomaji]: ['Viviyon'],
		[Language.Ko]: ['비비용'],
		[Language.ZhHant]: ['彩粉蝶'],
		[Language.Fr]: ['Prismillon'],
		[Language.De]: ['Vivillon'],
		[Language.Es]: ['Vivillon'],
		[Language.It]: ['Vivillon'],
		[Language.En]: ['Vivillon'],
		[Language.Ja]: ['ビビヨン'],
		[Language.ZhHans]: ['彩粉蝶'],
	},
	{
		[Language.JaHrkt]: ['りんぷんポケモン'],
		[Language.Ko]: ['인분포켓몬'],
		[Language.ZhHant]: ['鱗粉寶可夢'],
		[Language.Fr]: ['Pokémon Lépidécaille'],
		[Language.De]: ['Flügelstaub'],
		[Language.Es]: ['Pokémon Escamaposa'],
		[Language.It]: ['Pokémon Farfascaglia'],
		[Language.En]: ['Scale Pokémon'],
		[Language.Ja]: ['りんぷんポケモン'],
		[Language.ZhHans]: ['鳞粉宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'せかいには　さまざまな　はねもようの\nビビヨンがいる。すんでいる　とちの\nきこうが　えいきょうしているようだ。',
			'すんでいる　きこうや　ふうどによって\nはねの　もようが　ちがう　ポケモン。\nいろあざやかな　りんぷんを　まく。',
		],
		[Language.Ko]: [
			'세계에는 다양한 무늬의 날개를 가진\n비비용이 있다. 살고 있는 곳의\n기후에 영향을 받는 것 같다.',
			'살고 있는 장소의 기후나 풍토에 따라\n날개의 모양이 다른 포켓몬이다.\n화려한 색의 날개 가루를 뿌린다.',
		],
		[Language.Fr]: [
			'Les ailes des Prismillon arborent différents motifs\nen fonction de leur aire d’origine. Il est possible que\nle climat y soit pour quelque chose.',
			'Selon le climat de sa région d’origine, les motifs\nde ses ailes sont différents. Il sème des écailles\naux couleurs vives.',
			'Les ailes des Prismillon arborent différents motifs en fonction\nde leur aire d’origine. Il est possible que le climat y soit\npour quelque chose.',
			'Selon le climat de sa région d’origine, les motifs de ses ailes\nsont différents. Il sème des écailles aux couleurs vives.',
		],
		[Language.De]: [
			'Vivillon kommen weltweit mit den unterschiedlichsten\nMusterungen vor. Das Klima ihres Habitats hat Einfluss\nauf ihre Flügelmusterung.',
			'Je nach Klima und geographischer Beschaffenheit\nseines Habitats ändert sich die Musterung seiner\nFlügel. Es verstreut bunten Flügelstaub.',
			'Je nach Klima und geographischer Beschaffenheit seines\nHabitats ändert sich die Musterung seiner Flügel. Es verstreut\nbunten Flügelstaub.',
		],
		[Language.Es]: [
			'En el mundo existen Vivillon con diferentes motivos en\nsus alas. El clima de cada región influye en sus rasgos.',
			'Las alas cambian de motivo según el clima y las\ncaracterísticas naturales del terreno que habite.\nEsparce escamas de lo más coloridas.',
			'En el mundo existen Vivillon con diferentes motivos en sus\nalas. El clima de cada región influye en sus rasgos.',
			'Las alas cambian de motivo según el clima y las características\nnaturales del terreno que habite. Esparce escamas de lo más\ncoloridas.',
		],
		[Language.It]: [
			'Nel mondo ne esistono diverse varietà che si\ndifferenziano per i motivi sulle ali. Sembra che\nquesti dipendano dal clima del loro habitat.',
			'I motivi sulle sue ali cambiano a seconda della zona\ne del clima in cui vive. Dal suo corpo si staccano\nscaglie dai colori vivaci.',
			'Nel mondo ne esistono diverse varietà che si differenziano\nper i motivi sulle ali. Sembra che questi dipendano dal clima\ndel loro habitat.',
			'I motivi sulle sue ali cambiano a seconda della zona e del\nclima in cui vive. Dal suo corpo si staccano scaglie dai\ncolori vivaci.',
		],
		[Language.En]: [
			'Vivillon with many different patterns are\nfound all over the world. These patterns\nare affected by the climate of their habitat.',
			'The patterns on this Pokémon’s wings\ndepend on the climate and topography\nof its habitat. It scatters colorful scales.',
		],
		[Language.Ja]: [
			'世界には　さまざまな　羽模様の\nビビヨンがいる。住んでいる　土地の\n気候が　影響しているようだ。',
			'住んでいる　気候や　風土によって\n羽の　模様が　違う　ポケモン。\n色鮮やかな　りんぷんを　まく。',
		],
	},
	[
		[
			Variety.Vivillon,
			185,
			12,
			170,
			[Type.Bug, Type.Flying],
			{
				frontDefault: 'b5b3a5a7.png',
				frontShiny: '542b9038.png',
			},
			{
				[Stat.Hp]: {baseStat: 80, effort: 1},
				[Stat.Attack]: {baseStat: 52},
				[Stat.Defense]: {baseStat: 50},
				[Stat.SpecialAttack]: {baseStat: 90, effort: 1},
				[Stat.SpecialDefense]: {baseStat: 50},
				[Stat.Speed]: {baseStat: 89, effort: 1},
			},
			{},
			[
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Gust,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Supersonic,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Psybeam,
					Move.ConfuseRay,
					Move.Swift,
					Move.Endure,
					Move.WeatherBall,
					Move.AirCutter,
					Move.IronDefense,
					Move.AirSlash,
					Move.BugBuzz,
					Move.Hurricane,
					Move.DrainingKiss,
					Move.PollenPuff,
					Move.SkitterSmack,
					Move.TeraBlast,
					Move.Pounce,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.UTurn,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.Acrobatics,
					Move.StruggleBug,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.PoisonPowder,
					Move.StunSpore,
					Move.SleepPowder,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					12,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.GigaDrain,
					Move.Tailwind,
					Move.BugBite,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BugBuzz,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.QuiverDance,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.StruggleBug,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					25,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Gust,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Gust,
					Move.Powder,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Supersonic,
					21,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.UTurn,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.Acrobatics,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.PoisonPowder,
					Move.StunSpore,
					Move.SleepPowder,
					Move.StruggleBug,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.PsychUp,
					Move.AerialAce,
					Move.CalmMind,
					Move.Roost,
					Move.Round,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					12,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Endeavor,
					Move.SignalBeam,
					Move.Electroweb,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GigaDrain,
					Move.Tailwind,
					Move.Defog,
					Move.BugBite,
					Move.LaserFocus,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					31,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BugBuzz,
					35,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.QuiverDance,
					45,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					50,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Powder,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Gust,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Gust,
					Move.PoisonPowder,
					Move.StunSpore,
					Move.SleepPowder,
					Move.StruggleBug,
					Move.Powder,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Supersonic,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.AerialAce,
					Move.CalmMind,
					Move.Roost,
					Move.UTurn,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.Round,
					Move.Acrobatics,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					41,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BugBuzz,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.QuiverDance,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					50,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Powder,
					55,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Gust,
					Move.PoisonPowder,
					Move.StunSpore,
					Move.SleepPowder,
					Move.Powder,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Supersonic,
					21,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.SecretPower,
					Move.AerialAce,
					Move.CalmMind,
					Move.Roost,
					Move.UTurn,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.Round,
					Move.Acrobatics,
					Move.StruggleBug,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Flash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.GigaDrain,
					Move.Endeavor,
					Move.SignalBeam,
					Move.Tailwind,
					Move.BugBite,
					Move.Electroweb,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					41,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BugBuzz,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.QuiverDance,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.StruggleBug,
					12,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					50,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Powder,
					55,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Gust,
					Move.PoisonPowder,
					Move.StunSpore,
					Move.SleepPowder,
					Move.LightScreen,
					Move.Powder,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Supersonic,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.DreamEater,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.AerialAce,
					Move.CalmMind,
					Move.Roost,
					Move.UTurn,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.Round,
					Move.Acrobatics,
					Move.StruggleBug,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BugBuzz,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.QuiverDance,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.StruggleBug,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Powder,
					55,
				),
			].flat(),
			[
				{
					ability: Ability.ShieldDust,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.CompoundEyes,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.FriendGuard,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.VivillonMeadow,
					PokemonFormBits.None,
					{
						frontDefault: 'b5b3a5a7.png',
						frontShiny: '186ec60a.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Floraison'],
						[Language.De]: ['Vivillon (Blumen)'],
						[Language.En]: ['Meadow Vivillon'],
					},
					{
						[Language.JaHrkt]: ['はなぞののもよう'],
						[Language.Ko]: ['화원의 모양'],
						[Language.Fr]: ['Motif Floraison'],
						[Language.De]: ['Blumenmeermuster'],
						[Language.Es]: ['Motivo Floral'],
						[Language.It]: ['Motivo Giardinfiore'],
						[Language.En]: ['Meadow Pattern'],
					},
					'meadow',
				],
				[
					Form.VivillonIcySnow,
					PokemonFormBits.Default,
					{
						frontDefault: 'b5b3a5a7.png',
						frontShiny: '542b9038.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Blizzard'],
						[Language.De]: ['Vivillon (Frost)'],
						[Language.En]: ['Icy Snow Vivillon'],
					},
					{
						[Language.JaHrkt]: ['ひょうせつのもよう'],
						[Language.Ko]: ['빙설의 모양'],
						[Language.Fr]: ['Motif Blizzard'],
						[Language.De]: ['Frostmuster'],
						[Language.Es]: ['Motivo Polar'],
						[Language.It]: ['Motivo Nevi Perenni'],
						[Language.En]: ['Icy Snow Pattern'],
					},
					'icy-snow',
				],
				[
					Form.VivillonPolar,
					PokemonFormBits.None,
					{
						frontDefault: 'ba917499.png',
						frontShiny: '64eb1949.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Banquise'],
						[Language.De]: ['Vivillon (Schnee)'],
						[Language.En]: ['Polar Vivillon'],
					},
					{
						[Language.JaHrkt]: ['ゆきぐにのもよう'],
						[Language.Ko]: ['설국의 모양'],
						[Language.Fr]: ['Motif Banquise'],
						[Language.De]: ['Schneefeldmuster'],
						[Language.Es]: ['Motivo Taiga'],
						[Language.It]: ['Motivo Nordico'],
						[Language.En]: ['Polar Pattern'],
					},
					'polar',
				],
				[
					Form.VivillonTundra,
					PokemonFormBits.None,
					{
						frontDefault: '9d82f52f.png',
						frontShiny: '52ead046.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Glace'],
						[Language.De]: ['Vivillion (Flocken)'],
						[Language.En]: ['Tundra Vivillon'],
					},
					{
						[Language.JaHrkt]: ['せつげんのもよう'],
						[Language.Ko]: ['설원의 모양'],
						[Language.Fr]: ['Motif Glace'],
						[Language.De]: ['Flockenmuster'],
						[Language.Es]: ['Motivo Tundra'],
						[Language.It]: ['Motivo Manto di Neve'],
						[Language.En]: ['Tundra Pattern'],
					},
					'tundra',
				],
				[
					Form.VivillonContinental,
					PokemonFormBits.None,
					{
						frontDefault: '0df20fc3.png',
						frontShiny: 'e59ad34d.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Continent'],
						[Language.De]: ['Vivillion (Kontinental)'],
						[Language.En]: ['Continental Vivillon'],
					},
					{
						[Language.JaHrkt]: ['たいりくのもよう'],
						[Language.Ko]: ['대륙의 모양'],
						[Language.Fr]: ['Motif Continent'],
						[Language.De]: ['Kontinentalmuster'],
						[Language.Es]: ['Motivo Continental'],
						[Language.It]: ['Motivo Continentale'],
						[Language.En]: ['Continental Pattern'],
					},
					'continental',
				],
				[
					Form.VivillonGarden,
					PokemonFormBits.None,
					{
						frontDefault: 'e977454c.png',
						frontShiny: '30e47ac2.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Verdure'],
						[Language.De]: ['Vivillion (Ziergatten)'],
						[Language.En]: ['Garden Vivillon'],
					},
					{
						[Language.JaHrkt]: ['ていえんのもよう'],
						[Language.Ko]: ['정원의 모양'],
						[Language.Fr]: ['Motif Verdure'],
						[Language.De]: ['Ziergartenmuster'],
						[Language.Es]: ['Motivo Vergel'],
						[Language.It]: ['Motivo Prato'],
						[Language.En]: ['Garden Pattern'],
					},
					'garden',
				],
				[
					Form.VivillonElegant,
					PokemonFormBits.None,
					{
						frontDefault: '23e23f09.png',
						frontShiny: 'f7b33eec.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Monarchie'],
						[Language.De]: ['Vivillion (Prunk)'],
						[Language.En]: ['Elegant Vivillon'],
					},
					{
						[Language.JaHrkt]: ['みやびなもよう'],
						[Language.Ko]: ['우아한 모양'],
						[Language.Fr]: ['Motif Monarchie'],
						[Language.De]: ['Prunkmuster'],
						[Language.Es]: ['Motivo Oriental'],
						[Language.It]: ['Motivo Eleganza'],
						[Language.En]: ['Elegant Pattern'],
					},
					'elegant',
				],
				[
					Form.VivillonModern,
					PokemonFormBits.None,
					{
						frontDefault: '3508afea.png',
						frontShiny: 'f9ab0626.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Métropole'],
						[Language.De]: ['Vivillion (Innovation)'],
						[Language.En]: ['Modern Vivillon'],
					},
					{
						[Language.JaHrkt]: ['モダンなもよう'],
						[Language.Ko]: ['모던한 모양'],
						[Language.Fr]: ['Motif Métropole'],
						[Language.De]: ['Innovationsmuster'],
						[Language.Es]: ['Motivo Moderno'],
						[Language.It]: ['Motivo Trendy'],
						[Language.En]: ['Modern Pattern'],
					},
					'modern',
				],
				[
					Form.VivillonMarine,
					PokemonFormBits.None,
					{
						frontDefault: '3be67022.png',
						frontShiny: '2481ef5a.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Rivage'],
						[Language.De]: ['Vivillion (Aquamarin)'],
						[Language.En]: ['Marine Vivillon'],
					},
					{
						[Language.JaHrkt]: ['マリンのもよう'],
						[Language.Ko]: ['마린의 모양'],
						[Language.Fr]: ['Motif Rivage'],
						[Language.De]: ['Aquamarinmuster'],
						[Language.Es]: ['Motivo Marino'],
						[Language.It]: ['Motivo Marino'],
						[Language.En]: ['Marine Pattern'],
					},
					'marine',
				],
				[
					Form.VivillonArchipelago,
					PokemonFormBits.None,
					{
						frontDefault: '0dd96b33.png',
						frontShiny: 'de78ffb7.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Archipel'],
						[Language.De]: ['Vivillion (Archipel)'],
						[Language.En]: ['Archipelago Vivillon'],
					},
					{
						[Language.JaHrkt]: ['ぐんとうのもよう'],
						[Language.Ko]: ['군도의 모양'],
						[Language.Fr]: ['Motif Archipel'],
						[Language.De]: ['Archipelmuster'],
						[Language.Es]: ['Motivo Isleño'],
						[Language.It]: ['Motivo Arcipelago'],
						[Language.En]: ['Archipelago Pattern'],
					},
					'archipelago',
				],
				[
					Form.VivillonHighPlains,
					PokemonFormBits.None,
					{
						frontDefault: '453f8409.png',
						frontShiny: '3c374009.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Sécheresse'],
						[Language.De]: ['Vivillion (Dürre)'],
						[Language.En]: ['High Plains Vivillon'],
					},
					{
						[Language.JaHrkt]: ['こうやのもよう'],
						[Language.Ko]: ['황야의 모양'],
						[Language.Fr]: ['Motif Sécheresse'],
						[Language.De]: ['Dürremuster'],
						[Language.Es]: ['Motivo Estepa'],
						[Language.It]: ['Motivo Deserto'],
						[Language.En]: ['High Plains Pattern'],
					},
					'high-plains',
				],
				[
					Form.VivillonSandstorm,
					PokemonFormBits.None,
					{
						frontDefault: 'bfafdf6f.png',
						frontShiny: 'd142cf89.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Sable'],
						[Language.De]: ['Vivillion (Sand)'],
						[Language.En]: ['Sandstorm Vivillon'],
					},
					{
						[Language.JaHrkt]: ['さじんのもよう'],
						[Language.Ko]: ['사진의 모양'],
						[Language.Fr]: ['Motif Sable'],
						[Language.De]: ['Sandmuster'],
						[Language.Es]: ['Motivo Desierto'],
						[Language.It]: ['Motivo Sabbia'],
						[Language.En]: ['Sandstorm Pattern'],
					},
					'sandstorm',
				],
				[
					Form.VivillonRiver,
					PokemonFormBits.None,
					{
						frontDefault: '8d5014b0.png',
						frontShiny: '03c341b7.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Delta'],
						[Language.De]: ['Vivillion (Flussdelta)'],
						[Language.En]: ['River Vivillon'],
					},
					{
						[Language.JaHrkt]: ['たいがのもよう'],
						[Language.Ko]: ['대하의 모양'],
						[Language.Fr]: ['Motif Delta'],
						[Language.De]: ['Flussdeltamuster'],
						[Language.Es]: ['Motivo Oasis'],
						[Language.It]: ['Motivo Fluviale'],
						[Language.En]: ['River Pattern'],
					},
					'river',
				],
				[
					Form.VivillonMonsoon,
					PokemonFormBits.None,
					{
						frontDefault: '2e54cc68.png',
						frontShiny: 'd8ad359e.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Cyclone'],
						[Language.De]: ['Vivillion (Monsun)'],
						[Language.En]: ['Monsoon Vivillon'],
					},
					{
						[Language.JaHrkt]: ['スコールのもよう'],
						[Language.Ko]: ['스콜의 모양'],
						[Language.Fr]: ['Motif Cyclone'],
						[Language.De]: ['Monsunmuster'],
						[Language.Es]: ['Motivo Monzón'],
						[Language.It]: ['Motivo Pluviale'],
						[Language.En]: ['Monsoon Pattern'],
					},
					'monsoon',
				],
				[
					Form.VivillonSavanna,
					PokemonFormBits.None,
					{
						frontDefault: 'a4c6c72c.png',
						frontShiny: 'dd583cff.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Mangrove'],
						[Language.De]: ['Vivillion (Savanne)'],
						[Language.En]: ['Savanna Vivillon'],
					},
					{
						[Language.JaHrkt]: ['サバンナのもよう'],
						[Language.Ko]: ['사바나의 모양'],
						[Language.Fr]: ['Motif Mangrove'],
						[Language.De]: ['Savannenmuster'],
						[Language.Es]: ['Motivo Pantano'],
						[Language.It]: ['Motivo Savana'],
						[Language.En]: ['Savanna Pattern'],
					},
					'savanna',
				],
				[
					Form.VivillonSun,
					PokemonFormBits.None,
					{
						frontDefault: '36e35126.png',
						frontShiny: 'aae01e97.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Zénith'],
						[Language.De]: ['Vivillion (Sonne)'],
						[Language.En]: ['Sun Vivillon'],
					},
					{
						[Language.JaHrkt]: ['たいようのもよう'],
						[Language.Ko]: ['태양의 모양'],
						[Language.Fr]: ['Motif Zénith'],
						[Language.De]: ['Sonnenmuster'],
						[Language.Es]: ['Motivo Solar'],
						[Language.It]: ['Motivo Solare'],
						[Language.En]: ['Sun Pattern'],
					},
					'sun',
				],
				[
					Form.VivillonOcean,
					PokemonFormBits.None,
					{
						frontDefault: 'e9810fc5.png',
						frontShiny: '5d41c8a2.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Soleil Levant'],
						[Language.De]: ['Vivillion (Ozean)'],
						[Language.En]: ['Ocean Vivillon'],
					},
					{
						[Language.JaHrkt]: ['オーシャンのもよう'],
						[Language.Ko]: ['오션의 모양'],
						[Language.Fr]: ['Motif Soleil Levant'],
						[Language.De]: ['Ozeanmuster'],
						[Language.Es]: ['Motivo Océano'],
						[Language.It]: ['Motivo Oceanico'],
						[Language.En]: ['Ocean Pattern'],
					},
					'ocean',
				],
				[
					Form.VivillonJungle,
					PokemonFormBits.None,
					{
						frontDefault: '90df74f1.png',
						frontShiny: 'ba36d0e3.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Jungle'],
						[Language.De]: ['Vivillion (Dschungel)'],
						[Language.En]: ['Jungle Vivillon'],
					},
					{
						[Language.JaHrkt]: ['ジャングルのもよう'],
						[Language.Ko]: ['정글의 모양'],
						[Language.Fr]: ['Motif Jungle'],
						[Language.De]: ['Dschungelmuster'],
						[Language.Es]: ['Motivo Jungla'],
						[Language.It]: ['Motivo Giungla'],
						[Language.En]: ['Jungle Pattern'],
					},
					'jungle',
				],
				[
					Form.VivillonFancy,
					PokemonFormBits.None,
					{
						frontDefault: '9e350535.png',
						frontShiny: '061f98a0.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Fantaisie'],
						[Language.De]: ['Vivillion (Fantasie)'],
						[Language.En]: ['Fancy Vivillon'],
					},
					{
						[Language.JaHrkt]: ['ファンシーなもよう'],
						[Language.Ko]: ['팬시한 모양'],
						[Language.Fr]: ['Motif Fantaisie'],
						[Language.De]: ['Fantasiemuster'],
						[Language.Es]: ['Motivo Fantasía'],
						[Language.It]: ['Motivo Sbarazzino'],
						[Language.En]: ['Fancy Pattern'],
					},
					'fancy',
				],
				[
					Form.VivillonPokeBall,
					PokemonFormBits.None,
					{
						frontDefault: 'f77a2ae3.png',
						frontShiny: '186b0562.png',
					},
					[Type.Bug, Type.Flying],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Prismillon Poké Ball'],
						[Language.De]: ['Vivillion (Pokeball)'],
						[Language.En]: ['Poké Ball Vivillon'],
					},
					{
						[Language.JaHrkt]: ['ボールのもよう'],
						[Language.Ko]: ['볼의 모양'],
						[Language.Fr]: ['Motif Poké Ball'],
						[Language.De]: ['Pokéball-Muster'],
						[Language.Es]: ['Motivo Poké Ball'],
						[Language.It]: ['Motivo Poké Ball'],
						[Language.En]: ['Poké Ball Pattern'],
					},
					'poke-ball',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Litleo,
	70,
	220,
	Color.Brown,
	[EggGroup.Ground],
	7,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.MediumSlow,
	Shape.Quadruped,
	{
		[Language.JaHrkt]: ['シシコ'],
		[Language.Roomaji]: ['Shishiko'],
		[Language.Ko]: ['레오꼬'],
		[Language.ZhHant]: ['小獅獅'],
		[Language.Fr]: ['Hélionceau'],
		[Language.De]: ['Leufeo'],
		[Language.Es]: ['Litleo'],
		[Language.It]: ['Litleo'],
		[Language.En]: ['Litleo'],
		[Language.Ja]: ['シシコ'],
		[Language.ZhHans]: ['小狮狮'],
	},
	{
		[Language.JaHrkt]: ['わかじしポケモン'],
		[Language.Ko]: ['어린사자포켓몬'],
		[Language.ZhHant]: ['幼獅寶可夢'],
		[Language.Fr]: ['Pokémon Lionceau'],
		[Language.De]: ['Junglöwe'],
		[Language.Es]: ['Pokémon Leoncito'],
		[Language.It]: ['Pokémon Leoncino'],
		[Language.En]: ['Lion Cub Pokémon'],
		[Language.Ja]: ['わかじしポケモン'],
		[Language.ZhHans]: ['幼狮宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'つよい　あいてに　たちむかうときほど\nたてがみが　こうおんになり\nぜんしんに　ちからが　みなぎるのだ。',
			'つよくなるため　むれを　はなれて\n１ぴきで　せいかつするようになる。\nけっきさかんで　けんかっぱやい。',
			'おさないころは　なかまと　むれている。\nじぶんで　えものを　かるようになると\nむれから　おいだされ　ひとりだちする。',
			'けっきさかんで　こうきしんおうせい。\nおこったり　たたかいが　はじまると\nみじかい　たてがみは　あつくなる。',
		],
		[Language.Ko]: [
			'강한 상대에게 맞설 때일수록\n갈기의 온도가 높아지고\n전신에 힘이 넘쳐난다.',
			'강해지기 위해 무리를 벗어나\n홀로 생활하게 된다.\n혈기 왕성하여 쉽게 싸우려 든다.',
			'어릴 때는 동료와 무리를 이룬다.\n스스로 먹이를 사냥할 수 있게 되면\n무리에서 쫓겨나 독립한다.',
			'혈기가 왕성하고 호기심도 왕성하다.\n화가 나거나 싸움이 시작되면\n짧은 갈기가 뜨거워진다.',
		],
		[Language.Fr]: [
			'Plus l’adversaire auquel il est confronté est fort,\nplus la température de sa crinière augmente, l’énergie\ngénérée se diffusant alors dans tout son corps.',
			'Il n’hésite pas à quitter la horde et à mener une\nexistence solitaire pour mieux pouvoir s’entraîner.\nIl a le sang chaud et ne rechigne pas au combat.',
			'Il n’hésite pas à quitter la horde et à mener une existence\nsolitaire pour mieux pouvoir s’entraîner. Il a le sang chaud\net ne rechigne pas au combat.',
			'Il est élevé avec ses congénères au sein\nde la troupe, mais dès qu’il peut chasser seul,\nil doit partir et vivre par ses propres moyens.',
			'Il déborde d’énergie et de curiosité. Quand\nil se fâche ou qu’il s’apprête à se battre,\nsa courte crinière s’échauffe.',
		],
		[Language.De]: [
			'Je stärker sein Gegner ist, desto heißer wird seine\nMähne und umso kraftvoller wird es.',
			'Sie verlassen ihr Rudel schon sehr früh, um stärker\nzu werden und auf eigenen Pfoten zu stehen.\nSie sind sehr hitzköpfig und streitlustig.',
			'Je stärker sein Gegner ist, desto heißer wird seine Mähne\nund umso kraftvoller wird es.',
			'Bis es seine Beute selbst fangen kann, bewegt\nes sich in Rudeln. Danach wird es verstoßen und\nmuss auf eigenen Pfoten stehen.',
			'Ein sehr aktives und neugieriges Pokémon.\nBei Kampfbeginn und wenn es wütend ist,\nwird seine Mähne heiß.',
		],
		[Language.Es]: [
			'Cuanto más poderoso es el enemigo al que se\nenfrenta, más calor desprende su mechón y más\nenergía recorre todo su cuerpo.',
			'Se separa de su manada para hacerse más fuerte\ny aprender a valerse por sí mismo. Su excesiva\nfogosidad le hace saltar a la mínima.',
			'Cuanto más poderoso es el enemigo al que se enfrenta, más\ncalor desprende su mechón y más energía recorre todo su\ncuerpo.',
			'Se separa de su manada para hacerse más fuerte y aprender\na valerse por sí mismo. Su excesiva fogosidad le hace saltar\na la mínima.',
			'Mientras es solo una cría vive con el resto de la\nmanada, pero en cuanto aprende a cazar se\nsepara del grupo y se independiza.',
			'Este enérgico Pokémon es de naturaleza curiosa\ne inquieta y, tanto al comienzo de un combate\ncomo cuando se enoja, su crin prende fuego.',
		],
		[Language.It]: [
			'Più l’avversario che affronta è temibile, più la sua\ncriniera si scalda, aumentandone la forza.',
			'Si allontana dal gruppo e inizia una vita solitaria per\ndiventare più forte. Ha un carattere impetuoso ed è\nsempre pronto a gettarsi nella mischia.',
			'Più l’avversario che affronta è temibile, più la sua criniera\nsi scalda, aumentandone la forza.',
			'Si allontana dal gruppo e inizia una vita solitaria per diventare\npiù forte. Ha un carattere impetuoso ed è sempre pronto a\ngettarsi nella mischia.',
			'Da piccolo vive in gruppo con i suoi simili, ma\nappena impara a catturare da solo le sue prede\nviene allontanato e diventa indipendente.',
			'Ha una spiccata curiosità ed è pieno di energie.\nQuando si arrabbia o si appresta a lottare,\nla sua corta criniera si scalda.',
		],
		[Language.En]: [
			'The stronger the opponent it faces,\nthe more heat surges from its mane\nand the more power flows through its body.',
			'They set off on their own from their pride\nand live by themselves to become stronger.\nThese hot-blooded Pokémon are quick to fight.',
			'When they’re young, they live with a pride. Once\nthey’re able to hunt prey on their own, they’re\nkicked out and have to make their own way.',
			'This hot-blooded Pokémon is filled with\ncuriosity. When it gets angry or starts\nfighting, its short mane gets hot.',
		],
		[Language.Ja]: [
			'強い　相手に　立ち向かうときほど\nたてがみが　高温になり\n全身に　力が　みなぎるのだ。',
			'強くなるため　群れを　離れて\n１匹で　生活するようになる。\n血気盛んで　ケンカっ早い。',
			'幼い頃は　仲間と　群れている。\n自分で　獲物を　狩るようになると\n群れから　追い出され　独り立ちする。',
			'血気盛んで　好奇心旺盛。\n怒ったり　戦いが　始まると\n短い　たてがみは　熱くなる。',
		],
		[Language.ZhHant]: [
			'小時候會和夥伴們群居在一起，\n當成長到能自己捕捉獵物之後，\n就會被趕出群體獨立生活。',
			'血氣方剛且好奇心旺盛。\n當牠生氣或是開始戰鬥時，\n短短的鬃毛就會變熱。',
		],
		[Language.ZhHans]: [
			'小时候会与伙伴们群居生活。\n一旦自己能捕猎后，\n就会被赶出群体独立生活。',
			'血气方刚且好奇心旺盛。\n如果生气或是开始战斗，\n短短的鬃毛就会变热。',
		],
	},
	[
		[
			Variety.Litleo,
			74,
			6,
			135,
			[Type.Fire, Type.Normal],
			{
				frontDefault: '8044becb.png',
				frontShiny: '7a13fd39.png',
				backDefault: '13742523.png',
				backShiny: '43041f45.png',
			},
			{
				[Stat.Hp]: {baseStat: 62},
				[Stat.Attack]: {baseStat: 50},
				[Stat.Defense]: {baseStat: 58},
				[Stat.SpecialAttack]: {baseStat: 73, effort: 1},
				[Stat.SpecialDefense]: {baseStat: 54},
				[Stat.Speed]: {baseStat: 72},
			},
			{},
			[
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Headbutt,
					11,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.DoubleEdge,
					Move.FireSpin,
					Move.Swift,
					Move.MudSlap,
					Move.Endure,
					Move.Crunch,
					Move.FlareBlitz,
					Move.ThunderFang,
					Move.FireFang,
					Move.Acrobatics,
					Move.PsychicFangs,
					Move.TeraBlast,
					Move.Trailblaze,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Flamethrower,
					Move.SolarBeam,
					Move.Dig,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.FlameCharge,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Snarl,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.FireSpin,
					Move.Yawn,
					Move.Entrainment,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					39,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HeatWave,
					Move.HelpingHand,
					Move.Endeavor,
					Move.HyperVoice,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HyperVoice,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					50,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.FlareBlitz,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FireFang,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Incinerate,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.NobleRoar,
					15,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Headbutt,
					11,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Flamethrower,
					Move.SolarBeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.FlameCharge,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Snarl,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					36,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.FireSpin,
					Move.Yawn,
					Move.FlareBlitz,
					Move.Entrainment,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Payback,
					Move.DarkPulse,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					39,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HeatWave,
					Move.HelpingHand,
					Move.Endeavor,
					Move.Snatch,
					Move.HyperVoice,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Egg,
					Move.Snatch,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HyperVoice,
					43,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					50,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FireFang,
					23,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					33,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Incinerate,
					46,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NobleRoar,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Headbutt,
					11,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.Payback,
					Move.DarkPulse,
					Move.FlameCharge,
					Move.Round,
					Move.EchoedVoice,
					Move.Bulldoze,
					Move.WorkUp,
					Move.WildCharge,
					Move.Snarl,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.FireSpin,
					Move.Yawn,
					Move.Snatch,
					Move.FlareBlitz,
					Move.Entrainment,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					39,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HyperVoice,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					50,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FireFang,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					33,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Incinerate,
					46,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NobleRoar,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Headbutt,
					11,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Flamethrower,
					Move.SolarBeam,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.SecretPower,
					Move.Overheat,
					Move.Payback,
					Move.DarkPulse,
					Move.FlameCharge,
					Move.Round,
					Move.EchoedVoice,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Snarl,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					36,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Strength,
					Move.RockSmash,
					Move.Incinerate,
					Move.Retaliate,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.FireSpin,
					Move.Yawn,
					Move.Snatch,
					Move.Entrainment,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.HeatWave,
					Move.HelpingHand,
					Move.Endeavor,
					Move.Snatch,
					Move.HyperVoice,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					39,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HyperVoice,
					43,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					50,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FireFang,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					33,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Incinerate,
					46,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					8,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NobleRoar,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Headbutt,
					11,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Flamethrower,
					Move.Strength,
					Move.SolarBeam,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.RockSmash,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.Payback,
					Move.DarkPulse,
					Move.FlameCharge,
					Move.Round,
					Move.EchoedVoice,
					Move.Incinerate,
					Move.Retaliate,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Snarl,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.FireSpin,
					Move.Yawn,
					Move.Snatch,
					Move.Entrainment,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HyperVoice,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FireFang,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Incinerate,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NobleRoar,
					15,
				),
			].flat(),
			[
				{
					ability: Ability.Rivalry,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Unnerve,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Moxie,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Litleo,
					PokemonFormBits.Default,
					{
						frontDefault: '8044becb.png',
						frontShiny: '7a13fd39.png',
						backDefault: '13742523.png',
						backShiny: '43041f45.png',
					},
					[Type.Fire, Type.Normal],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Pyroar,
	70,
	65,
	Color.Brown,
	[EggGroup.Ground],
	7,
	PokemonSpeciesBits.GenderDifferences,
	Generation.GenerationVI,
	20,
	GrowthRate.MediumSlow,
	Shape.Quadruped,
	{
		[Language.JaHrkt]: ['カエンジシ'],
		[Language.Roomaji]: ['Kaenjishi'],
		[Language.Ko]: ['화염레오'],
		[Language.ZhHant]: ['火炎獅'],
		[Language.Fr]: ['Némélios'],
		[Language.De]: ['Pyroleo'],
		[Language.Es]: ['Pyroar'],
		[Language.It]: ['Pyroar'],
		[Language.En]: ['Pyroar'],
		[Language.Ja]: ['カエンジシ'],
		[Language.ZhHans]: ['火炎狮'],
	},
	{
		[Language.JaHrkt]: ['おうじゃポケモン'],
		[Language.Ko]: ['임금포켓몬'],
		[Language.ZhHant]: ['王者寶可夢'],
		[Language.Fr]: ['Pokémon Royal'],
		[Language.De]: ['Monarch'],
		[Language.Es]: ['Pokémon Regio'],
		[Language.It]: ['Pokémon Reale'],
		[Language.En]: ['Royal Pokémon'],
		[Language.Ja]: ['おうじゃポケモン'],
		[Language.ZhHans]: ['王者宝可梦'],
	},
	{
		[Language.En]: [
			'The male with the largest mane of fire\nis the leader of the pride.',
			'With fiery breath of more than 10,000 degrees\nFahrenheit, they viciously threaten any challenger.\nThe females protect the pride’s cubs.',
			'The males are usually lazy, but when attacked\nby a strong foe, a male will protect its friends\nwith no regard for its own safety.',
			'The temperature of its breath is over 10,000\ndegrees Fahrenheit, but Pyroar doesn’t use it on\nits prey. This Pokémon prefers to eat raw meat.',
		],
		[Language.JaHrkt]: [
			'むれの　なかで　いちばん　おおきな\nほのおの　たてがみを　もつ　オスが\nリーダーとして　なかまを　ひきいる。',
			'せっし６０００どの　いきを　はきだし\nはげしく　あいてを　いかくする。\nメスが　むれの　こどもを　まもる。',
			'オスは　ふだん　だらだら　しているが\nきょうてきが　おそってくると　わがみを\nかえりみず　なかまを　まもるぞ。',
			'せっし　６０００どの　いきを　はくが\nえものには　つかわない。　にくは\nなまの　ほうが　このみ　だから。',
		],
		[Language.Ko]: [
			'무리 중에서 가장 커다란\n불꽃 갈기를 지닌 수컷이\n리더로서 동료들을 이끈다.',
			'섭씨 6000도의 숨을 내뿜어\n격렬하게 상대를 위협한다.\n암컷이 무리의 새끼를 지킨다.',
			'수컷은 평소에 빈둥거리지만,\n강적이 덤벼들면 자신을\n돌보지 않고 동료를 지킨다.',
			'섭씨 6000도의 숨결을 내뱉지만\n먹이에는 사용하지 않는다.\n고기는 날것을 좋아하기 때문이다.',
		],
		[Language.Fr]: [
			'Le mâle qui possède la crinière de feu la plus\nimposante devient le chef de la horde.',
			'Son souffle peut atteindre les 6 000 °C et il s’en sert\npour intimider l’ennemi. Dans la horde, les femelles\nprotègent les petits.',
			'Le mâle qui possède la crinière de feu la plus imposante\ndevient le chef de la horde.',
			'Son souffle peut atteindre les 6 000 °C et il s’en sert pour\nintimider l’ennemi. Dans la horde, les femelles protègent\nles petits.',
			'Le mâle a tendance à se prélasser à longueur\nde journée. Si un ennemi surgit, en revanche,\nil défend ses congénères au péril de sa vie.',
			'Son souffle enflammé atteint les 6 000 °C,\nmais il ne l’utilise jamais contre ses proies.\nIl préfère en effet la viande crue.',
		],
		[Language.De]: [
			'Das Männchen mit der prächtigsten Feuermähne\nführt das Rudel an.',
			'Sie bedrohen ihre Gegner, indem sie 6 000 °C heiße\nAtemluft ausstoßen. Die Weibchen beschützen die\nJungen des Rudels.',
			'Das Männchen mit der prächtigsten Feuermähne führt\ndas Rudel an.',
			'Sie bedrohen ihre Gegner, indem sie 6 000 °C heiße Atemluft\nausstoßen. Die Weibchen beschützen die Jungen des Rudels.',
			'Männliche Exemplare faulenzen die meiste Zeit.\nWird ihr Rudel von starken Gegnern angegriffen,\nverteidigen sie dieses jedoch mit ihrem Leben.',
			'Es kann 6 000 °C heiße Atemluft ausstoßen,\ndie es jedoch nicht bei der Jagd verwendet.\nSeine Beute verspeist es nämlich lieber roh.',
		],
		[Language.Es]: [
			'El macho con la melena de fuego más grande de toda\nla manada es el líder de sus compañeros.',
			'Intimida con ferocidad al enemigo exhalando su aliento\nabrasador a 6000 °C de temperatura. Las hembras\nprotegen a los cachorros de la manada.',
			'El macho con la melena de fuego más grande de toda la\nmanada es el líder de sus compañeros.',
			'Intimida con ferocidad al enemigo exhalando su aliento\nabrasador a 6000 °C de temperatura. Las hembras protegen\na los cachorros de la manada.',
			'Por lo general, el macho suele ser un holgazán,\npero si aparece un enemigo poderoso, no duda\nen plantarle cara para proteger a los suyos.',
			'Su aliento alcanza temperaturas de 6000 ºC,\naunque no lo emplea contra sus presas, ya que\nprefiere la carne más bien cruda.',
		],
		[Language.It]: [
			'Di solito, il maschio con la criniera fiammeggiante\npiù ampia guida i compagni del gruppo.',
			'Minaccia furiosamente i nemici soffiando aria a una\ntemperatura che raggiunge i 6000 °C. Le femmine\nproteggono i piccoli del gruppo.',
			'Di solito, il maschio con la criniera fiammeggiante più ampia\nguida i compagni del gruppo.',
			'Minaccia furiosamente i nemici soffiando aria a una temperatura\nche raggiunge i 6000 °C. Le femmine proteggono i piccoli\ndel gruppo.',
			'Di solito il maschio passa le giornate nell’ozio,\nma se compare un nemico temibile è pronto a\nrischiare la vita per proteggere i compagni.',
			'Con il suo soffio, infiamma l’aria a una\ntemperatura di 6.000 °C, ma evita di farlo con\nle prede perché preferisce la carne cruda.',
		],
		[Language.Ja]: [
			'群れの　中で　一番　大きな　炎の\nたてがみを　持つ　オスが\nリーダーとして　仲間を　率いる。',
			'摂氏６０００度の　息を　吐き出し\n激しく　相手を　威嚇する。\nメスが　群れの　子供を　守る。',
			'オスは　普段　だらだら　しているが\n強敵が　襲ってくると　わが身を\nかえりみず　仲間を　守るぞ。',
			'摂氏　６０００度の　息を　吐くが\n獲物には　使わない。　肉は\n生のほうが　好み　だから。',
		],
		[Language.ZhHant]: [
			'雄性平常十分懶散，\n但當有強敵來襲的時候，\n會奮不顧身地保護夥伴。',
			'能吐出攝氏６０００度的氣息，\n但不會用在獵物身上，\n因為牠比較喜歡吃生肉。',
		],
		[Language.ZhHans]: [
			'雄性平时总是拖拖拉拉的，\n但如果有强敌来袭，\n就会不顾自身，保护伙伴。',
			'会吐出摄氏６０００度的气息，\n但不会用于猎物。\n因为更喜欢吃生的肉。',
		],
	},
	[
		[
			Variety.Pyroar,
			177,
			15,
			815,
			[Type.Fire, Type.Normal],
			{
				frontDefault: '402dc30f.png',
				frontShiny: 'c6991b46.png',
				frontFemale: '2c90f7a1.png',
				frontShinyFemale: '561383b9.png',
			},
			{
				[Stat.Hp]: {baseStat: 86},
				[Stat.Attack]: {baseStat: 68},
				[Stat.Defense]: {baseStat: 72},
				[Stat.SpecialAttack]: {baseStat: 109, effort: 2},
				[Stat.SpecialDefense]: {baseStat: 66},
				[Stat.Speed]: {baseStat: 106},
			},
			{},
			[
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Headbutt,
					11,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
					Move.HyperBeam,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.DoubleEdge,
					Move.FireSpin,
					Move.Swift,
					Move.MudSlap,
					Move.Endure,
					Move.Crunch,
					Move.FlareBlitz,
					Move.ThunderFang,
					Move.FireFang,
					Move.Acrobatics,
					Move.PsychicFangs,
					Move.BurningJealousy,
					Move.TeraBlast,
					Move.Trailblaze,
					Move.TemperFlare,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Dig,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.FlameCharge,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Snarl,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Ember,
					Move.WorkUp,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					42,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HeatWave,
					Move.HelpingHand,
					Move.Endeavor,
					Move.HyperVoice,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HyperVoice,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FireFang,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Incinerate,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.NobleRoar,
					15,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Headbutt,
					11,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
					Move.Ember,
					Move.HyperBeam,
					Move.WorkUp,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.FlameCharge,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Snarl,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					38,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Payback,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.Snatch,
					Move.Bounce,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					42,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HeatWave,
					Move.HelpingHand,
					Move.Endeavor,
					Move.HyperVoice,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					28,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HyperVoice,
					48,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					57,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FireFang,
					23,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					33,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Incinerate,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NobleRoar,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Headbutt,
					11,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
					Move.Ember,
					Move.HyperBeam,
					Move.WorkUp,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.Payback,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.FlameCharge,
					Move.Round,
					Move.EchoedVoice,
					Move.Bulldoze,
					Move.WorkUp,
					Move.WildCharge,
					Move.Snarl,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HyperVoice,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					57,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FireFang,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					33,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Incinerate,
					51,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NobleRoar,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Headbutt,
					11,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
					Move.HyperBeam,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.SecretPower,
					Move.Overheat,
					Move.Payback,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.FlameCharge,
					Move.Round,
					Move.EchoedVoice,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Snarl,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					38,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Strength,
					Move.RockSmash,
					Move.Incinerate,
					Move.Retaliate,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.HeatWave,
					Move.HelpingHand,
					Move.Endeavor,
					Move.Snatch,
					Move.HyperVoice,
					Move.Bounce,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HyperVoice,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					57,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FireFang,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					33,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Incinerate,
					51,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					8,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NobleRoar,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Headbutt,
					11,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
					Move.HyperBeam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.Strength,
					Move.SolarBeam,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.RockSmash,
					Move.WillOWisp,
					Move.Facade,
					Move.Taunt,
					Move.Overheat,
					Move.Payback,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.FlameCharge,
					Move.Round,
					Move.EchoedVoice,
					Move.Incinerate,
					Move.Retaliate,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Snarl,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Ember,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flamethrower,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HyperVoice,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FireFang,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Incinerate,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NobleRoar,
					15,
				),
			].flat(),
			[
				{
					ability: Ability.Rivalry,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Unnerve,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Moxie,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Pyroar,
					PokemonFormBits.Default,
					{
						frontDefault: '402dc30f.png',
						frontShiny: 'c6991b46.png',
						frontFemale: '2c90f7a1.png',
						frontShinyFemale: '561383b9.png',
					},
					[Type.Fire, Type.Normal],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Flabebe,
	70,
	225,
	Color.White,
	[EggGroup.Fairy],
	8,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Arms,
	{
		[Language.JaHrkt]: ['フラベベ'],
		[Language.Roomaji]: ['Flabebe'],
		[Language.Ko]: ['플라베베'],
		[Language.ZhHant]: ['花蓓蓓'],
		[Language.Fr]: ['Flabébé'],
		[Language.De]: ['Flabébé'],
		[Language.Es]: ['Flabébé'],
		[Language.It]: ['Flabébé'],
		[Language.En]: ['Flabébé'],
		[Language.Ja]: ['フラベベ'],
		[Language.ZhHans]: ['花蓓蓓'],
	},
	{
		[Language.JaHrkt]: ['いちりんポケモン'],
		[Language.Ko]: ['한송이포켓몬'],
		[Language.ZhHant]: ['單朵寶可夢'],
		[Language.Fr]: ['Pokémon Uniflore'],
		[Language.De]: ['Einblütler'],
		[Language.Es]: ['Pokémon Monoflor'],
		[Language.It]: ['Pokémon Monofiore'],
		[Language.En]: ['Single Bloom Pokémon'],
		[Language.Ja]: ['いちりんポケモン'],
		[Language.ZhHans]: ['单朵宝可梦'],
	},
	{
		[Language.De]: [
			'Die Krone auf seinem Kopf hat es sich aus\nPollen von Blumen gebastelt. Sie besitzt eine\nheilende Wirkung.',
			'Es entlockt Blumen ihre geheimen Kräfte und\nkontrolliert diese nach Belieben. Die Blume,\ndie es trägt, ist wie ein Teil seines Körpers.',
			'Hat es eine Blume gefunden, die ihm gefällt, lebt es\nsein Leben lang in Symbiose mit ihr. Es lässt sich\nunbekümmert vom Wind treiben.',
			'Es entlockt Blumen ihre geheimen Kräfte und kontrolliert diese\nnach Belieben. Die Blume, die es trägt, ist wie ein Teil seines\nKörpers.',
			'Hat es eine Blume gefunden, die ihm gefällt, lebt es sein\nLeben lang in Symbiose mit ihr. Es lässt sich unbekümmert\nvom Wind treiben.',
			'Ohne die Kräfte einer Blume ist es relativ\nschutzlos. Es sucht jedoch so lange, bis es\neine findet, deren Form und Farbe ihm zusagt.',
		],
		[Language.Es]: [
			'Acumula el polen de las flores para confeccionar\nla tiara que lleva en la cabeza, que cuenta con\npropiedades curativas.',
			'Puede controlar el poder oculto de las flores. La flor\nque lleva consigo es como si formara parte de su\ncuerpo.',
			'En cuanto encuentra una flor de su agrado, la\nconvierte en su hogar para toda la vida.\nFlota en el aire a su antojo cabalgando el viento.',
			'Puede controlar el poder oculto de las flores. La flor que\nlleva consigo es como si formara parte de su cuerpo.',
			'En cuanto encuentra una flor de su agrado, la convierte en\nsu hogar para toda la vida. Flota en el aire a su antojo\ncabalgando el viento.',
			'Sin el poder que le confiere la flor es una presa\nfácil, así que busca una del tamaño y color\nidóneos y no cesa hasta dar con ella.',
		],
		[Language.Fr]: [
			'Il confectionne la couronne qui orne sa tête en\nrécoltant du pollen. Elle recèle de nombreuses\npropriétés curatives.',
			'Capable de libérer et de contrôler la force cachée\ndes plantes. La fleur qu’il tient fait partie de lui.',
			'Après avoir trouvé une fleur à son goût, il ne la quitte\nplus de toute sa vie. Il se laisse porter au gré du vent.',
			'Capable de libérer et de contrôler la force cachée des plantes.\nLa fleur qu’il tient fait partie de lui.',
			'Après avoir trouvé une fleur à son goût, il ne la quitte plus\nde toute sa vie. Il se laisse porter au gré du vent.',
			'Bien qu’il soit vulnérable sans le pouvoir\nde sa fleur, il voyagera jusqu’à en trouver\nune de la couleur et de la forme qu’il préfère.',
		],
		[Language.JaHrkt]: [
			'はなの　ひめた　ちからを　ひきだして\nじざいに　あやつる。フラベベが　もつ\nはなは　もはや　からだの　いちぶだ。',
			'きにいった　はなを　みつけると\nいっしょう　その　はなと　くらす。\nかぜに　のって　きままに　ただよう。',
			'はなの　ちからが　ないと　キケン。\nでも　すきな　いろと　かたちが\nみつかるまで　たびを　つづけるぞ。',
			'あたまの　かんむりは　はなの\nかふんを　あつめて　つくったもの。\nいやしの　こうかが　ひめられている。',
		],
		[Language.Ko]: [
			'꽃의 숨겨진 힘을 끌어내어\n자유자재로 조종한다. 플라베베가 지닌\n꽃은 이미 몸의 일부다.',
			'마음에 든 꽃을 발견하면\n평생을 그 꽃과 지낸다.\n바람을 타고 내키는 대로 떠다닌다.',
			'꽃의 힘이 없으면 위험하다.\n그래도 좋아하는 색과 형태를\n찾을 때까지 여행을 계속한다.',
			'머리의 관은 꽃가루를\n모아서 만든 것이다.\n치유의 효과가 숨겨져 있다.',
		],
		[Language.It]: [
			'È in grado di controllare a piacimento la forza\nnascosta dei fiori. Il fiore a cui si aggrappa fa\nparte del suo stesso corpo.',
			'Una volta trovato un fiore di suo gradimento, rimane\nin simbiosi con esso per tutta la vita. Va in giro\nlasciandosi trasportare dal vento.',
			'È in grado di controllare a piacimento la forza nascosta dei\nfiori. Il fiore a cui si aggrappa fa parte del suo stesso corpo.',
			'Una volta trovato un fiore di suo gradimento, rimane in\nsimbiosi con esso per tutta la vita. Va in giro lasciandosi\ntrasportare dal vento.',
			'Senza il potere di un fiore è vulnerabile, tuttavia\nviaggia senza sosta finché non ne trova uno di\nun colore e di una forma che lo soddisfano.',
			'La corona sulla testa è realizzata con il polline\nche raccoglie dai fiori e ha proprietà curative.',
		],
		[Language.En]: [
			'It draws out and controls the hidden power\nof flowers. The flower Flabébé holds\nis most likely part of its body.',
			'When it finds a flower it likes, it dwells on\nthat flower its whole life long. It floats in the\nwind’s embrace with an untroubled heart.',
			'It’s not safe without the power of a flower, but\nit will keep traveling around until it finds one\nwith the color and shape it wants.',
			'Flabébé wears a crown made from pollen it’s\ncollected from its flower. The crown has hidden\nhealing properties.',
		],
		[Language.Ja]: [
			'花の　秘めた　力を　引き出して\n自在に　操る。フラベベが　持つ　花は\nもはや　体の　一部だ。',
			'気に入った　花を　見つけると\n一生　その花と　暮らす。\n風に　乗って　気ままに　漂う。',
			'花の　力が　ないと　危険。\nでも　好きな　色と　形が\n見つかるまで　旅を　続けるぞ。',
			'頭の　冠は　花の　花粉を\n集めて　作ったもの。\n癒しの　効果が　秘められている。',
		],
		[Language.ZhHant]: [
			'要是沒有花的力量會很危險，\n但在找到自己喜愛的顏色和形狀之前，\n牠都會繼續旅行下去。',
			'頭上的冠是收集\n花粉製成的，\n蘊藏著治癒的效果。',
		],
		[Language.ZhHans]: [
			'如果没有花的力量，就会很危险。\n但是在找到喜爱的颜色和形状之前，\n会不断地旅行。',
			'头上的冠是收集花粉做成的。\n蕴藏着治愈的效果。',
		],
	},
	[
		[
			Variety.Flabebe,
			61,
			1,
			1,
			[Type.Fairy],
			{
				frontDefault: '3d391d35.png',
				frontShiny: 'b797edca.png',
			},
			{
				[Stat.Hp]: {baseStat: 44},
				[Stat.Attack]: {baseStat: 38},
				[Stat.Defense]: {baseStat: 39},
				[Stat.SpecialAttack]: {baseStat: 61},
				[Stat.SpecialDefense]: {baseStat: 79, effort: 1},
				[Stat.Speed]: {baseStat: 42},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SolarBeam,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Psychic,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PetalDance,
					45,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.LightScreen,
					Move.Swift,
					Move.Endure,
					Move.Charm,
					Move.BatonPass,
					Move.Endeavor,
					Move.MagicalLeaf,
					Move.StoredPower,
					Move.PetalBlizzard,
					Move.DisarmingVoice,
					Move.DrainingKiss,
					Move.GrassyTerrain,
					Move.MistyTerrain,
					Move.PollenPuff,
					Move.TeraBlast,
					Move.Trailblaze,
					Move.ChillingWater,
					Move.AlluringVoice,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.GigaDrain,
					Move.HelpingHand,
					Move.SeedBomb,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					10,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Synthesis,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.Endeavor,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MagicalLeaf,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.Copycat,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PetalBlizzard,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.GrassyTerrain,
					24,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					37,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					41,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.TearfulLook,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					15,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SolarBeam,
					48,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Psychic,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PetalDance,
					45,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.NaturePower,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HealBell,
					Move.Synthesis,
					Move.MagicCoat,
					Move.Covet,
					Move.WorrySeed,
					Move.AfterYou,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GigaDrain,
					Move.HelpingHand,
					Move.Endeavor,
					Move.SeedBomb,
					Move.AllySwitch,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Camouflage,
					Move.Captivate,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					33,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicalLeaf,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					10,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Copycat,
					Move.TearfulLook,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PetalBlizzard,
					28,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.GrassyTerrain,
					24,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					37,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					6,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					41,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SolarBeam,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PetalDance,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Camouflage,
					Move.Copycat,
					Move.Captivate,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					33,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicalLeaf,
					22,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PetalBlizzard,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.GrassyTerrain,
					24,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					37,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					41,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SolarBeam,
					48,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PetalDance,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Flash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.GigaDrain,
					Move.HealBell,
					Move.Synthesis,
					Move.HelpingHand,
					Move.MagicCoat,
					Move.Endeavor,
					Move.Covet,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.AfterYou,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Camouflage,
					Move.Copycat,
					Move.Captivate,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					33,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MagicalLeaf,
					22,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PetalBlizzard,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.GrassyTerrain,
					24,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					37,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					41,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SolarBeam,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PetalDance,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Camouflage,
					Move.Copycat,
					Move.Captivate,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MagicalLeaf,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PetalBlizzard,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.GrassyTerrain,
					24,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					37,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					41,
				),
			].flat(),
			[
				{
					ability: Ability.FlowerVeil,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Symbiosis,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.FlabebeRed,
					PokemonFormBits.Default,
					{
						frontDefault: '3d391d35.png',
						frontShiny: 'b797edca.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Flabébé Rouge'],
						[Language.De]: ['Flabébé (Rot)'],
						[Language.En]: ['Red Flabébé'],
					},
					{
						[Language.JaHrkt]: ['あかいはな'],
						[Language.Ko]: ['빨간 꽃'],
						[Language.Fr]: ['Fleur Rouge'],
						[Language.De]: ['Rotblütler'],
						[Language.Es]: ['Flor Roja'],
						[Language.It]: ['Fiore Rosso'],
						[Language.En]: ['Red Flower'],
					},
					'red',
				],
				[
					Form.FlabebeYellow,
					PokemonFormBits.None,
					{
						frontDefault: '6ea02438.png',
						frontShiny: 'fed518d3.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Flabébé Jaune'],
						[Language.De]: ['Flabébé (Gelb)'],
						[Language.En]: ['Yellow Flabébé'],
					},
					{
						[Language.JaHrkt]: ['きいろのはな'],
						[Language.Ko]: ['노란 꽃'],
						[Language.Fr]: ['Fleur Jaune'],
						[Language.De]: ['Gelbblütler'],
						[Language.Es]: ['Flor Amarilla'],
						[Language.It]: ['Fiore Giallo'],
						[Language.En]: ['Yellow Flower'],
					},
					'yellow',
				],
				[
					Form.FlabebeOrange,
					PokemonFormBits.None,
					{
						frontDefault: '6ab2e348.png',
						frontShiny: '8914867e.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Flabébé Orange'],
						[Language.De]: ['Flabébé (Orange)'],
						[Language.En]: ['Orange Flabébé'],
					},
					{
						[Language.JaHrkt]: ['オレンジいろのはな'],
						[Language.Ko]: ['오렌지색 꽃'],
						[Language.Fr]: ['Fleur Orange'],
						[Language.De]: ['Orangeblütler'],
						[Language.Es]: ['Flor Naranja'],
						[Language.It]: ['Fiore Arancione'],
						[Language.En]: ['Orange Flower'],
					},
					'orange',
				],
				[
					Form.FlabebeBlue,
					PokemonFormBits.None,
					{
						frontDefault: 'd0e46729.png',
						frontShiny: '8160efbf.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Flabébé Bleu'],
						[Language.De]: ['Flabébé (Blau)'],
						[Language.En]: ['Blue Flabébé'],
					},
					{
						[Language.JaHrkt]: ['あおいはな'],
						[Language.Ko]: ['파란 꽃'],
						[Language.Fr]: ['Fleur Bleue'],
						[Language.De]: ['Blaublütler'],
						[Language.Es]: ['Flor Azul'],
						[Language.It]: ['Fiore Blu'],
						[Language.En]: ['Blue Flower'],
					},
					'blue',
				],
				[
					Form.FlabebeWhite,
					PokemonFormBits.None,
					{
						frontDefault: '355fd420.png',
						frontShiny: 'b01e1285.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Flabébé Blanc'],
						[Language.De]: ['Flabébé (Weiß)'],
						[Language.En]: ['White Flabébé'],
					},
					{
						[Language.JaHrkt]: ['しろいはな'],
						[Language.Ko]: ['하얀 꽃'],
						[Language.Fr]: ['Fleur Blanche'],
						[Language.De]: ['Weißblütler'],
						[Language.Es]: ['Flor Blanca'],
						[Language.It]: ['Fiore Bianco'],
						[Language.En]: ['White Flower'],
					},
					'white',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Floette,
	70,
	120,
	Color.White,
	[EggGroup.Fairy],
	8,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Arms,
	{
		[Language.JaHrkt]: ['フラエッテ'],
		[Language.Roomaji]: ['Floette'],
		[Language.Ko]: ['플라엣테'],
		[Language.ZhHant]: ['花葉蒂'],
		[Language.Fr]: ['Floette'],
		[Language.De]: ['Floette'],
		[Language.Es]: ['Floette'],
		[Language.It]: ['Floette'],
		[Language.En]: ['Floette'],
		[Language.Ja]: ['フラエッテ'],
		[Language.ZhHans]: ['花叶蒂'],
	},
	{
		[Language.JaHrkt]: ['いちりんポケモン'],
		[Language.Ko]: ['한송이포켓몬'],
		[Language.ZhHant]: ['單朵寶可夢'],
		[Language.Fr]: ['Pokémon Uniflore'],
		[Language.De]: ['Einblütler'],
		[Language.Es]: ['Pokémon Monoflor'],
		[Language.It]: ['Pokémon Monofiore'],
		[Language.En]: ['Single Bloom Pokémon'],
		[Language.Ja]: ['いちりんポケモン'],
		[Language.ZhHans]: ['单朵宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'はなばたけを　とびまわり　かれかけた\nはなを　せわする。はなの　ひめられた\nちからを　ひきだして　たたかう。',
			'ていれの　いきとどいた　かだんの\nはなが　さくと　すがたを　あらわして\nかれんな　ダンスで　しゅくふくする。',
			'はなを　そだて　じぶんの　ぶきとして\nりよう。　うつくしくさいた　はなほど\nきょうりょくなパワーを　ひめている。',
			'じぶんの　パワーを　はなに　あたえ\nこころを　こめて　せわを　する。\nかだんを　あらすものは　ゆるさない。',
		],
		[Language.Ko]: [
			'꽃밭을 날아다니며 말라가는\n꽃을 보살핀다. 꽃의 숨겨진\n힘을 끌어내어 싸운다.',
			'빈틈없이 손질한 화단의\n꽃이 피면 모습을 드러내어\n아름다운 댄스로 축복한다.',
			'꽃을 길러 자신의 무기로\n이용한다. 아름답게 핀 꽃일수록\n강력한 파워를 간직하고 있다.',
			'자신의 파워를 꽃에 주고\n진심을 담아 돌본다.\n화단을 어지럽히는 자는 용서하지 않는다.',
		],
		[Language.Fr]: [
			'Il survole les champs de fleurs, et prend soin de\ncelles qui sont sur le point de faner. Au combat,\nil fait appel à leur force cachée.',
			'Quand les fleurs d’une plate-bande bien soignée\néclosent, il apparaît et célèbre la floraison en dansant\navec une très grande élégance.',
			'Il survole les champs de fleurs, et prend soin de celles\nqui sont sur le point de faner. Au combat, il fait appel\nà leur force cachée.',
			'Quand les fleurs d’une plate-bande bien soignée éclosent,\nil apparaît et célèbre la floraison en dansant avec une très\ngrande élégance.',
			'Il cultive des fleurs et les utilise en tant\nqu’armes. Plus une fleur est belle, plus\nelle renferme de puissance.',
			'Il fait profiter ses fleurs de ses pouvoirs et met\ntout son cœur à leur entretien. Gare à ceux qui\nravagent ses plates-bandes !',
		],
		[Language.De]: [
			'Es fliegt auf Wiesen umher und kümmert sich um\nwelkende Blumen. Es setzt deren geheime Kräfte frei\nund nutzt diese zum Kämpfen.',
			'Wenn die Blumen auf einem liebevoll gepflegten\nBlumenbeet blühen, erscheint es und feiert den\nAnblick mit einem eleganten Tanz.',
			'Es fliegt auf Wiesen umher und kümmert sich um welkende\nBlumen. Es setzt deren geheime Kräfte frei und nutzt diese\nzum Kämpfen.',
			'Es kämpft mit einer Blume, die es selbst\ngezüchtet hat. Je schöner ihre Blüte, desto\nstärker die Macht, die sie birgt.',
			'Es überträgt seine Kraft auf Blumen und pflegt\ndiese mit ganzem Herzen. Es verzeiht keinem,\nder sein Blumenbeet verwüstet.',
		],
		[Language.Es]: [
			'Revolotea alrededor de campos de flores y cuida de\naquellas que empiezan a marchitarse. Usa en combate\nel poder oculto de las flores.',
			'Cuando las plantas bien cuidadas de un parterre\nflorecen, hace acto de presencia e interpreta un\nbaile primoroso para celebrarlo.',
			'Revolotea alrededor de campos de flores y cuida de aquellas\nque empiezan a marchitarse. Usa en combate el poder oculto\nde las flores.',
			'Cuando las plantas bien cuidadas de un parterre florecen,\nhace acto de presencia e interpreta un baile primoroso para\ncelebrarlo.',
			'Usa como arma la flor que cultiva por su cuenta\ny, cuanto mayor sea la belleza de esta, mayor\nserá también el poder que oculta en su interior.',
			'Confiere su poder a las flores y cuida de ellas\ncon mucho esmero; no perdona que destruyan\nlos campos donde estas crecen.',
		],
		[Language.It]: [
			'Vola sui campi in fiore e si prende cura delle piante\nche si stanno seccando. Lotta sfruttando i poteri\nnascosti dei fiori.',
			'Quando i fiori di un’aiuola ben curata sbocciano,\nappare e celebra l’evento con una danza graziosa.',
			'Vola sui campi in fiore e si prende cura delle piante che si\nstanno seccando. Lotta sfruttando i poteri nascosti dei fiori.',
			'Quando i fiori di un’aiuola ben curata sbocciano, appare\ne celebra l’evento con una danza graziosa.',
			'Fa crescere il suo fiore e lo utilizza come arma.\nPiù il fiore è bello, maggiore è il potere che\nracchiude.',
			'Trasmette il suo potere ai fiori e se ne prende\ncura con tutto il suo amore. Non ha alcuna pietà\nper chi deturpa le sue aiuole.',
		],
		[Language.En]: [
			'It flutters around fields of flowers and cares for\nflowers that are starting to wilt. It draws\nout the hidden power of flowers to battle.',
			'When the flowers of a well-tended flower bed bloom,\nit appears and celebrates with an elegant dance.',
			'It raises flowers and uses them as weapons.\nThe more gorgeous the blossom, the more\npower it contains.',
			'It gives its own power to flowers, pouring its\nheart into caring for them. Floette never forgives\nanyone who messes up a flower bed.',
		],
		[Language.Ja]: [
			'花畑を　飛び回り　枯れかけた　花を\n世話する。花の　秘められた　力を\n引き出して　戦う。',
			'手入れの　行き届いた　花壇の\n花が　咲くと　姿を　現して\nかれんな　ダンスで　祝福する。',
			'花を　育て　自分の　武器として\n利用。　美しく咲いた　花ほど\n強力なパワーを　秘めている。',
			'自分の　パワーを　花に　与え\n心を　こめて　世話を　する。\n花壇を　荒らすものは　許さない。',
		],
		[Language.ZhHant]: [
			'會培育花朵來當成自己的武器。\n開得越美麗的花朵，\n所蘊藏的力量就越強大。',
			'會把自己的力量分給花，\n用心地加以照料。\n絕不會原諒破壞花壇的傢伙。',
		],
		[Language.ZhHans]: [
			'会培育花朵当作自己的武器来用。\n越是开得美丽的花，\n蕴藏着的力量就越强大。',
			'把自己的力量给花，用心地照料。\n绝不原谅那些破坏花坛者。',
		],
	},
	[
		[
			Variety.Floette,
			130,
			2,
			9,
			[Type.Fairy],
			{
				frontDefault: '71e4abcf.png',
				frontShiny: 'f1501565.png',
			},
			{
				[Stat.Hp]: {baseStat: 54},
				[Stat.Attack]: {baseStat: 45},
				[Stat.Defense]: {baseStat: 47},
				[Stat.SpecialAttack]: {baseStat: 75},
				[Stat.SpecialDefense]: {baseStat: 98, effort: 2},
				[Stat.Speed]: {baseStat: 52},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SolarBeam,
					58,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Psychic,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PetalDance,
					51,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.LightScreen,
					Move.Metronome,
					Move.Swift,
					Move.Endure,
					Move.Charm,
					Move.BatonPass,
					Move.Trick,
					Move.SkillSwap,
					Move.MagicalLeaf,
					Move.StoredPower,
					Move.PetalBlizzard,
					Move.DisarmingVoice,
					Move.DrainingKiss,
					Move.GrassyTerrain,
					Move.MistyTerrain,
					Move.PollenPuff,
					Move.TeraBlast,
					Move.Trailblaze,
					Move.ChillingWater,
					Move.AlluringVoice,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.GigaDrain,
					Move.HelpingHand,
					Move.Endeavor,
					Move.SeedBomb,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					10,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Synthesis,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MagicalLeaf,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PetalBlizzard,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.GrassyTerrain,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					46,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
					Move.FairyWind,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					15,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SolarBeam,
					58,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Psychic,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PetalDance,
					51,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.NaturePower,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HealBell,
					Move.Synthesis,
					Move.MagicCoat,
					Move.Covet,
					Move.WorrySeed,
					Move.AfterYou,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GigaDrain,
					Move.HelpingHand,
					Move.Endeavor,
					Move.SeedBomb,
					Move.AllySwitch,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					38,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicalLeaf,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					10,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PetalBlizzard,
					33,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.GrassyTerrain,
					27,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					6,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					46,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
					Move.FairyWind,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SolarBeam,
					58,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PetalDance,
					51,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicalLeaf,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PetalBlizzard,
					33,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.GrassyTerrain,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					46,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SolarBeam,
					58,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PetalDance,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Flash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.GigaDrain,
					Move.HealBell,
					Move.Synthesis,
					Move.HelpingHand,
					Move.MagicCoat,
					Move.Endeavor,
					Move.Covet,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.AfterYou,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MagicalLeaf,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PetalBlizzard,
					33,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.GrassyTerrain,
					27,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					43,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					46,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SolarBeam,
					58,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PetalDance,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MagicalLeaf,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PetalBlizzard,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.GrassyTerrain,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					46,
				),
			].flat(),
			[
				{
					ability: Ability.FlowerVeil,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Symbiosis,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.FloetteRed,
					PokemonFormBits.Default,
					{
						frontDefault: '71e4abcf.png',
						frontShiny: 'f1501565.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Floette Rouge'],
						[Language.De]: ['Floette (Rot)'],
						[Language.En]: ['Red Floette'],
					},
					{
						[Language.JaHrkt]: ['あかいはな'],
						[Language.Ko]: ['빨간 꽃'],
						[Language.Fr]: ['Fleur Rouge'],
						[Language.De]: ['Rotblütler'],
						[Language.Es]: ['Flor Roja'],
						[Language.It]: ['Fiore Rosso'],
						[Language.En]: ['Red Flower'],
					},
					'red',
				],
				[
					Form.FloetteYellow,
					PokemonFormBits.None,
					{
						frontDefault: 'f3e35f46.png',
						frontShiny: 'a820feb5.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Floette Jaune'],
						[Language.De]: ['Floette (Gelb)'],
						[Language.En]: ['Yellow Floette'],
					},
					{
						[Language.JaHrkt]: ['きいろのはな'],
						[Language.Ko]: ['노란 꽃'],
						[Language.Fr]: ['Fleur Jaune'],
						[Language.De]: ['Gelbblütler'],
						[Language.Es]: ['Flor Amarilla'],
						[Language.It]: ['Fiore Giallo'],
						[Language.En]: ['Yellow Flower'],
					},
					'yellow',
				],
				[
					Form.FloetteOrange,
					PokemonFormBits.None,
					{
						frontDefault: '3daa04c9.png',
						frontShiny: '3515d842.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Floette Orange'],
						[Language.De]: ['Floette (Orange)'],
						[Language.En]: ['Orange Floette'],
					},
					{
						[Language.JaHrkt]: ['オレンジいろのはな'],
						[Language.Ko]: ['오렌지색 꽃'],
						[Language.Fr]: ['Fleur Orange'],
						[Language.De]: ['Orangeblütler'],
						[Language.Es]: ['Flor Naranja'],
						[Language.It]: ['Fiore Arancione'],
						[Language.En]: ['Orange Flower'],
					},
					'orange',
				],
				[
					Form.FloetteBlue,
					PokemonFormBits.None,
					{
						frontDefault: 'db8fddbd.png',
						frontShiny: '3d51f6fb.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Floette Bleu'],
						[Language.De]: ['Floette (Blau)'],
						[Language.En]: ['Blue Floette'],
					},
					{
						[Language.JaHrkt]: ['あおいはな'],
						[Language.Ko]: ['파란 꽃'],
						[Language.Fr]: ['Fleur Bleue'],
						[Language.De]: ['Blaublütler'],
						[Language.Es]: ['Flor Azul'],
						[Language.It]: ['Fiore Blu'],
						[Language.En]: ['Blue Flower'],
					},
					'blue',
				],
				[
					Form.FloetteWhite,
					PokemonFormBits.None,
					{
						frontDefault: '3efd4a9f.png',
						frontShiny: 'b9e11edb.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Floette Blanc'],
						[Language.De]: ['Floette (Weiß)'],
						[Language.En]: ['White Floette'],
					},
					{
						[Language.JaHrkt]: ['しろいはな'],
						[Language.Ko]: ['하얀 꽃'],
						[Language.Fr]: ['Fleur Blanche'],
						[Language.De]: ['Weißblütler'],
						[Language.Es]: ['Flor Blanca'],
						[Language.It]: ['Fiore Bianco'],
						[Language.En]: ['White Flower'],
					},
					'white',
				],
			],
		],
		[
			Variety.FloetteEternal,
			243,
			2,
			9,
			[Type.Fairy],
			{
				frontDefault: 'c78792e2.png',
				frontShiny: 'bfed5b90.png',
				backDefault: 'cbbb8ce0.png',
				backShiny: 'd324efd0.png',
			},
			{
				[Stat.Hp]: {baseStat: 74},
				[Stat.Attack]: {baseStat: 65},
				[Stat.Defense]: {baseStat: 67},
				[Stat.SpecialAttack]: {baseStat: 125},
				[Stat.SpecialDefense]: {baseStat: 128, effort: 2},
				[Stat.Speed]: {baseStat: 92},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SolarBeam,
					58,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PetalDance,
					51,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.GigaDrain,
					Move.HealBell,
					Move.Synthesis,
					Move.HelpingHand,
					Move.MagicCoat,
					Move.Endeavor,
					Move.Covet,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.AfterYou,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicalLeaf,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					10,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Tutor,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PetalBlizzard,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.GrassyTerrain,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightOfRuin,
					50,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
					Move.FairyWind,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SolarBeam,
					58,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PetalDance,
					51,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicalLeaf,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PetalBlizzard,
					33,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.GrassyTerrain,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					46,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightOfRuin,
					50,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SolarBeam,
					58,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PetalDance,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Flash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.GigaDrain,
					Move.HealBell,
					Move.Synthesis,
					Move.HelpingHand,
					Move.MagicCoat,
					Move.Endeavor,
					Move.Covet,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.AfterYou,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MagicalLeaf,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PetalBlizzard,
					33,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.GrassyTerrain,
					27,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					43,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					46,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightOfRuin,
					50,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SolarBeam,
					58,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PetalDance,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MagicalLeaf,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LuckyChant,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PetalBlizzard,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.GrassyTerrain,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightOfRuin,
					50,
				),
			].flat(),
			[
				{
					ability: Ability.FlowerVeil,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Symbiosis,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.FloetteEternal,
					PokemonFormBits.Default,
					{
						frontDefault: 'c78792e2.png',
						frontShiny: 'bfed5b90.png',
						backDefault: 'cbbb8ce0.png',
						backShiny: 'd324efd0.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Floette Éternel'],
						[Language.De]: ['Floette (Ewigblütler)'],
						[Language.En]: ['Eternal Floette'],
					},
					{
						[Language.JaHrkt]: ['えいえんのはな'],
						[Language.Ko]: ['영원의 꽃'],
						[Language.Fr]: ['Fleur Éternelle'],
						[Language.De]: ['Ewigblütler'],
						[Language.Es]: ['Flor Eterna'],
						[Language.It]: ['Fiore Eterno'],
						[Language.En]: ['Eternal Flower'],
					},
					'eternal',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Florges,
	70,
	45,
	Color.White,
	[EggGroup.Fairy],
	8,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Arms,
	{
		[Language.JaHrkt]: ['フラージェス'],
		[Language.Roomaji]: ['Florges'],
		[Language.Ko]: ['플라제스'],
		[Language.ZhHant]: ['花潔夫人'],
		[Language.Fr]: ['Florges'],
		[Language.De]: ['Florges'],
		[Language.Es]: ['Florges'],
		[Language.It]: ['Florges'],
		[Language.En]: ['Florges'],
		[Language.Ja]: ['フラージェス'],
		[Language.ZhHans]: ['花洁夫人'],
	},
	{
		[Language.JaHrkt]: ['ガーデンポケモン'],
		[Language.Ko]: ['가든포켓몬'],
		[Language.ZhHant]: ['花園寶可夢'],
		[Language.Fr]: ['Pokémon Jardin'],
		[Language.De]: ['Garten'],
		[Language.Es]: ['Pokémon Jardín'],
		[Language.It]: ['Pokémon Giardino'],
		[Language.En]: ['Garden Pokémon'],
		[Language.Ja]: ['ガーデンポケモン'],
		[Language.ZhHans]: ['花园宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'テリトリーは　みごとな　はなぞの。\nくさばなが　はなつ　エネルギーを\nあびて　じぶんの　パワーにするのだ。',
			'むかしの　しろの　あるじたちは\nにわを　かざるため　フラージェスを\nまねきいれ　はなぞのを　つくらせた。',
			'そだてた　はなばなを　あやつる。\nフラージェスの　はなつ　はなふぶきは\nうつくしさも　パワーも　あっとうてき。',
			'すうひゃくねんの　じゅみょうをもつ。\nていえんを　まもりつづけることに\nその　いっしょうを　ささげるという。',
		],
		[Language.Ko]: [
			'멋진 화원이 영역이다.\n화초가 내보내는 에너지를\n쬐어 자신의 파워로 삼는다.',
			'옛 성의 주인은\n정원을 꾸미기 위해 플라제스를\n불러들여 화원을 만들게 했다.',
			'기른 꽃들을 조종한다.\n플라제스가 발산하는 꽃보라는\n아름다움도 파워도 압도적이다.',
			'수백 년의 수명을 가졌다.\n정원을 지키는 일에\n일생을 바친다고 한다.',
		],
		[Language.Fr]: [
			'Les jardins fleuris sont son territoire.\nIl se baigne dans l’énergie dégagée par les plantes\nen fleurs pour l’absorber.',
			'Les châtelains de jadis invitaient les Florges sur leurs\nterres et leur confiaient la réalisation de leurs jardins.',
			'Les jardins fleuris sont son territoire. Il se baigne dans\nl’énergie dégagée par les plantes en fleurs pour l’absorber.',
			'Les châtelains de jadis invitaient les Florges sur leurs terres\net leur confiaient la réalisation de leurs jardins.',
			'Il contrôle les fleurs qu’il cultive. Les tempêtes\nde pétales qu’il déchaîne sont aussi belles que\nredoutables.',
			'Il peut vivre des centaines d’années, et\nconsacre sa longue existence à l’entretien\ndes jardins.',
		],
		[Language.De]: [
			'Wunderschöne Blumengärten sind sein Revier.\nEs badet in der von blühenden Blumen freigesetzten\nEnergie und zieht daraus seine Kraft.',
			'Die Schlossherren vergangener Zeiten haben Florges\neingeladen, damit diese Blumengärten für sie anlegen,\num so ihre Anwesen zu verschönern.',
			'Wunderschöne Blumengärten sind sein Revier. Es badet in der\nvon blühenden Blumen freigesetzten Energie und zieht daraus\nseine Kraft.',
			'Es kontrolliert selbst gezüchtete Blumen. Die\nBlütenwirbel, die es erzeugt, sind überwältigend\nschön und stark.',
			'Es hat eine Lebenserwartung von mehreren\nHundert Jahren. Man sagt, es widme sein ganzes\nDasein beharrlich der Pflege von Blumengärten.',
		],
		[Language.Es]: [
			'Habita en preciosos jardines floridos. Absorbe la\nenergía que emiten las plantas y la convierte en su\nfuente de poder.',
			'Los propietarios de los castillos de antaño solían\ninvitar a Florges para que creasen jardines floridos,\na fin de decorar sus terrenos.',
			'Habita en preciosos jardines floridos. Absorbe la energía que\nemiten las plantas y la convierte en su fuente de poder.',
			'Los propietarios de los castillos de antaño solían invitar a\nFlorges para que creasen jardines floridos, a fin de decorar\nsus terrenos.',
			'Es capaz de controlar las flores que cultiva. La\nráfaga de pétalos que emplea es hermosa a la\nvez que devastadora.',
			'Su esperanza de vida asciende a varios siglos y\ndedica toda su dilatada existencia al cuidado\nde los jardines.',
		],
		[Language.It]: [
			'Il suo habitat preferito sono i meravigliosi giardini\nfioriti. Assorbe e utilizza l’energia di piante e fiori.',
			'Anticamente, i padroni dei castelli ricorrevano al suo\naiuto per abbellire i loro giardini con tanti fiori diversi.',
			'Il suo habitat preferito sono i meravigliosi giardini fioriti.\nAssorbe e utilizza l’energia di piante e fiori.',
			'Anticamente, i padroni dei castelli ricorrevano al suo aiuto per\nabbellire i loro giardini con tanti fiori diversi.',
			'Ha il potere di controllare i fiori che coltiva.\nÈ in grado di creare tempeste di fiori tanto\nmeravigliose quanto devastanti.',
			'Può vivere per centinaia di anni e dedica la sua\nintera esistenza alla cura dei giardini fioriti.',
		],
		[Language.En]: [
			'It claims exquisite flower gardens as its territory,\nand it obtains power from basking in the energy\nemitted by flowering plants.',
			'In times long past, governors of castles\nwould invite Florges to create flower gardens\nto embellish the castle domains.',
			'It controls the flowers it grows. The petal\nblizzards that Florges triggers are overwhelming\nin their beauty and power.',
			'Its life can span several hundred years. It’s said\nto devote its entire life to protecting gardens.',
		],
		[Language.Ja]: [
			'テリトリーは　見事な　花園。\n草花の　放つ　エネルギーを　浴びて\n自分の　パワーにするのだ。',
			'昔の　城の　主たちは　庭を　飾るため\nフラージェスを　招き入れ\n花園を　作らせた。',
			'育てた　花々を　操る。\nフラージェスの　放つ　花吹雪は\n美しさも　パワーも　圧倒的。',
			'数百年の　寿命を持つ。\n庭園を　守り続けることに\nその　一生を　ささげるという。',
		],
		[Language.ZhHant]: [
			'會操縱自己培育的花朵。\n花潔夫人使出的落英繽紛\n有著壓倒性的力與美。',
			'擁有數百年的壽命。\n據說牠終其一生都會\n不斷守護著庭園。',
		],
		[Language.ZhHans]: [
			'会操纵自己培育的花。\n花洁夫人释放的落英缤纷，\n其美貌和力量都是压倒性的。',
			'拥有几百年的寿命。\n据说会终其一生不断地守护着庭园。',
		],
	},
	[
		[
			Variety.Florges,
			248,
			11,
			100,
			[Type.Fairy],
			{
				frontDefault: '4dab1a3c.png',
				frontShiny: '63d6a253.png',
			},
			{
				[Stat.Hp]: {baseStat: 78},
				[Stat.Attack]: {baseStat: 65},
				[Stat.Defense]: {baseStat: 68},
				[Stat.SpecialAttack]: {baseStat: 112},
				[Stat.SpecialDefense]: {baseStat: 154, effort: 3},
				[Stat.Speed]: {baseStat: 75},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SolarBeam,
					Move.Safeguard,
					Move.Synthesis,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.PetalDance,
					Move.Wish,
					Move.MagicalLeaf,
					Move.GrassKnot,
					Move.PetalBlizzard,
					Move.DisarmingVoice,
					Move.GrassyTerrain,
					Move.MistyTerrain,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Metronome,
					Move.Swift,
					Move.Endure,
					Move.Charm,
					Move.BatonPass,
					Move.Trick,
					Move.SkillSwap,
					Move.MagicalLeaf,
					Move.StoredPower,
					Move.PetalBlizzard,
					Move.DisarmingVoice,
					Move.DrainingKiss,
					Move.GrassyTerrain,
					Move.MistyTerrain,
					Move.PollenPuff,
					Move.MistyExplosion,
					Move.TeraBlast,
					Move.Trailblaze,
					Move.ChillingWater,
					Move.AlluringVoice,
					Move.PsychicNoise,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.GigaDrain,
					Move.HelpingHand,
					Move.Endeavor,
					Move.SeedBomb,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					5,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.PetalDance,
					Move.Wish,
					Move.MagicalLeaf,
					Move.GrassKnot,
					Move.PetalBlizzard,
					Move.DisarmingVoice,
					Move.GrassyTerrain,
					Move.MistyTerrain,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.NaturePower,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HealBell,
					Move.Synthesis,
					Move.MagicCoat,
					Move.Covet,
					Move.WorrySeed,
					Move.AfterYou,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GigaDrain,
					Move.HelpingHand,
					Move.Endeavor,
					Move.SeedBomb,
					Move.Defog,
					Move.AllySwitch,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Aromatherapy,
					Move.LuckyChant,
					Move.FlowerShield,
					Move.Moonblast,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.PetalDance,
					Move.Wish,
					Move.Aromatherapy,
					Move.MagicalLeaf,
					Move.LuckyChant,
					Move.GrassKnot,
					Move.PetalBlizzard,
					Move.DisarmingVoice,
					Move.FlowerShield,
					Move.GrassyTerrain,
					Move.MistyTerrain,
					Move.Moonblast,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.PetalDance,
					Move.Wish,
					Move.Aromatherapy,
					Move.MagicalLeaf,
					Move.LuckyChant,
					Move.GrassKnot,
					Move.PetalBlizzard,
					Move.DisarmingVoice,
					Move.FlowerShield,
					Move.GrassyTerrain,
					Move.MistyTerrain,
					Move.Moonblast,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Flash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.GigaDrain,
					Move.HealBell,
					Move.Synthesis,
					Move.HelpingHand,
					Move.MagicCoat,
					Move.Endeavor,
					Move.Covet,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.AfterYou,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.PetalDance,
					Move.Wish,
					Move.Aromatherapy,
					Move.MagicalLeaf,
					Move.LuckyChant,
					Move.GrassKnot,
					Move.PetalBlizzard,
					Move.DisarmingVoice,
					Move.FlowerShield,
					Move.GrassyTerrain,
					Move.MistyTerrain,
					Move.Moonblast,
				),
			].flat(),
			[
				{
					ability: Ability.FlowerVeil,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Symbiosis,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.FlorgesRed,
					PokemonFormBits.Default,
					{
						frontDefault: '4dab1a3c.png',
						frontShiny: '63d6a253.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Florges Rouge'],
						[Language.De]: ['Florges (Rot)'],
						[Language.En]: ['Red Florges'],
					},
					{
						[Language.JaHrkt]: ['あかいはな'],
						[Language.Ko]: ['빨간 꽃'],
						[Language.Fr]: ['Fleur Rouge'],
						[Language.De]: ['Rotblütler'],
						[Language.Es]: ['Flor Roja'],
						[Language.It]: ['Fiore Rosso'],
						[Language.En]: ['Red Flower'],
					},
					'red',
				],
				[
					Form.FlorgesYellow,
					PokemonFormBits.None,
					{
						frontDefault: 'd39ff66b.png',
						frontShiny: '3de73f36.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Florges Jaune'],
						[Language.De]: ['Florges (Gelb)'],
						[Language.En]: ['Yellow Florges'],
					},
					{
						[Language.JaHrkt]: ['きいろのはな'],
						[Language.Ko]: ['노란 꽃'],
						[Language.Fr]: ['Fleur Jaune'],
						[Language.De]: ['Gelbblütler'],
						[Language.Es]: ['Flor Amarilla'],
						[Language.It]: ['Fiore Giallo'],
						[Language.En]: ['Yellow Flower'],
					},
					'yellow',
				],
				[
					Form.FlorgesOrange,
					PokemonFormBits.None,
					{
						frontDefault: 'b26bb3ea.png',
						frontShiny: '5ae936f2.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Florges Orange'],
						[Language.De]: ['Florges (Orange)'],
						[Language.En]: ['Orange Florges'],
					},
					{
						[Language.JaHrkt]: ['オレンジいろのはな'],
						[Language.Ko]: ['오렌지색 꽃'],
						[Language.Fr]: ['Fleur Orange'],
						[Language.De]: ['Orangeblütler'],
						[Language.Es]: ['Flor Naranja'],
						[Language.It]: ['Fiore Arancione'],
						[Language.En]: ['Orange Flower'],
					},
					'orange',
				],
				[
					Form.FlorgesBlue,
					PokemonFormBits.None,
					{
						frontDefault: 'd4d98c01.png',
						frontShiny: 'f2443146.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Florges Bleu'],
						[Language.De]: ['Florges (Blau)'],
						[Language.En]: ['Blue Florges'],
					},
					{
						[Language.JaHrkt]: ['あおいはな'],
						[Language.Ko]: ['파란 꽃'],
						[Language.Fr]: ['Fleur Bleue'],
						[Language.De]: ['Blaublütler'],
						[Language.Es]: ['Flor Azul'],
						[Language.It]: ['Fiore Blu'],
						[Language.En]: ['Blue Flower'],
					},
					'blue',
				],
				[
					Form.FlorgesWhite,
					PokemonFormBits.None,
					{
						frontDefault: 'e9597566.png',
						frontShiny: '5d8af7b6.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Florges Blanc'],
						[Language.De]: ['Florges (Weiß)'],
						[Language.En]: ['White Florges'],
					},
					{
						[Language.JaHrkt]: ['しろいはな'],
						[Language.Ko]: ['하얀 꽃'],
						[Language.Fr]: ['Fleur Blanche'],
						[Language.De]: ['Weißblütler'],
						[Language.Es]: ['Flor Blanca'],
						[Language.It]: ['Fiore Bianco'],
						[Language.En]: ['White Flower'],
					},
					'white',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Skiddo,
	70,
	200,
	Color.Brown,
	[EggGroup.Ground],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Quadruped,
	{
		[Language.JaHrkt]: ['メェークル'],
		[Language.Roomaji]: ['Meecle'],
		[Language.Ko]: ['메이클'],
		[Language.ZhHant]: ['坐騎小羊'],
		[Language.Fr]: ['Cabriolaine'],
		[Language.De]: ['Mähikel'],
		[Language.Es]: ['Skiddo'],
		[Language.It]: ['Skiddo'],
		[Language.En]: ['Skiddo'],
		[Language.Ja]: ['メェークル'],
		[Language.ZhHans]: ['坐骑小羊'],
	},
	{
		[Language.JaHrkt]: ['ライドポケモン'],
		[Language.Ko]: ['라이드포켓몬'],
		[Language.ZhHant]: ['坐騎寶可夢'],
		[Language.Fr]: ['Pokémon Monture'],
		[Language.De]: ['Ritt'],
		[Language.Es]: ['Pokémon Montura'],
		[Language.It]: ['Pokémon Cavalcatura'],
		[Language.En]: ['Mount Pokémon'],
		[Language.Ja]: ['ライドポケモン'],
		[Language.ZhHans]: ['坐骑宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'ひとと　くらすようになった\nさいしょの　ポケモンと　いわれる。\nおだやかな　せいかくの　ポケモン。',
			'みずと　たいようが　あれば　せなかの\nはっぱで　エネルギーが　つくれるので\nエサを　たべなくても　へいきなのだ。',
		],
		[Language.Ko]: [
			'사람과 살기 시작한\n최초의 포켓몬이라고 한다.\n온화한 성격의 포켓몬이다.',
			'물과 태양이 있으면 등에 있는\n잎으로 에너지를 만들 수 있어서\n먹이를 먹지 않아도 괜찮다.',
		],
		[Language.Fr]: [
			'Ce Pokémon paisible serait le premier à avoir jamais\ncohabité avec les humains.',
			'Tant qu’il a de l’eau et du soleil en abondance, ce\nPokémon n’a pas besoin de nourriture. Les feuilles sur\nson dos produisent son énergie par photosynthèse.',
			'Ce Pokémon paisible serait le premier à avoir jamais cohabité\navec les humains.',
			'Tant qu’il a de l’eau et du soleil en abondance,\nce Pokémon n’a pas besoin de nourriture. Les feuilles\nsur son dos produisent son énergie par photosynthèse.',
		],
		[Language.De]: [
			'Man sagt, es sei eines der ersten Pokémon,\ndie mit Menschen zusammengelebt haben.\nEs ist sehr ruhig und friedfertig.',
			'Solange es Wasser und Sonnenlicht hat, kann es mit\nden Blättern auf seinem Rücken Energie erzeugen.\nDeswegen kommt es auch ohne Futter zurecht.',
			'Man sagt, es sei eines der ersten Pokémon, die mit Menschen\nzusammengelebt haben. Es ist sehr ruhig und friedfertig.',
		],
		[Language.Es]: [
			'Se dice que fue la primera especie de Pokémon que se\nacostumbró a vivir con los seres humanos. Tiene una\nnaturaleza muy afable.',
			'Puede generar energía con las hojas que tiene en la\nespalda disponiendo tan solo de agua y luz solar.\nGracias a ello puede sobrevivir sin comer.',
			'Puede generar energía con las hojas que tiene en la espalda\ndisponiendo tan solo de agua y luz solar. Gracias a ello puede\nsobrevivir sin comer.',
		],
		[Language.It]: [
			'Ha un carattere pacifico ed è considerato il primo\nPokémon ad avere stretto amicizia con l’uomo.',
			'Ricava energia dal sole e dall’acqua grazie alle foglie\nche ha sul dorso. In questo modo può sopravvivere\nanche senza mangiare.',
			'Ha un carattere pacifico ed è considerato il primo Pokémon\nad avere stretto amicizia con l’uomo.',
			'Ricava energia dal sole e dall’acqua grazie alle foglie che ha\nsul dorso. In questo modo può sopravvivere anche senza\nmangiare.',
		],
		[Language.En]: [
			'Thought to be one of the first Pokémon to live in\nharmony with humans, it has a placid disposition.',
			'If it has sunshine and water, it doesn’t\nneed to eat, because it can generate\nenergy from the leaves on its back.',
		],
		[Language.Ja]: [
			'人と　暮らすようになった\n最初の　ポケモンと　言われる。\n穏やかな　性格の　ポケモン。',
			'水と　太陽が　あれば　背中の\n葉っぱで　エネルギーが　作れるので\nエサを　食べなくても　平気なのだ。',
		],
	},
	[
		[
			Variety.Skiddo,
			70,
			9,
			310,
			[Type.Grass],
			{
				frontDefault: 'b5a1e5b5.png',
				frontShiny: '60c73306.png',
				backDefault: 'd858b157.png',
				backShiny: '120d46cb.png',
			},
			{
				[Stat.Hp]: {baseStat: 66, effort: 1},
				[Stat.Attack]: {baseStat: 65},
				[Stat.Defense]: {baseStat: 48},
				[Stat.SpecialAttack]: {baseStat: 62},
				[Stat.SpecialDefense]: {baseStat: 57},
				[Stat.Speed]: {baseStat: 52},
			},
			{},
			[
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					7,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growth,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.DoubleEdge,
					Move.MudSlap,
					Move.Endure,
					Move.HelpingHand,
					Move.Endeavor,
					Move.BulletSeed,
					Move.MudShot,
					Move.MagicalLeaf,
					Move.LeafStorm,
					Move.GrassyTerrain,
					Move.PlayRough,
					Move.StompingTantrum,
					Move.GrassyGlide,
					Move.TeraBlast,
					Move.Trailblaze,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.SolarBeam,
					Move.Dig,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.BulkUp,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.Bulldoze,
					Move.WildCharge,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					13,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DefenseCurl,
					Move.Rollout,
					Move.MilkDrink,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.GigaDrain,
					Move.SeedBomb,
					Move.ZenHeadbutt,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Synthesis,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LeafBlade,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					42,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.GrassyTerrain,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					7,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growth,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					22,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					38,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.SolarBeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.BulkUp,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.Bulldoze,
					Move.WildCharge,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					12,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					13,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.Payback,
					Move.Round,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DefenseCurl,
					Move.Rollout,
					Move.MilkDrink,
					Move.GrassyTerrain,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.Synthesis,
					Move.WorrySeed,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GigaDrain,
					Move.SeedBomb,
					Move.ZenHeadbutt,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MilkDrink,
					50,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Synthesis,
					20,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					34,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeafBlade,
					45,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					16,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					30,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					7,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growth,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					22,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.SolarBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.BrickBreak,
					Move.BulkUp,
					Move.Payback,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.Round,
					Move.Bulldoze,
					Move.WorkUp,
					Move.WildCharge,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					13,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DefenseCurl,
					Move.Rollout,
					Move.MilkDrink,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MilkDrink,
					50,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Synthesis,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					34,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeafBlade,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					16,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					7,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growth,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					22,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.SolarBeam,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.BrickBreak,
					Move.SecretPower,
					Move.BulkUp,
					Move.Payback,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.Round,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Strength,
					Move.RockSmash,
					Move.Retaliate,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					12,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					13,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DefenseCurl,
					Move.Rollout,
					Move.MilkDrink,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.GigaDrain,
					Move.IronTail,
					Move.Synthesis,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.ZenHeadbutt,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MilkDrink,
					50,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Synthesis,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					34,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeafBlade,
					45,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					16,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					7,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growth,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.Strength,
					Move.SolarBeam,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.RockSmash,
					Move.Facade,
					Move.NaturePower,
					Move.BrickBreak,
					Move.BulkUp,
					Move.Payback,
					Move.EnergyBall,
					Move.GrassKnot,
					Move.Round,
					Move.Retaliate,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					13,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DefenseCurl,
					Move.Rollout,
					Move.MilkDrink,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MilkDrink,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Synthesis,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeafBlade,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					42,
				),
			].flat(),
			[
				{
					ability: Ability.SapSipper,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.GrassPelt,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Skiddo,
					PokemonFormBits.Default,
					{
						frontDefault: 'b5a1e5b5.png',
						frontShiny: '60c73306.png',
						backDefault: 'd858b157.png',
						backShiny: '120d46cb.png',
					},
					[Type.Grass],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Gogoat,
	70,
	45,
	Color.Brown,
	[EggGroup.Ground],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Quadruped,
	{
		[Language.JaHrkt]: ['ゴーゴート'],
		[Language.Roomaji]: ['Gogoat'],
		[Language.Ko]: ['고고트'],
		[Language.ZhHant]: ['坐騎山羊'],
		[Language.Fr]: ['Chevroum'],
		[Language.De]: ['Chevrumm'],
		[Language.Es]: ['Gogoat'],
		[Language.It]: ['Gogoat'],
		[Language.En]: ['Gogoat'],
		[Language.Ja]: ['ゴーゴート'],
		[Language.ZhHans]: ['坐骑山羊'],
	},
	{
		[Language.JaHrkt]: ['ライドポケモン'],
		[Language.Ko]: ['라이드포켓몬'],
		[Language.ZhHant]: ['坐騎寶可夢'],
		[Language.Fr]: ['Pokémon Monture'],
		[Language.De]: ['Ritt'],
		[Language.Es]: ['Pokémon Montura'],
		[Language.It]: ['Pokémon Cavalcatura'],
		[Language.En]: ['Mount Pokémon'],
		[Language.Ja]: ['ライドポケモン'],
		[Language.ZhHans]: ['坐骑宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'ツノを　にぎる　わずかな　ちがいから\nトレーナーの　きもちを　よみとるので\nいったいとなって　はしれるのだ。',
			'さんがくちたいで　せいかつする。\nツノを　ぶつけあう　ちからくらべの\nしょうしゃが　むれの　リーダーだ。',
		],
		[Language.Ko]: [
			'뿔을 잡을 때 느껴지는 작은 차이로\n트레이너의 마음을 읽어낼 수 있기에\n하나가 되어 달릴 수 있는 것이다.',
			'산악 지대에서 생활한다.\n뿔을 서로 부딪쳐서 힘을 겨루어\n승자가 무리의 리더가 된다.',
		],
		[Language.Fr]: [
			'Quand son Dresseur le tient par une corne, il est\ncapable de deviner ses plus subtils changements\nd’humeur et de s’y adapter.',
			'Ce Pokémon vit dans les régions montagneuses.\nLe chef du troupeau s’impose à l’issue d’un combat\nde cornes.',
			'Quand son Dresseur le tient par une corne, il est capable\nde deviner ses plus subtils changements d’humeur et\nde s’y adapter.',
			'Ce Pokémon vit dans les régions montagneuses. Le chef\ndu troupeau s’impose à l’issue d’un combat de cornes.',
		],
		[Language.De]: [
			'Es kann die Stimmung seines Trainers an der kleinsten\nVeränderung dessen Griffes um seine Hörner ablesen\nund galoppiert sofort los, wenn dieser es wünscht.',
			'Sie leben im Gebirge. Der Herdenanführer wird durch\nein Kräftemessen gewählt, bei dem die Anwärter ihre\nHörner gegeneinander rammen.',
			'Sie leben im Gebirge. Der Herdenanführer wird durch ein\nKräftemessen gewählt, bei dem die Anwärter ihre Hörner\ngegeneinander rammen.',
		],
		[Language.Es]: [
			'Percibe los sentimientos del Entrenador por la forma\nen la que agarra sus cuernos, aunque sean variaciones\nsutiles, y así avanzan como si fueran un solo ente.',
			'Habita en regiones montañosas. El líder de la manada\nse decide en una demostración de fuerza en la que los\ncontendientes luchan con los cuernos.',
			'Percibe los sentimientos del Entrenador por la forma en la que\nagarra sus cuernos, aunque sean variaciones sutiles, y así\navanzan como si fueran un solo ente.',
			'Habita en regiones montañosas. El líder de la manada se\ndecide en una demostración de fuerza en la que los\ncontendientes luchan con los cuernos.',
		],
		[Language.It]: [
			'È in grado di intuire gli stati d’animo del suo Allenatore\ndal modo in cui questi gli afferra le corna. Questo\npermette a entrambi di correre in perfetta armonia.',
			'Vive in regioni montuose. Questi Pokémon\nstabiliscono il leader del gruppo confrontandosi\na cornate.',
			'È in grado di intuire gli stati d’animo del suo Allenatore dal\nmodo in cui questi gli afferra le corna. Questo permette\na entrambi di correre in perfetta armonia.',
			'Vive in regioni montuose. Questi Pokémon stabiliscono il\nleader del gruppo confrontandosi a cornate.',
		],
		[Language.En]: [
			'It can tell how its Trainer is feeling by\nsubtle shifts in the grip on its horns.\nThis empathic sense lets them run as if one being.',
			'They inhabit mountainous regions.\nThe leader of the herd is decided by\na battle of clashing horns.',
		],
		[Language.Ja]: [
			'ツノを　握る　わずかな　違いから\nトレーナーの　気持ちを　読み取るので\n一体となって　走れるのだ。',
			'山岳地帯で　生活する。\nツノを　ぶつけ合う　力比べの　勝者が\n群れの　リーダーだ。',
		],
	},
	[
		[
			Variety.Gogoat,
			186,
			17,
			910,
			[Type.Grass],
			{
				frontDefault: '00d864e0.png',
				frontShiny: '8d73f2fb.png',
			},
			{
				[Stat.Hp]: {baseStat: 123, effort: 2},
				[Stat.Attack]: {baseStat: 100},
				[Stat.Defense]: {baseStat: 62},
				[Stat.SpecialAttack]: {baseStat: 97},
				[Stat.SpecialDefense]: {baseStat: 81},
				[Stat.Speed]: {baseStat: 68},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.TailWhip,
					Move.Earthquake,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growth,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.DoubleEdge,
					Move.MudSlap,
					Move.Endure,
					Move.HelpingHand,
					Move.Endeavor,
					Move.BulletSeed,
					Move.AerialAce,
					Move.MudShot,
					Move.MagicalLeaf,
					Move.LeafStorm,
					Move.GrassyTerrain,
					Move.PlayRough,
					Move.HighHorsepower,
					Move.ThroatChop,
					Move.GrassyGlide,
					Move.TeraBlast,
					Move.Trailblaze,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.BulkUp,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.Bulldoze,
					Move.WildCharge,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					13,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.GigaDrain,
					Move.SeedBomb,
					Move.ZenHeadbutt,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MilkDrink,
					58,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Synthesis,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LeafBlade,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					47,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
					Move.TailWhip,
					Move.Growth,
					Move.Earthquake,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					7,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					22,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.AerialAce,
					Move.BulkUp,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.Bulldoze,
					Move.WildCharge,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					12,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					13,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Attract,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.Payback,
					Move.Round,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.Synthesis,
					Move.Superpower,
					Move.Bounce,
					Move.WorrySeed,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GigaDrain,
					Move.SeedBomb,
					Move.ZenHeadbutt,
					Move.StompingTantrum,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MilkDrink,
					58,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Synthesis,
					20,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					1,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					34,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeafBlade,
					55,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					16,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					30,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					47,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.VineWhip,
					Move.Tackle,
					Move.TailWhip,
					Move.Growth,
					Move.Earthquake,
					Move.AerialAce,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					7,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					22,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.BrickBreak,
					Move.AerialAce,
					Move.BulkUp,
					Move.Payback,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.Round,
					Move.Bulldoze,
					Move.WorkUp,
					Move.WildCharge,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MilkDrink,
					58,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Synthesis,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					34,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeafBlade,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					16,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					47,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					7,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growth,
					Move.AerialAce,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					22,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.NaturePower,
					Move.BrickBreak,
					Move.SecretPower,
					Move.AerialAce,
					Move.BulkUp,
					Move.Payback,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.Round,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Strength,
					Move.RockSmash,
					Move.Retaliate,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					12,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					60,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.GigaDrain,
					Move.IronTail,
					Move.Synthesis,
					Move.Superpower,
					Move.Bounce,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.ZenHeadbutt,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MilkDrink,
					58,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Synthesis,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					65,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					34,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeafBlade,
					55,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					16,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					47,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.VineWhip,
					7,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growth,
					Move.AerialAce,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.HyperBeam,
					Move.Strength,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.RockSmash,
					Move.Facade,
					Move.NaturePower,
					Move.BrickBreak,
					Move.AerialAce,
					Move.BulkUp,
					Move.Payback,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.Round,
					Move.Retaliate,
					Move.Bulldoze,
					Move.WildCharge,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					60,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MilkDrink,
					58,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Synthesis,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					65,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BulkUp,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeafBlade,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					47,
				),
			].flat(),
			[
				{
					ability: Ability.SapSipper,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.GrassPelt,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Gogoat,
					PokemonFormBits.Default,
					{
						frontDefault: '00d864e0.png',
						frontShiny: '8d73f2fb.png',
					},
					[Type.Grass],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Pancham,
	50,
	220,
	Color.White,
	[EggGroup.Ground, EggGroup.Humanshape],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	25,
	GrowthRate.Medium,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['ヤンチャム'],
		[Language.Roomaji]: ['Yancham'],
		[Language.Ko]: ['판짱'],
		[Language.ZhHant]: ['頑皮熊貓'],
		[Language.Fr]: ['Pandespiègle'],
		[Language.De]: ['Pam-Pam'],
		[Language.Es]: ['Pancham'],
		[Language.It]: ['Pancham'],
		[Language.En]: ['Pancham'],
		[Language.Ja]: ['ヤンチャム'],
		[Language.ZhHans]: ['顽皮熊猫'],
	},
	{
		[Language.JaHrkt]: ['やんちゃポケモン'],
		[Language.Ko]: ['개구쟁이포켓몬'],
		[Language.ZhHant]: ['頑皮寶可夢'],
		[Language.Fr]: ['Pokémon Garnement'],
		[Language.De]: ['Verspielt-Pokémon'],
		[Language.Es]: ['Pokémon Juguetón'],
		[Language.It]: ['Pokémon Briccone'],
		[Language.En]: ['Playful Pokémon'],
		[Language.Ja]: ['やんちゃポケモン'],
		[Language.ZhHans]: ['顽皮宝可梦'],
	},
	{
		[Language.Fr]: [
			'Il fait de son mieux pour avoir un air patibulaire,\nmais il sourit béatement dès qu’on lui caresse la tête.',
			'Il fait son possible pour intimider ses adversaires\navec un regard menaçant, mais sans succès. Il a\nl’habitude de constamment mâcher une feuille.',
			'Il fait son possible pour intimider ses adversaires avec\nun regard menaçant, mais sans succès. Il a l’habitude\nde constamment mâcher une feuille.',
			'Il fait de son mieux pour avoir un air patibulaire, mais il sourit\nbéatement dès qu’on lui caresse la tête.',
			'Il grandit en copiant les poses et les mimiques\nde ce gros cador de Pandarbare, qu’il considère\ncomme son mentor.',
			'C’est juste pour se donner un air qu’il mâche\nune feuille. Comme c’est un petit galopin,\nil est déconseillé aux Dresseurs inexpérimentés.',
			'Il suit Pandarbare comme son ombre et\nle considère comme son chef. S’il fait\nune grosse bêtise, on lui confisque sa feuille.',
			'Il essaie à tout prix d’intimider son adversaire.\nS’il vous fait les gros yeux, faites-lui plaisir\net prenez l’air apeuré !',
			'C’est en copiant son mentor, Pandarbare,\nqu’il apprend toutes les ficelles du métier,\nde l’art du combat à la capture des proies.',
			'Il dévisage toujours ses adversaires d’un air\nrenfrogné pour être pris au sérieux, mais dès que\nla tension retombe, son sourire reprend le dessus.',
		],
		[Language.JaHrkt]: [
			'てきに　なめられないよう　がんばって\nにらみつけるが　こうかは　うすい。\nくわえた　はっぱが　トレードマーク。',
			'いっしょうけんめい　こわい　かおで\nあいてを　にらみつけるが　あたまを\nなでられると　つい　にやけてしまう。',
			'おやぶんの　ように　したっている\nゴロンダの　しぐさを　まねながら\nいちにんまえに　なっていくぞ。',
			'くわえている　はっぱに　いみは　なく\nただの　かっこつけ。　やんちゃなので\nしろうとトレーナーには　むかない。',
			'ゴロンダの　あとを　こぶんの　ように\nついていく。　おおきな　しっぱいを\nすると　はっぱを　とられてしまう。',
			'あいてを　ビビらせようと　ひっし。\nいっしょうけんめい　にらんできたら\nこわがるふりを　してあげよう。',
			'おやぶんと　したう　ゴロンダの\nまねを　する　ことで　たたかいかたや\nえものの　つかまえかたを　まなぶ。',
			'なめられないように　いつも　あいてを\nにらみつけているが　きが　ゆるむと\nつい　わらいがおに　なってしまう。',
		],
		[Language.Ko]: [
			'적이 얕잡아 보지 못하도록 열심히\n노려보지만, 효과가 약하다.\n물고 있는 잎사귀가 트레이드마크다.',
			'무서운 얼굴로 열심히\n상대를 노려보지만 머리를\n쓰다듬어주면 금방 해죽거린다.',
			'형님처럼 의지하며 따르는\n부란다의 행동을 따라 하면서\n성장해 간다.',
			'물고 있는 나뭇잎은 특별한 의미 없이\n그냥 멋이다. 개구쟁이라\n초급 트레이너에게는 적합하지 않다.',
			'부란다의 뒤를 부하처럼\n따라다닌다. 큰 실패를 하면\n잎사귀를 빼앗겨 버린다.',
			'상대를 겁먹게 하려고 필사적이다.\n열심히 노려 본다면\n겁먹은 척을 해 주자.',
			'형님처럼 따르는 부란다를\n따라 하면서 싸우는 법과\n먹이를 잡는 법을 배운다.',
			'얕잡아 보이지 않으려고 언제나\n상대를 노려보고 있지만 방심하면\n금방 웃는 얼굴이 되어버린다.',
		],
		[Language.De]: [
			'Es starrt den Gegner finster an, um nicht unterschätzt\nzu werden, hat aber nur wenig Erfolg damit.\nDas Kauen auf einem Blatt ist sein Markenzeichen.',
			'Es gibt alles, um ein finsteres Gesicht zu machen und\nsein Gegenüber böse anzustarren, aber wenn es am\nKopf gestreichelt wird, muss es unwillkürlich grinsen.',
			'Es starrt den Gegner finster an, um nicht unterschätzt zu\nwerden, hat aber nur wenig Erfolg damit. Das Kauen auf\neinem Blatt ist sein Markenzeichen.',
			'Pandagro ist sein großes Vorbild, das es stets\nnachahmt. Dabei ist es so eifrig, dass es daran\nwächst.',
			'Das Kauen auf einem Blatt ist sein Marken-\nzeichen. Dieses sehr ungezogene Pokémon\ndürfte frischgebackene Trainer überfordern.',
			'Es folgt treu seinem großen Vorbild, Pandagro.\nBegeht Pam-Pam einen schwerwiegenden\nFehler, nimmt ihm Pandagro sein Blatt ab.',
			'Mit seinem finsteren Blick versucht es, seinen\nGegner einzuschüchtern. Manchmal sollte man\nihm den Gefallen tun und verängstigt reagieren.',
			'Es imitiert sein großes Vorbild Pandagro, wo es\nnur kann. So lernt es, wie man kämpft und jagt.',
			'Es starrt den Gegner finster an, um nicht\nunterschätzt zu werden, doch wenn es sich\nentspannt, muss es unwillkürlich grinsen.',
		],
		[Language.Es]: [
			'Se esfuerza mucho para que el enemigo no lo\nmenosprecie, pero su mirada no intimida demasiado.\nSe caracteriza por mascar siempre una hoja.',
			'Se desvive tratando de fulminar a su rival con una\nmirada aterradora, pero en cuanto le acarician la\ncabeza, no puede evitar sonreír de oreja a oreja.',
			'Se esfuerza mucho para que el enemigo no lo menosprecie,\npero su mirada no intimida demasiado. Se caracteriza por\nmascar siempre una hoja.',
			'Se desvive tratando de fulminar a su rival con una mirada\naterradora, pero en cuanto le acarician la cabeza, no puede\nevitar sonreír de oreja a oreja.',
			'En su afán por madurar, toma como modelo a\nPangoro, hacia el que profesa sumo respeto.\nPara él es como una especie de mentor.',
			'Solo masca la hoja que lleva porque le gusta el\naire que le confiere. Su carácter pícaro lo hace\nincompatible con los Entrenadores novatos.',
			'Sigue los pasos de Pangoro, a quien considera\nsu maestro. En caso de cometer un grave error,\neste le arrebata la hierba de la boca.',
			'Intenta amedrentar a su oponente a toda costa.\nSi fija la mirada en alguien, solo hay que\naparentar tener miedo para hacerlo feliz.',
			'Sigue los pasos de Pangoro, a quien considera su\nmentor. A base de imitarlo, aprende a combatir y\na cazar presas.',
			'Siempre lanza una mirada fulminante al rival para\nque no lo menosprecie, pero en cuanto se relaja\nesboza sin querer una sonrisa.',
		],
		[Language.It]: [
			'Fa di tutto per farsi prendere sul serio dai nemici,\nma il suo sguardo di sfida non è molto efficace.\nHa il vizio di masticare una foglia.',
			'Ce la mette tutta per intimorire i nemici con uno\nsguardo truce, ma appena qualcuno gli accarezza\nla testa, diventa un tenerone.',
			'Fa di tutto per farsi prendere sul serio dai nemici, ma il suo\nsguardo di sfida non è molto efficace. Ha il vizio di masticare\nuna foglia.',
			'Ce la mette tutta per intimorire i nemici con uno sguardo\ntruce, ma appena qualcuno gli accarezza la testa, diventa\nun tenerone.',
			'Aspira a diventare un Pokémon rispettato e\ntemuto imitando Pangoro, che considera il suo\nmentore.',
			'Tiene in bocca una foglia per darsi un tono.\nEssendo piuttosto birichino, non è molto adatto\nper gli Allenatori inesperti.',
			'Segue Pangoro ovunque come un discepolo.\nSe commette gravi errori, gli viene confiscata\nla foglia che tiene in bocca.',
			'Cerca di intimorire l’avversario a tutti i costi.\nA volte fissa le persone per spaventarle e, per\nfarlo felice, basta far finta di aver paura.',
			'Considera Pangoro il suo capo e lo prende a\nmodello, imitandolo e imparando così a\nlottare e a cacciare le prede.',
			'Fa il duro e guarda tutti in cagnesco per\nessere preso sul serio, ma quando è\nrilassato gli sfugge sempre un sorriso.',
		],
		[Language.En]: [
			'It does its best to be taken seriously by its enemies,\nbut its glare is not sufficiently intimidating.\nChewing on a leaf is its trademark.',
			'It does its level best to glare and pull a scary face,\nbut it can’t help grinning if anyone pats its head.',
			'It grows up imitating the behavior of Pangoro,\nwhich it looks up to as a leader.',
			'There’s no point to the leaf in its mouth, aside\nfrom an effort to look cool. It’s mischievous,\nso it’s not well suited to inexperienced Trainers.',
			'It follows Pangoro around like a henchman.\nWhen Pancham makes a big mistake, its leaf\ngets taken away.',
			'It’s desperate to intimidate its opponents.\nBe nice and pretend to be scared if you\ncatch it glaring at you intensely.',
			'It chooses a Pangoro as its master and then\nimitates its master’s actions. This is how it learns\nto battle and hunt for prey.',
			'Wanting to make sure it’s taken seriously,\nPancham’s always giving others a glare.\nBut if it’s not focusing, it ends up smiling.',
		],
		[Language.Ja]: [
			'敵に　なめられないよう　がんばって\nにらみつけるが　効果は　薄い。\nくわえた　葉っぱが　トレードマーク。',
			'一生懸命　怖い　顔で　相手を\nにらみつけるが　頭を　なでられると\nつい　にやけてしまう。',
			'親分の　ように　慕っている\nゴロンダの　仕草を　真似ながら\n一人前に　なっていくぞ。',
			'咥えている　葉っぱに　意味は　なく\nただの　かっこつけ。　やんちゃなので\n素人トレーナーには　向かない。',
			'ゴロンダの　あとを　子分の　ように\nついていく。　大きな　失敗を\nすると　葉っぱを　取られてしまう。',
			'相手を　ビビらせようと　必死。\n一生懸命　睨んできたら\n怖がるふりを　してあげよう。',
			'親分と　慕う　ゴロンダの\n真似を　する　ことで　戦い方や\n獲物の　捕まえ方を　学ぶ。',
			'なめられないように　いつも　相手を\n睨みつけているが　気が　緩むと\nつい　笑い顔に　なってしまう。',
		],
		[Language.ZhHant]: [
			'不斷模仿被自己當成老大哥般\n敬仰著的流氓熊貓的舉止，\n由此漸漸變得獨當一面。',
			'嘴裡叼著的葉子沒有任何意義，\n只是為了裝酷。因為很頑皮，\n所以不適合沒經驗的訓練家。',
			'像跟班似地跟在流氓熊貓後面。\n如果犯了重大的錯誤，\n葉子就會被沒收。',
			'拼命地想讓對手害怕。\n如果牠用盡全力瞪著你看，\n就裝作自己很害怕吧。',
			'會模仿自己敬為頭領的\n流氓熊貓，向牠學習戰鬥\n及捕捉獵物的方法。',
			'為了不被小看而一直瞪著對手，\n然而繃緊的神經一旦稍有放鬆，\n牠就會在無意中露出笑臉。',
		],
		[Language.ZhHans]: [
			'模仿像头领那样敬仰着的\n流氓熊猫的举止，\n渐渐变得独当一面。',
			'嘴里叼着的叶子没有任何意义，\n只是为了装酷。因为很顽皮，\n所以不适合没经验的训练家。',
			'像跟班那样跟在流氓熊猫后头。\n如果犯了重大错误，\n叶子就会被拿走。',
			'拼命地想让对手惧怕。\n如果它用尽全力瞪着你的话，\n就装作自己很害怕吧。',
			'会模仿自己敬为头头的\n霸道熊猫，向它学习战斗\n及捕捉猎物的方法。',
			'为了不被小看而一直瞪着对手，\n然而绷紧的神经一旦稍有放松，\n它就会在无意中露出笑脸。',
		],
	},
	[
		[
			Variety.Pancham,
			70,
			6,
			80,
			[Type.Fighting],
			{
				frontDefault: '1383ea18.png',
				frontShiny: 'c8fbe639.png',
				backDefault: '2ba98f44.png',
				backShiny: '08498f36.png',
			},
			{
				[Stat.Hp]: {baseStat: 67},
				[Stat.Attack]: {baseStat: 82, effort: 1},
				[Stat.Defense]: {baseStat: 62},
				[Stat.SpecialAttack]: {baseStat: 46},
				[Stat.SpecialDefense]: {baseStat: 48},
				[Stat.Speed]: {baseStat: 43},
			},
			{
				[Version.X]: {
					[Item.MentalHerb]: 5,
				},
				[Version.Y]: {
					[Item.MentalHerb]: 5,
				},
				[Version.OmegaRuby]: {
					[Item.MentalHerb]: 5,
				},
				[Version.AlphaSapphire]: {
					[Item.MentalHerb]: 5,
				},
				[Version.Sun]: {
					[Item.MentalHerb]: 5,
				},
				[Version.Moon]: {
					[Item.MentalHerb]: 5,
				},
				[Version.UltraSun]: {
					[Item.MentalHerb]: 5,
				},
				[Version.UltraMoon]: {
					[Item.MentalHerb]: 5,
				},
			},
			[
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.MegaPunch,
					Move.MegaKick,
					Move.BodySlam,
					Move.Endure,
					Move.Crunch,
					Move.Taunt,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.FirePunch,
					Move.IcePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.Snore,
					Move.Uproar,
					Move.HelpingHand,
					Move.Superpower,
					Move.HyperVoice,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.GunkShot,
					Move.IronHead,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.Dig,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.BulkUp,
					Move.Payback,
					Move.Fling,
					Move.DarkPulse,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.FoulPlay,
					Move.Round,
					Move.Retaliate,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Egg,
					Move.SeismicToss,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.VitalThrow,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					33,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Taunt,
					8,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ArmThrust,
					4,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.StormThrow,
					Move.QuickGuard,
					Move.Quash,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LowSweep,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.CircleThrow,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PartingShot,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Egg,
					Move.PowerTrip,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.LashOut,
					Move.Coaching,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.KarateChop,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.CometPunch,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.IcePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.Snore,
					Move.Uproar,
					Move.HelpingHand,
					Move.Superpower,
					Move.HyperVoice,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.GunkShot,
					Move.IronHead,
					Move.FoulPlay,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.BulkUp,
					Move.Payback,
					Move.Fling,
					Move.DarkPulse,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Round,
					Move.Bulldoze,
					Move.WorkUp,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					33,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.AerialAce,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.FocusPunch,
					Move.KnockOff,
					Move.Endeavor,
					Move.Snatch,
					Move.Block,
					Move.Covet,
					Move.DualChop,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.VitalThrow,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ArmThrust,
					7,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SkyUppercut,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Egg,
					Move.MeFirst,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.StormThrow,
					Move.FoulPlay,
					Move.QuickGuard,
					Move.Quash,
					Move.PowerTrip,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.CircleThrow,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PartingShot,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.KarateChop,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.CometPunch,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Roar,
					Move.Surf,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Torment,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.Payback,
					Move.Fling,
					Move.DarkPulse,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Round,
					Move.EchoedVoice,
					Move.Bulldoze,
					Move.WorkUp,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					33,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.VitalThrow,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					39,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ArmThrust,
					7,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SkyUppercut,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.MeFirst,
					Move.StormThrow,
					Move.FoulPlay,
					Move.QuickGuard,
					Move.Quash,
					Move.PowerTrip,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.CircleThrow,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PartingShot,
					45,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.KarateChop,
					12,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.CometPunch,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.IcePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.Snore,
					Move.Spite,
					Move.Uproar,
					Move.FocusPunch,
					Move.HelpingHand,
					Move.Superpower,
					Move.KnockOff,
					Move.Endeavor,
					Move.Snatch,
					Move.HyperVoice,
					Move.Block,
					Move.Covet,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.GunkShot,
					Move.IronHead,
					Move.FoulPlay,
					Move.DualChop,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Roar,
					Move.Surf,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Torment,
					Move.Facade,
					Move.BrickBreak,
					Move.SecretPower,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.Payback,
					Move.Fling,
					Move.DarkPulse,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Round,
					Move.EchoedVoice,
					Move.Retaliate,
					Move.Bulldoze,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.RockSmash,
					Move.PowerUpPunch,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					33,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.VitalThrow,
					27,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					39,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ArmThrust,
					7,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SkyUppercut,
					48,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.MeFirst,
					Move.StormThrow,
					Move.FoulPlay,
					Move.QuickGuard,
					Move.Quash,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.CircleThrow,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PartingShot,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.KarateChop,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.CometPunch,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Cut,
					Move.Roar,
					Move.Surf,
					Move.Strength,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.RockSmash,
					Move.Torment,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.Payback,
					Move.Fling,
					Move.DarkPulse,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Round,
					Move.EchoedVoice,
					Move.Retaliate,
					Move.Bulldoze,
					Move.Confide,
					Move.PowerUpPunch,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.VitalThrow,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ArmThrust,
					7,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SkyUppercut,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.MeFirst,
					Move.StormThrow,
					Move.FoulPlay,
					Move.QuickGuard,
					Move.Quash,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.CircleThrow,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PartingShot,
					45,
				),
			].flat(),
			[
				{
					ability: Ability.IronFist,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.MoldBreaker,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Scrappy,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Pancham,
					PokemonFormBits.Default,
					{
						frontDefault: '1383ea18.png',
						frontShiny: 'c8fbe639.png',
						backDefault: '2ba98f44.png',
						backShiny: '08498f36.png',
					},
					[Type.Fighting],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Pangoro,
	50,
	65,
	Color.White,
	[EggGroup.Ground, EggGroup.Humanshape],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	25,
	GrowthRate.Medium,
	Shape.Humanoid,
	{
		[Language.JaHrkt]: ['ゴロンダ'],
		[Language.Roomaji]: ['Goronda'],
		[Language.Ko]: ['부란다'],
		[Language.ZhHant]: ['流氓熊貓'],
		[Language.Fr]: ['Pandarbare'],
		[Language.De]: ['Pandagro'],
		[Language.Es]: ['Pangoro'],
		[Language.It]: ['Pangoro'],
		[Language.En]: ['Pangoro'],
		[Language.Ja]: ['ゴロンダ'],
		[Language.ZhHans]: ['霸道熊猫'],
	},
	{
		[Language.JaHrkt]: ['こわもてポケモン'],
		[Language.Ko]: ['무서운얼굴포켓몬'],
		[Language.ZhHant]: ['惡顏寶可夢'],
		[Language.Fr]: ['Pokémon Patibulaire'],
		[Language.De]: ['Gaunerblick-Pokémon'],
		[Language.Es]: ['Pokémon Rostro Fiero'],
		[Language.It]: ['Pokémon Occhiotruce'],
		[Language.En]: ['Daunting Pokémon'],
		[Language.Ja]: ['こわもてポケモン'],
		[Language.ZhHans]: ['恶颜宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'きしょうが　あらく　けんかっぱやいが\nよわいものいじめは　ゆるさない。\nはっぱで　てきの　うごきを　よむ。',
			'こうげきを　うけても　ひるまずに\nとっしんして　でんちゅうを　へしおる\nパワーの　わんりょくで　ぶちのめす。',
			'うでっぷしが　じまんで　ごうかい。\nゴロンダの　トレーナーに　なりたいなら\nこぶしで　かたりあう　しかない。',
			'たけの　はっぱの　ゆれで　てきの\nうごきを　よむ。　ケンカっぱやいが\nなかまへの　じょうは　あつい。',
			'うでっぷしが　じまんの　ワイルドな\nポケモン。　ごうかいな　せいしつに\nほれこむ　トレーナーも　おおい。',
			'こぶしで　かたる　タイプ。　ガタガタ\nいわず　ぶんなぐり　ダンプカーも\nふっとばす　とっしんを　かます。',
			'きしょうが　あらく　わんりょくで\nだまらせる。　タチフサグマとの\nいっきうちに　とうしを　もやす。',
			'はっぱで　あいての　うごきを　よむ。\nおおがた　ダンプカーを　いちげきで\nスクラップにする　パンチを　もつ。',
		],
		[Language.Ko]: [
			'성질이 거칠어 툭하면 싸우려 들지만\n약자를 괴롭히는 일은 용서하지 않는다.\n잎사귀로 적의 움직임을 읽는다.',
			'공격을 받아도 풀죽지 않고\n돌진하며 전신주도 부러뜨리는\n파워의 완력으로 때려눕힌다.',
			'완력이 자랑거리이며 호쾌하다.\n부란다의 트레이너가 되고 싶으면\n주먹으로 이야기하는 수밖에 없다.',
			'대나무 잎의 움직임으로 적의\n행동을 읽는다. 싸움꾼이지만\n동료에 대한 정은 두텁다.',
			'완력을 뽐내는 와일드한\n포켓몬. 호쾌한 성질에\n반하는 트레이너도 많다.',
			'주먹으로 이야기하는 타입이다.\n긴말 없이 냅다 때려서\n덤프트럭도 날려버리는 돌진을 먹인다.',
			'성질이 사나워서 완력으로 상대를\n조용하게 만든다. 가로막구리와의\n결투에 투지를 불태운다.',
			'잎사귀로 상대의 움직임을 읽는다.\n대형 덤프트럭을 일격에 고철로\n만들어버리는 펀치를 가졌다.',
		],
		[Language.Fr]: [
			'D’un tempérament fougueux, il ne supporte pas que\nl’on s’en prenne aux faibles. Sa feuille lui permet\nde deviner les actions de l’ennemi.',
			'Il encaisse les attaques de plein fouet sans même\ntiquer et il poursuit sa route. Il étale ses ennemis d’un\ncoup de patte capable de briser un poteau électrique.',
			'Il encaisse les attaques de plein fouet sans même tiquer\net il poursuit sa route. Il étale ses ennemis d’un coup de patte\ncapable de briser un poteau électrique.',
			'Ses gros bras sont sa plus grande fierté. Si vous\nvoulez devenir un Dresseur de Pandarbare,\nil va falloir jouer des poings !',
			'Il peut détecter les mouvements ennemis grâce\naux vibrations de sa feuille. Avec ses amis,\nce grand lunatique a en fait le cœur sur la main.',
			'Ce Pokémon féroce est très fier de ses gros\nbras. Beaucoup de Dresseurs l’apprécient\npour son côté truculent.',
			'Il est du genre à laisser ses poings parler :\nil martèle ses ennemis et charge avec assez\nde force pour envoyer voler un camion-benne.',
			'Ce Pokémon agressif a recours à la force\npour faire taire ceux qui le contrarient.\nIl adore combattre les Ixon.',
			'Il anticipe les mouvements de son adversaire\ngrâce à sa feuille. Ses coups de poing peuvent\nréduire un camion-benne en un tas de ferraille.',
		],
		[Language.De]: [
			'Es ist sehr grob und streitlustig, lässt es aber nicht zu,\ndass Schwächere gemobbt werden. Mit seinem Blatt\nerspürt es die Bewegungen des Gegners.',
			'Es greift mit mächtigen Armen an, die so stark sind,\ndass sie Strommasten wie Streichhölzer umknicken\nkönnen. Gegenangriffe steckt es unbeeindruckt ein.',
			'Es ist sehr grob und streitlustig, lässt es aber nicht zu, dass\nSchwächere gemobbt werden. Mit seinem Blatt erspürt es die\nBewegungen des Gegners.',
			'Seine mächtigen Arme sind sehr imposant.\nWer als Pandagro-Trainer Karriere machen will,\nmuss wohl die Fäuste sprechen lassen!',
			'Mit seinem Blatt erspürt es die Bewegungen\ndes Gegners. Es ist sehr grob und streitlustig,\nhält aber stets zu seinen Artgenossen.',
			'Ein ungezügeltes Pokémon, das mit seinen\nFäusten ordentlich austeilen kann. Viele Trainer\nsind völlig vernarrt in sein energisches Wesen.',
			'Ein Pokémon, das lieber die Fäuste sprechen\nlässt, als lange Reden zu schwingen. Selbst\nKipplaster fliegen meterweit, wenn es sie rammt.',
			'Dieses aggressive Pokémon bringt Gegner mit\nseiner Muskelkraft zum Verstummen. Es liebt\nKämpfe gegen Barrikadax.',
			'Mit seinem Blatt erspürt es die Bewegungen des\nGegners. Seine Schläge sind so stark, dass es\nsogar Kipplaster zu Schrott verarbeiten kann.',
		],
		[Language.Es]: [
			'Es muy temperamental, pero no permite que nadie se\nmeta con los débiles. Mediante su hoja, predice los\nmovimientos del enemigo.',
			'No se arredra ante los ataques y embiste con una\nfuerza tan abrumadora que sería capaz de derribar\nun robusto poste telefónico de hormigón.',
			'Es muy temperamental, pero no permite que nadie se meta\ncon los débiles. Mediante su hoja, predice los movimientos\ndel enemigo.',
			'No se arredra ante los ataques y embiste con una fuerza tan\nabrumadora que sería capaz de derribar un robusto poste\ntelefónico de hormigón.',
			'Su aspecto imponente rinde justicia a la fuerza\nde la que hace gala. Todo aspirante a entrenarlo\ndeberá entender el lenguaje de los puños.',
			'Predice los movimientos del enemigo mediante\nsu hoja. Pese a su carácter temperamental, se\nmuestra muy afable con sus compañeros.',
			'Pokémon un tanto agresivo que se jacta de la\nfuerza de sus puños. A muchos Entrenadores\nles llama la atención su carácter atrevido.',
			'Prefiere solucionar las disputas a mamporros.\nPuede embestir un camión y hacerlo volar por\nlos aires a largas distancias sin despeinarse.',
			'Este Pokémon de carácter agresivo lo soluciona\ntodo a golpes. Desata su espíritu combativo al\nenfrentarse a los Obstagoon.',
			'La hoja que lleva en la boca le permite predecir\nlos movimientos del rival. Puede reducir un\ncamión a chatarra de un solo puñetazo.',
		],
		[Language.It]: [
			'Ha un carattere focoso e attaccabrighe, ma non\nsopporta chi maltratta i più deboli. Usa la foglia che\ntiene in bocca per prevedere i movimenti dei nemici.',
			'Quando lotta, avanza impetuosamente senza curarsi\ndei colpi nemici. Le sue braccia sono talmente forti\nche potrebbe spezzare in due un palo della luce.',
			'Ha un carattere focoso e attaccabrighe, ma non sopporta\nchi maltratta i più deboli. Usa la foglia che tiene in bocca\nper prevedere i movimenti dei nemici.',
			'Quando lotta, avanza impetuosamente senza curarsi dei colpi\nnemici. Le sue braccia sono talmente forti che potrebbe\nspezzare in due un palo della luce.',
			'Va molto fiero dell’enorme forza delle sue\nbraccia. Gli Allenatori sono avvisati: la lingua\nche capisce meglio è quella dei pugni.',
			'È un attaccabrighe, ma è anche generoso con gli\namici. Prevede i movimenti dei nemici dalle\nvibrazioni della foglia che tiene in bocca.',
			'È aggressivo e va molto fiero della forza delle\nsue braccia. Molti Allenatori vanno matti per\nil suo carattere intrepido.',
			'Preferisce parlare la lingua dei pugni. Si lancia\nalla carica con un impeto tale da far prendere\nil volo a un autocarro.',
			'Ha un’indole focosa e sistema ogni diatriba con\nla forza delle braccia. Il suo spirito combattivo\narde quando lotta con Obstagoon.',
			'Prevede i movimenti dei nemici dalle vibrazioni\ndella foglia che tiene in bocca. Con un pugno\npuò fare a pezzi un camion ribaltabile.',
		],
		[Language.En]: [
			'Although it possesses a violent temperament,\nit won’t put up with bullying. It uses the leaf in\nits mouth to sense the movements of its enemies.',
			'It charges ahead and bashes its opponents like\na berserker, uncaring about any hits it might take.\nIts arms are mighty enough to snap a telephone pole.',
			'It boasts superb physical strength. Those who\nwish to become Pangoro’s Trainer have no\nchoice but to converse with their fists.',
			'From the slight twitches of its bamboo leaf, it\ndeduces its opponent’s movements. It’s eager to\ntussle but kindhearted toward its companions.',
			'This rowdy Pokémon boasts great physical\nstrength. Many Trainers are also smitten by its\nlively character.',
			'Pangoro is the type to talk with its fists. It\ndoesn’t say much as it pummels opponents with\nenough force to send a dump truck flying.',
			'This Pokémon is quick to anger, and it has no\nproblem using its prodigious strength to get its\nway. It lives for duels against Obstagoon.',
			'Using its leaf, Pangoro can predict the moves of\nits opponents. It strikes with punches that can\nturn a dump truck into scrap with just one hit.',
		],
		[Language.Ja]: [
			'気性が　荒く　ケンカっ早いが\n弱いものいじめは　許さない。\n葉っぱで　敵の　動きを　読む。',
			'攻撃を　受けても　ひるまずに　突進して\n電柱を　へし折る\nパワーの　腕力で　ぶちのめす。',
			'腕っぷしが　自慢で　豪快。\nゴロンダの　トレーナーに　なりたいなら\n拳で　語り合う　しかない。',
			'竹の　葉っぱの　揺れで　敵の\n動きを　読む。　ケンカっ早いが\n仲間への　情は　厚い。',
			'腕っ節が　自慢の　ワイルドな\nポケモン。　豪快な　性質に\n惚れこむ　トレーナーも　多い。',
			'こぶしで　語る　タイプ。　ガタガタ\nいわず　ぶん殴り　ダンプカーも\nふっ飛ばす　突進を　かます。',
			'気性が　荒く　腕力で\n黙らせる。　タチフサグマとの\n一騎打ちに　闘志を　燃やす。',
			'葉っぱで　相手の　動きを　読む。\n大型　ダンプカーを　一撃で\nスクラップにする　パンチを　もつ。',
		],
		[Language.ZhHant]: [
			'以腕力為傲，個性豪邁。\n想要成為流氓熊貓的訓練家的話，\n只能用拳頭來和牠交心。',
			'透過竹葉的擺動來洞悉\n敵人的動向。性格很粗暴，\n但是對夥伴的感情很深厚。',
			'以自己的腕力為傲，\n充滿野性的寶可夢。\n豪爽的性情令許多訓練家為之著迷。',
			'屬於用拳頭來說話的類型。\n會二話不說地揮拳痛毆，\n或使出連大卡車都能撞飛的猛撞。',
			'性情暴躁，靠力氣解決問題。\n為與堵攔熊一對一比拼\n而燃燒自己的鬥志。',
			'透過葉子來洞悉敵人的動向。\n只要使出一記拳擊就能\n讓大型砂石車變成廢鐵。',
		],
		[Language.ZhHans]: [
			'以腕力为傲，很豪迈。\n想要成为流氓熊猫的训练家的话，\n只能用拳头来和它磋商。',
			'通过竹叶的摇摆来洞悉\n敌人的动向。很粗暴，\n但是对伙伴的感情很深厚。',
			'以腕力为傲的野性的宝可梦。\n性格豪爽，\n因此迷恋它的训练家也很多。',
			'是用拳头来说话的那一型。\n一句话也不说就猛殴，\n会使出连翻斗车都能击飞的猛撞。',
			'性格暴躁，靠力气解决问题。\n为与堵拦熊一对一比拼\n而燃烧自己的斗志。',
			'通过叶子来洞悉敌人的动向。\n只要使出一记拳击就能\n让大型翻斗车变成废铁。',
		],
	},
	[
		[
			Variety.Pangoro,
			173,
			21,
			1360,
			[Type.Fighting, Type.Dark],
			{
				frontDefault: 'fbbc650d.png',
				frontShiny: '4fbc41b4.png',
				backDefault: '05ca71d5.png',
				backShiny: '68f90e4f.png',
			},
			{
				[Stat.Hp]: {baseStat: 95},
				[Stat.Attack]: {baseStat: 124, effort: 2},
				[Stat.Defense]: {baseStat: 78},
				[Stat.SpecialAttack]: {baseStat: 69},
				[Stat.SpecialDefense]: {baseStat: 71},
				[Stat.Speed]: {baseStat: 58},
			},
			{
				[Version.X]: {
					[Item.MentalHerb]: 5,
				},
				[Version.Y]: {
					[Item.MentalHerb]: 5,
				},
				[Version.OmegaRuby]: {
					[Item.MentalHerb]: 5,
				},
				[Version.AlphaSapphire]: {
					[Item.MentalHerb]: 5,
				},
				[Version.Sun]: {
					[Item.MentalHerb]: 5,
				},
				[Version.Moon]: {
					[Item.MentalHerb]: 5,
				},
				[Version.UltraSun]: {
					[Item.MentalHerb]: 5,
				},
				[Version.UltraMoon]: {
					[Item.MentalHerb]: 5,
				},
			},
			[
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.MegaPunch,
					Move.MegaKick,
					Move.BodySlam,
					Move.FocusEnergy,
					Move.Reversal,
					Move.ScaryFace,
					Move.Endure,
					Move.Crunch,
					Move.BeatUp,
					Move.Revenge,
					Move.CloseCombat,
					Move.DarkestLariat,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.FirePunch,
					Move.IcePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.Snore,
					Move.Outrage,
					Move.Uproar,
					Move.HelpingHand,
					Move.Superpower,
					Move.HyperVoice,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.GunkShot,
					Move.IronHead,
					Move.FoulPlay,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.DragonClaw,
					Move.BulkUp,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Round,
					Move.Retaliate,
					Move.Bulldoze,
					Move.Snarl,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.VitalThrow,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Taunt,
					Move.NightSlash,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ArmThrust,
					Move.BulletPunch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HammerArm,
					58,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LowSweep,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					52,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.CircleThrow,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PartingShot,
					46,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.ThroatChop,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.LashOut,
					Move.Coaching,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.KarateChop,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.CometPunch,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.IcePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.Snore,
					Move.Outrage,
					Move.Uproar,
					Move.HelpingHand,
					Move.Superpower,
					Move.HyperVoice,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.GunkShot,
					Move.IronHead,
					Move.FoulPlay,
					Move.LaserFocus,
					Move.ThroatChop,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.DragonClaw,
					Move.BulkUp,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Round,
					Move.Bulldoze,
					Move.WorkUp,
					Move.Snarl,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
					Move.ArmThrust,
					Move.BulletPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.AerialAce,
					Move.Embargo,
					Move.EchoedVoice,
					Move.Quash,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.FocusPunch,
					Move.KnockOff,
					Move.Endeavor,
					Move.Snatch,
					Move.Block,
					Move.Covet,
					Move.DualChop,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.VitalThrow,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Taunt,
					65,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ArmThrust,
					7,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SkyUppercut,
					52,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.HammerArm,
					Move.Entrainment,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HammerArm,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletPunch,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.LowSweep,
					Move.WorkUp,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LowSweep,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.CircleThrow,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PartingShot,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.KarateChop,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.CometPunch,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Roar,
					Move.Surf,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.BulkUp,
					Move.Payback,
					Move.Embargo,
					Move.Fling,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Round,
					Move.EchoedVoice,
					Move.Quash,
					Move.Bulldoze,
					Move.WorkUp,
					Move.Snarl,
					Move.Confide,
					Move.Infestation,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
					Move.ArmThrust,
					Move.HammerArm,
					Move.BulletPunch,
					Move.LowSweep,
					Move.Entrainment,
					Move.WorkUp,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.VitalThrow,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Taunt,
					65,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ArmThrust,
					7,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SkyUppercut,
					52,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HammerArm,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletPunch,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LowSweep,
					57,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.CircleThrow,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PartingShot,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.KarateChop,
					12,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.CometPunch,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.IcePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.Snore,
					Move.Spite,
					Move.Outrage,
					Move.Uproar,
					Move.FocusPunch,
					Move.HelpingHand,
					Move.Superpower,
					Move.KnockOff,
					Move.Endeavor,
					Move.Snatch,
					Move.HyperVoice,
					Move.Block,
					Move.Covet,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.GunkShot,
					Move.IronHead,
					Move.FoulPlay,
					Move.DualChop,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Roar,
					Move.Surf,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.SecretPower,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.BulkUp,
					Move.Payback,
					Move.Embargo,
					Move.Fling,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Round,
					Move.EchoedVoice,
					Move.Quash,
					Move.Retaliate,
					Move.Bulldoze,
					Move.Snarl,
					Move.Confide,
					Move.Infestation,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.RockSmash,
					Move.HoneClaws,
					Move.PowerUpPunch,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
					Move.HammerArm,
					Move.Entrainment,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.VitalThrow,
					27,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Taunt,
					65,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ArmThrust,
					7,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SkyUppercut,
					52,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HammerArm,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LowSweep,
					70,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					45,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.CircleThrow,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PartingShot,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.KarateChop,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.CometPunch,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Cut,
					Move.Roar,
					Move.Surf,
					Move.HyperBeam,
					Move.Strength,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.RockSmash,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.BulkUp,
					Move.Payback,
					Move.Embargo,
					Move.Fling,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.HoneClaws,
					Move.LowSweep,
					Move.Round,
					Move.EchoedVoice,
					Move.Quash,
					Move.Retaliate,
					Move.Bulldoze,
					Move.Snarl,
					Move.Confide,
					Move.Infestation,
					Move.PowerUpPunch,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Leer,
					Move.HammerArm,
					Move.Entrainment,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.VitalThrow,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Taunt,
					65,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ArmThrust,
					7,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SkyUppercut,
					52,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HammerArm,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LowSweep,
					70,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.CircleThrow,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WorkUp,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PartingShot,
					48,
				),
			].flat(),
			[
				{
					ability: Ability.IronFist,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.MoldBreaker,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Scrappy,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Pangoro,
					PokemonFormBits.Default,
					{
						frontDefault: 'fbbc650d.png',
						frontShiny: '4fbc41b4.png',
						backDefault: '05ca71d5.png',
						backShiny: '68f90e4f.png',
					},
					[Type.Fighting, Type.Dark],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Furfrou,
	70,
	160,
	Color.White,
	[EggGroup.Ground],
	4,
	PokemonSpeciesBits.FormsSwitchable,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Quadruped,
	{
		[Language.JaHrkt]: ['トリミアン'],
		[Language.Roomaji]: ['Trimmien'],
		[Language.Ko]: ['트리미앙'],
		[Language.ZhHant]: ['多麗米亞'],
		[Language.Fr]: ['Couafarel'],
		[Language.De]: ['Coiffwaff'],
		[Language.Es]: ['Furfrou'],
		[Language.It]: ['Furfrou'],
		[Language.En]: ['Furfrou'],
		[Language.Ja]: ['トリミアン'],
		[Language.ZhHans]: ['多丽米亚'],
	},
	{
		[Language.JaHrkt]: ['プードルポケモン'],
		[Language.Ko]: ['푸들포켓몬'],
		[Language.ZhHant]: ['貴賓犬寶可夢'],
		[Language.Fr]: ['Pokémon Caniche'],
		[Language.De]: ['Pudel'],
		[Language.Es]: ['Pokémon Caniche'],
		[Language.It]: ['Pokémon Barboncino'],
		[Language.En]: ['Poodle Pokémon'],
		[Language.Ja]: ['プードルポケモン'],
		[Language.ZhHans]: ['贵宾犬宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'ボサボサの　たいもうを　かりこむと\nすがたが　うつくしくなる　だけでなく\nからだの　キレが　よくなるのだ。',
			'おおむかしの　カロスちほうでは\nおうさまを　ごえいする　やくめを\nあたえられた　ポケモン。',
			'たいもうを　いかに　うつくしく\nカットするか　きぞくたちの　あいだで\nきそわれた　じだいが　あった。',
			'ほうっておくと　たいもうは　どんどん\nのびつづけるが　しんらいした\nものにしか　カットは　ゆるさない。',
		],
		[Language.Ko]: [
			'복슬복슬한 털을 깎고 다듬으면\n모습이 아름다워질 뿐만 아니라\n몸의 움직임도 좋아진다.',
			'먼 옛날 칼로스지방에서\n왕을 호위하는 역할을\n맡았던 포켓몬이다.',
			'털을 얼마나 아름답게\n커트하는지 귀족들 사이에서\n경쟁하던 시대가 있었다.',
			'가만히 두면 털이 점점\n자라지만 신뢰하는 자가 아니면\n커트를 허락하지 않는다.',
		],
		[Language.Fr]: [
			'Si son abondante fourrure gagne à être toilettée,\nce n’est pas qu’une question de style. En effet, cela\nlui permet également de se mouvoir plus librement.',
			'Il y a fort longtemps dans la région de Kalos,\nce Pokémon fut le gardien des rois et des reines.',
			'Si son abondante fourrure gagne à être toilettée, ce n’est pas\nqu’une question de style. En effet, cela lui permet également\nde se mouvoir plus librement.',
			'Il y a fort longtemps dans la région de Kalos, ce Pokémon fut\nle gardien des rois et des reines.',
			'Il fut un temps où la noblesse organisait\ndes concours pour déterminer quel Couafarel\narborait la plus belle coupe.',
			'Sa fourrure pousse indéfiniment, mais il refuse\nde se faire couper la toison par une personne\nen qui il n’a pas confiance.',
		],
		[Language.De]: [
			'Schneidet man sein Fell zurecht, wird es\nnicht nur schöner, sondern auch beweglicher.',
			'Vor langer Zeit wurde dieses Pokémon in der\nKalos-Region als Leibgarde des Königs eingesetzt.',
			'Schneidet man sein Fell zurecht, wird es nicht nur schöner,\nsondern auch beweglicher.',
			'Vor langer Zeit wurde dieses Pokémon in der Kalos-Region\nals Leibgarde des Königs eingesetzt.',
			'Es gab eine Zeit, in der Adlige darum stritten,\nwer seinem Coiffwaff den schönsten Schnitt\nverpassen könne.',
			'Trimmt man sein Fell nicht regelmäßig, wächst es\nohne Unterlass. Allerdings lässt es sich nur von\njemandem frisieren, dem es traut.',
		],
		[Language.Es]: [
			'Cuando le esquilan su mullido pelaje, no solo mejora\nsu apariencia, sino que aumenta su agilidad.',
			'Antiguamente, estos Pokémon desempeñaban el\ncometido de guardián del rey en la región de Kalos.',
			'Cuando le esquilan su mullido pelaje, no solo mejora su\napariencia, sino que aumenta su agilidad.',
			'Antiguamente, estos Pokémon desempeñaban el cometido de\nguardián del rey en la región de Kalos.',
			'Hubo una época en la que los aristócratas\ncompetían entre ellos procurando que el corte\nde pelo de su Furfrou fuera el mejor de todos.',
			'El pelo le crece sin cesar, pero solo deja que se\nlo corten aquellos de quienes se fía plenamente.',
		],
		[Language.It]: [
			'La toelettatura del manto vaporoso non solo lo rende\npiù bello, ma gli consente anche di muoversi\npiù liberamente.',
			'Nell’antica Kalos, questo Pokémon aveva il compito\ndi proteggere i re.',
			'La toelettatura del manto vaporoso non solo lo rende più\nbello, ma gli consente anche di muoversi più liberamente.',
			'Nell’antica Kalos, questo Pokémon aveva il compito di\nproteggere i re.',
			'In passato i nobili gareggiavano tra loro per\nstabilire quale Furfrou avesse il taglio più bello.',
			'Se non viene tagliato, il suo pelo continua\na crescere a dismisura. Si lascia tosare\nsolamente dalle persone di cui si fida.',
		],
		[Language.En]: [
			'Trimming its fluffy fur not only makes\nit more elegant but also increases the\nswiftness of its movements.',
			'Historically, in the Kalos region, these Pokémon\nwere the designated guardians of the king.',
			'There was an era when aristocrats would\ncompete to see who could trim their Furfrou’s\nfur into the most exquisite style.',
			'Left alone, its fur will grow longer and longer,\nbut it will only allow someone it trusts to cut it.',
		],
		[Language.Ja]: [
			'ボサボサの　体毛を　刈りこむと\n姿が　美しくなる　だけでなく\n身体の　キレが　良くなるのだ。',
			'大昔の　カロス地方では\n王様を　護衛する　役目を\n与えられた　ポケモン。',
			'体毛を　いかに　美しく\nカットするか　貴族たちの　間で\n競われた　時代が　あった。',
			'放っておくと　体毛は　どんどん\n伸び続けるが　信頼した\n者にしか　カットは　許さない。',
		],
		[Language.ZhHant]: [
			'曾經有過一個時代，\n貴族之間會互相比較\n誰能把牠的體毛修剪得更美麗。',
			'如果放著不管，體毛就會\n不斷變長，但牠只允許\n信賴的人幫自己修剪。',
		],
		[Language.ZhHans]: [
			'曾有过一个时代，\n贵族之间会比赛\n如何把它的体毛修剪得美丽。',
			'如果置之不理，\n体毛会不断地长长，\n但只允许信赖的人修剪。',
		],
	},
	[
		[
			Variety.Furfrou,
			165,
			12,
			280,
			[Type.Normal],
			{
				frontDefault: '00874d4d.png',
				frontShiny: 'f2572be0.png',
			},
			{
				[Stat.Hp]: {baseStat: 75},
				[Stat.Attack]: {baseStat: 80},
				[Stat.Defense]: {baseStat: 60},
				[Stat.SpecialAttack]: {baseStat: 65},
				[Stat.SpecialDefense]: {baseStat: 90},
				[Stat.Speed]: {baseStat: 102, effort: 1},
			},
			{},
			[
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SandAttack,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Headbutt,
					12,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					22,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.ThunderWave,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.UTurn,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.Round,
					Move.EchoedVoice,
					Move.WildCharge,
					Move.Snarl,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Mimic,
					Move.RolePlay,
					Move.Refresh,
					Move.Captivate,
					Move.WorkUp,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.Uproar,
					Move.HelpingHand,
					Move.Endeavor,
					Move.HyperVoice,
					Move.LastResort,
					Move.ZenHeadbutt,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					38,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Tutor,
					Move.RolePlay,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Retaliate,
					33,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.CottonGuard,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BabyDollEyes,
					9,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SandAttack,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Headbutt,
					12,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					22,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.ThunderWave,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.UTurn,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.Round,
					Move.EchoedVoice,
					Move.WorkUp,
					Move.WildCharge,
					Move.Snarl,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Mimic,
					Move.RolePlay,
					Move.Refresh,
					Move.Captivate,
					Move.WorkUp,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Retaliate,
					33,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.CottonGuard,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BabyDollEyes,
					9,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SandAttack,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Headbutt,
					12,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					22,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.ThunderWave,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.SecretPower,
					Move.UTurn,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.Round,
					Move.EchoedVoice,
					Move.WildCharge,
					Move.Snarl,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Dig,
					Move.Flash,
					Move.RockSmash,
					Move.Retaliate,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Mimic,
					Move.RolePlay,
					Move.Refresh,
					Move.Captivate,
					Move.WorkUp,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.Uproar,
					Move.HelpingHand,
					Move.RolePlay,
					Move.Endeavor,
					Move.HyperVoice,
					Move.LastResort,
					Move.ZenHeadbutt,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					27,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Retaliate,
					33,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.CottonGuard,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BabyDollEyes,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SandAttack,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Headbutt,
					12,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growl,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					22,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.ThunderWave,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.RockSmash,
					Move.Facade,
					Move.UTurn,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.Round,
					Move.EchoedVoice,
					Move.Retaliate,
					Move.WildCharge,
					Move.Snarl,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Mimic,
					Move.RolePlay,
					Move.Refresh,
					Move.Captivate,
					Move.WorkUp,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Retaliate,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.CottonGuard,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BabyDollEyes,
					9,
				),
			].flat(),
			[
				{
					ability: Ability.FurCoat,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.FurfrouNatural,
					PokemonFormBits.Default,
					{
						frontDefault: '00874d4d.png',
						frontShiny: 'f2572be0.png',
					},
					[Type.Normal],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Couafarel Sauvage'],
						[Language.De]: ['Coiffwaff'],
						[Language.En]: ['Natural Furfrou'],
					},
					{
						[Language.JaHrkt]: ['やせいのすがた'],
						[Language.Ko]: ['야생의 모습'],
						[Language.Fr]: ['Forme Sauvage'],
						[Language.De]: ['Zottelform'],
						[Language.Es]: ['Forma Salvaje'],
						[Language.It]: ['Forma Selvatica'],
						[Language.En]: ['Natural Form'],
					},
					'natural',
				],
				[
					Form.FurfrouHeart,
					PokemonFormBits.None,
					{
						frontDefault: '67ea3926.png',
						frontShiny: '928b2d1a.png',
					},
					[Type.Normal],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Couafarel Cœur'],
						[Language.De]: ['Coiffwaff (Herzchen)'],
						[Language.En]: ['Heart Furfrou'],
					},
					{
						[Language.JaHrkt]: ['ハートカット'],
						[Language.Ko]: ['하트컷'],
						[Language.Fr]: ['Coupe Cœur'],
						[Language.De]: ['Herzchenschnitt'],
						[Language.Es]: ['Corte Corazón'],
						[Language.It]: ['Taglio Cuore'],
						[Language.En]: ['Heart Trim'],
					},
					'heart',
				],
				[
					Form.FurfrouStar,
					PokemonFormBits.None,
					{
						frontDefault: '7ad20b07.png',
						frontShiny: '5b02cdb7.png',
					},
					[Type.Normal],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Couafarel Étoile'],
						[Language.De]: ['Coiffwaff (Sternchen)'],
						[Language.En]: ['Star Furfrou'],
					},
					{
						[Language.JaHrkt]: ['スターカット'],
						[Language.Ko]: ['스타컷'],
						[Language.Fr]: ['Coupe Étoile'],
						[Language.De]: ['Sternchenschnitt'],
						[Language.Es]: ['Corte Estrella'],
						[Language.It]: ['Taglio Stella'],
						[Language.En]: ['Star Trim'],
					},
					'star',
				],
				[
					Form.FurfrouDiamond,
					PokemonFormBits.None,
					{
						frontDefault: '9ef64010.png',
						frontShiny: 'c93871d0.png',
					},
					[Type.Normal],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Couafarel Diamant'],
						[Language.De]: ['Coiffwaff (Diamanten)'],
						[Language.En]: ['Diamond Furfrou'],
					},
					{
						[Language.JaHrkt]: ['ダイヤカット'],
						[Language.Ko]: ['다이아컷'],
						[Language.Fr]: ['Coupe Diamant'],
						[Language.De]: ['Diamantenschnitt'],
						[Language.Es]: ['Corte Rombo'],
						[Language.It]: ['Taglio Diamante'],
						[Language.En]: ['Diamond Trim'],
					},
					'diamond',
				],
				[
					Form.FurfrouDebutante,
					PokemonFormBits.None,
					{
						frontDefault: 'b83b097e.png',
						frontShiny: '4ce24852.png',
					},
					[Type.Normal],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Couafarel Demoiselle'],
						[Language.De]: ['Coiffwaff (Fräulein)'],
						[Language.En]: ['Debutante Furfrou'],
					},
					{
						[Language.JaHrkt]: ['レディカット'],
						[Language.Ko]: ['레이디컷'],
						[Language.Fr]: ['Coupe Demoiselle'],
						[Language.De]: ['Fräuleinschnitt'],
						[Language.Es]: ['Corte Señorita'],
						[Language.It]: ['Taglio Signorina'],
						[Language.En]: ['Debutante Trim'],
					},
					'debutante',
				],
				[
					Form.FurfrouMatron,
					PokemonFormBits.None,
					{
						frontDefault: 'ebd8bdcc.png',
						frontShiny: '8b4baa55.png',
					},
					[Type.Normal],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Couafarel Madame'],
						[Language.De]: ['Coiffwaff (Damen)'],
						[Language.En]: ['Matron Furfrou'],
					},
					{
						[Language.JaHrkt]: ['マダムカット'],
						[Language.Ko]: ['마담컷'],
						[Language.Fr]: ['Coupe Madame'],
						[Language.De]: ['Damenschnitt'],
						[Language.Es]: ['Corte Dama'],
						[Language.It]: ['Taglio Gentildonna'],
						[Language.En]: ['Matron Trim'],
					},
					'matron',
				],
				[
					Form.FurfrouDandy,
					PokemonFormBits.None,
					{
						frontDefault: '005d0b4c.png',
						frontShiny: '98b92840.png',
					},
					[Type.Normal],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Couafarel Monsieur'],
						[Language.De]: ['Coiffwaff (Kavalier)'],
						[Language.En]: ['Dandy Furfrou'],
					},
					{
						[Language.JaHrkt]: ['ジェントルカット'],
						[Language.Ko]: ['젠틀컷'],
						[Language.Fr]: ['Coupe Monsieur'],
						[Language.De]: ['Kavaliersschnitt'],
						[Language.Es]: ['Corte Caballero'],
						[Language.It]: ['Taglio Gentiluomo'],
						[Language.En]: ['Dandy Trim'],
					},
					'dandy',
				],
				[
					Form.FurfrouLaReine,
					PokemonFormBits.None,
					{
						frontDefault: 'da90e69e.png',
						frontShiny: '97f8e932.png',
					},
					[Type.Normal],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Couafarel Reine'],
						[Language.De]: ['Coiffwaff (Königin)'],
						[Language.En]: ['La Reine Furfrou'],
					},
					{
						[Language.JaHrkt]: ['クイーンカット'],
						[Language.Ko]: ['퀸컷'],
						[Language.Fr]: ['Coupe Reine'],
						[Language.De]: ['Königinnenschnitt'],
						[Language.Es]: ['Corte Aristocrático'],
						[Language.It]: ['Taglio Regina'],
						[Language.En]: ['La Reine Trim'],
					},
					'la-reine',
				],
				[
					Form.FurfrouKabuki,
					PokemonFormBits.None,
					{
						frontDefault: '84fbaa3b.png',
						frontShiny: '3fdd366f.png',
					},
					[Type.Normal],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Couafarel Kabuki'],
						[Language.De]: ['Coiffwaff (Kabuki)'],
						[Language.En]: ['Kabuki Furfrou'],
					},
					{
						[Language.JaHrkt]: ['カブキカット'],
						[Language.Ko]: ['가부키컷'],
						[Language.Fr]: ['Coupe Kabuki'],
						[Language.De]: ['Kabuki-Schnitt'],
						[Language.Es]: ['Corte Kabuki'],
						[Language.It]: ['Taglio Kabuki'],
						[Language.En]: ['Kabuki Trim'],
					},
					'kabuki',
				],
				[
					Form.FurfrouPharaoh,
					PokemonFormBits.None,
					{
						frontDefault: 'f8e995cf.png',
						frontShiny: 'aa7df257.png',
					},
					[Type.Normal],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Couafarel Pharaon'],
						[Language.De]: ['Coiffwaff (Herrscher)'],
						[Language.En]: ['Pharaoh Furfrou'],
					},
					{
						[Language.JaHrkt]: ['キングダムカット'],
						[Language.Ko]: ['킹덤컷'],
						[Language.Fr]: ['Coupe Pharaon'],
						[Language.De]: ['Herrscherschnitt'],
						[Language.Es]: ['Corte Faraónico'],
						[Language.It]: ['Taglio Faraone'],
						[Language.En]: ['Pharaoh Trim'],
					},
					'pharaoh',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Espurr,
	50,
	190,
	Color.Gray,
	[EggGroup.Ground],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['ニャスパー'],
		[Language.Roomaji]: ['Nyasper'],
		[Language.Ko]: ['냐스퍼'],
		[Language.ZhHant]: ['妙喵'],
		[Language.Fr]: ['Psystigri'],
		[Language.De]: ['Psiau'],
		[Language.Es]: ['Espurr'],
		[Language.It]: ['Espurr'],
		[Language.En]: ['Espurr'],
		[Language.Ja]: ['ニャスパー'],
		[Language.ZhHans]: ['妙喵'],
	},
	{
		[Language.JaHrkt]: ['じせいポケモン'],
		[Language.Ko]: ['자제포켓몬'],
		[Language.ZhHant]: ['自制寶可夢'],
		[Language.Fr]: ['Pokémon Retenue'],
		[Language.De]: ['Zügelungs-Pokémon'],
		[Language.Es]: ['Pokémon Moderación'],
		[Language.It]: ['Pokémon Moderazione'],
		[Language.En]: ['Restraint Pokémon'],
		[Language.Ja]: ['じせいポケモン'],
		[Language.ZhHans]: ['自制宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'きょうりょくな　サイコパワーが\nもれださないように　ほうしゅつする\nきかんを　みみで　ふさいでいるのだ。',
			'１００メートルいないの　ものを\nふきとばす　ほどの　サイコパワーを\nうまく　コントロール　できないのだ。',
			'いつも　むひょうじょうだが　じつは\nきょうりょくな　サイコパワーが\nもれださないように　ひっしなのだ。',
			'プロレスラーを　ふきとばす　ほどの\nサイコパワーを　うちに　ひめているが\nコントロールできずに　こまっている。',
		],
		[Language.Ko]: [
			'강력한 사이코 파워가\n새어 나가지 않도록\n방출되는 기관을 귀로 막고 있다.',
			'100m 이내에 있는 것을\n날려버릴 정도의 사이코 파워를\n잘 컨트롤하지 못한다.',
			'언제나 무표정하지만 실제로는\n강력한 사이코 파워가\n새어 나가지 않게 하기 위해 필사적이다.',
			'프로레슬러를 날려 버릴 정도의\n사이코 파워를 속에 지니고 있지만\n컨트롤이 되지 않아 난처해하고 있다.',
		],
		[Language.Fr]: [
			'Il couvre la source de ses pouvoirs psychiques hors\ndu commun avec ses oreilles afin d’éviter\nles accidents.',
			'Il a quelques difficultés à contrôler son pouvoir\npsychique. Grâce à celui-ci, il peut projeter en l’air\ntous les objets dans un rayon de 100 m.',
			'Il couvre la source de ses pouvoirs psychiques hors\ndu commun avec ses oreilles afin d’éviter les accidents.',
			'Il a quelques difficultés à contrôler son pouvoir psychique.\nGrâce à celui-ci, il peut projeter en l’air tous les objets\ndans un rayon de 100 m.',
			'Sous son masque inexpressif, il est en fait\nconstamment en train d’essayer de contenir\nses puissants pouvoirs psychiques.',
			'Il possède des pouvoirs psychiques si puissants\nqu’il peut faire valser un catcheur.\nMalheureusement, il a du mal à les contrôler.',
		],
		[Language.De]: [
			'Damit die starken Psycho-Kräfte dieses Pokémon\nnicht unkontrolliert nach außen dringen, ist das Organ,\ndas diese freisetzt, von seinen Ohren bedeckt.',
			'Es verfügt zwar über genug Psycho-Kräfte, um Objekte\nin einem Umkreis von 100 m wegzublasen, aber es\nkann sie noch nicht gut kontrollieren.',
			'Damit die starken Psycho-Kräfte dieses Pokémon nicht\nunkontrolliert nach außen dringen, ist das Organ, das diese\nfreisetzt, von seinen Ohren bedeckt.',
			'Es verfügt zwar über genug Psycho-Kräfte, um Objekte in\neinem Umkreis von 100 m wegzublasen, aber es kann sie\nnoch nicht gut kontrollieren.',
			'Sein Gesicht ist stets ausdruckslos. Grund dafür\nist die enorme Anstrengung, die es aufbringen\nmuss, um seine Psycho-Kräfte zu kontrollieren.',
			'Mit seinen Psycho-Kräften könnte es selbst\nProfi-Wrestler vom Platz fegen. Es fällt ihm aber\nschwer, diese Kräfte zu kontrollieren.',
		],
		[Language.Es]: [
			'Protege con las orejas el órgano con el que irradia su\nintenso poder psíquico para evitar que este se escape\nal exterior.',
			'Posee poderes psíquicos suficientes para lanzar por\nlos aires objetos situados en un radio de 100 metros,\npero carece de pericia para controlarlos.',
			'Protege con las orejas el órgano con el que irradia su intenso\npoder psíquico para evitar que este se escape al exterior.',
			'Posee poderes psíquicos suficientes para lanzar por los aires\nobjetos situados en un radio de 100 metros, pero carece de\npericia para controlarlos.',
			'Su inexpresividad aparente esconde una lucha\ntitánica por contener su inmenso poder psíquico.',
			'Es capaz de mandar por los aires a un luchador\nprofesional gracias a sus poderes psíquicos, pero\ntiene serios problemas para controlarlos.',
		],
		[Language.It]: [
			'Copre con le orecchie gli organi che presiedono ai suoi\ngrandi poteri psichici per non perderne il controllo.',
			'Controlla a fatica un potere psichico enorme, in grado\ndi scaraventare in aria oggetti nel raggio di 100 m.',
			'Controlla a fatica un potere psichico enorme, in grado di\nscaraventare in aria oggetti nel raggio di 100 m.',
			'Il suo sguardo è inespressivo, ma in realtà sta\nfacendo uno sforzo enorme per tenere sotto\ncontrollo i suoi potentissimi poteri psichici.',
			'I suoi poteri psichici sono talmente forti da\nscaraventare in aria un lottatore di wrestling,\nma ha seri problemi nel controllarli.',
		],
		[Language.En]: [
			'The organ that emits its intense psychic power is\nsheltered by its ears to keep power from leaking out.',
			'It has enough psychic energy to blast\neverything within 300 feet of itself,\nbut it has no control over its power.',
			'Though Espurr’s expression never changes,\nbehind that blank stare is an intense struggle to\ncontain its devastating psychic power.',
			'There’s enough psychic power in Espurr to send a\nwrestler flying, but because this power can’t be\ncontrolled, Espurr finds it troublesome.',
		],
		[Language.Ja]: [
			'強力な　サイコパワーが\n漏れ出さないように　放出する　器官を\n耳で　ふさいでいるのだ。',
			'１００メートル以内の　ものを\n吹き飛ばす　ほどの　サイコパワーを\nうまく　コントロール　できないのだ。',
			'いつも　無表情だが　じつは\n強力な　サイコパワーが\n漏れ出さないように　必死なのだ。',
			'プロレスラーを　吹きとばす　ほどの\nサイコパワーを　内に　秘めているが\nコントロールできずに　困っている。',
		],
		[Language.ZhHant]: [
			'雖然一直都面無表情，\n但是那其實是因為牠在努力\n不讓自己強大的精神力量漏出。',
			'雖然擁有可以彈飛\n職業摔角選手的精神力量，\n卻因無法好好控制而感到煩惱。',
		],
		[Language.ZhHans]: [
			'虽然一直都面无表情，\n但是那其实是因为它在努力\n不让自己强力的精神力量漏出。',
			'虽然拥有可以弹飞\n职业摔角手的精神力量，\n却因无法好好控制而感到烦恼。',
		],
	},
	[
		[
			Variety.Espurr,
			71,
			3,
			35,
			[Type.Psychic],
			{
				frontDefault: 'e6ecf00a.png',
				frontShiny: '28e6a7e1.png',
				backDefault: '9922ba33.png',
				backShiny: '40efd0fd.png',
			},
			{
				[Stat.Hp]: {baseStat: 62},
				[Stat.Attack]: {baseStat: 48},
				[Stat.Defense]: {baseStat: 54},
				[Stat.SpecialAttack]: {baseStat: 63},
				[Stat.SpecialDefense]: {baseStat: 60},
				[Stat.Speed]: {baseStat: 68, effort: 1},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					21,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Psybeam,
					Move.Charm,
					Move.ShadowBall,
					Move.DisarmingVoice,
					Move.TeraBlast,
					Move.PsychicNoise,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.Trick,
					Move.CalmMind,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 30,
					},

					Move.LightScreen,
					Move.Reflect,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Swift,
					Move.Endure,
					Move.FakeTears,
					Move.NastyPlot,
					Move.PlayRough,
					Move.ExpandingForce,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FakeOut,
					3,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HelpingHand,
					Move.Gravity,
					Move.ZenHeadbutt,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.Yawn,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.SkillSwap,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.Tickle,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					33,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					6,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.PayDay,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Swift,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Endure,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.HelpingHand,
					Move.Trick,
					Move.SkillSwap,
					Move.FakeTears,
					Move.CalmMind,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.NastyPlot,
					Move.ZenHeadbutt,
					Move.TrickRoom,
					Move.Psyshock,
					Move.PlayRough,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					21,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 30,
					},

					Move.LightScreen,
					Move.Reflect,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronTail,
					Move.WonderRoom,
					Move.MagicRoom,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Safeguard,
					Move.Payback,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FakeOut,
					3,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Yawn,
					Move.Tickle,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					33,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					6,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.ExpandingForce,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.CalmMind,
					Move.Payback,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.WorkUp,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Barrier,
					Move.Assist,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					13,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.HelpingHand,
					Move.Trick,
					Move.SkillSwap,
					Move.Gravity,
					Move.ZenHeadbutt,
					Move.WonderRoom,
					Move.Telekinesis,
					Move.MagicRoom,
					Move.AllySwitch,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HealBell,
					Move.RolePlay,
					Move.MagicCoat,
					Move.Recycle,
					Move.Snatch,
					Move.SignalBeam,
					Move.Covet,
					Move.ShockWave,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FakeOut,
					19,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Trick,
					Move.Yawn,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					22,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.CalmMind,
					Move.Payback,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.WorkUp,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Barrier,
					Move.Trick,
					Move.Assist,
					Move.Yawn,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FakeOut,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					22,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Flash,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.SecretPower,
					Move.CalmMind,
					Move.Payback,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Barrier,
					Move.Trick,
					Move.Assist,
					Move.Yawn,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					13,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HealBell,
					Move.IronTail,
					Move.HelpingHand,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.Recycle,
					Move.Snatch,
					Move.SignalBeam,
					Move.Covet,
					Move.ShockWave,
					Move.Gravity,
					Move.ZenHeadbutt,
					Move.WonderRoom,
					Move.MagicRoom,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FakeOut,
					19,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					22,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.CalmMind,
					Move.Payback,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Barrier,
					Move.Trick,
					Move.Assist,
					Move.Yawn,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FakeOut,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					22,
				),
			].flat(),
			[
				{
					ability: Ability.KeenEye,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Infiltrator,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.OwnTempo,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Espurr,
					PokemonFormBits.Default,
					{
						frontDefault: 'e6ecf00a.png',
						frontShiny: '28e6a7e1.png',
						backDefault: '9922ba33.png',
						backShiny: '40efd0fd.png',
					},
					[Type.Psychic],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Meowstic,
	50,
	75,
	Color.Blue,
	[EggGroup.Ground],
	4,
	PokemonSpeciesBits.GenderDifferences,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['ニャオニクス'],
		[Language.Roomaji]: ['Nyaonix'],
		[Language.Ko]: ['냐오닉스'],
		[Language.ZhHant]: ['超能妙喵'],
		[Language.Fr]: ['Mistigrix'],
		[Language.De]: ['Psiaugon'],
		[Language.Es]: ['Meowstic'],
		[Language.It]: ['Meowstic'],
		[Language.En]: ['Meowstic'],
		[Language.Ja]: ['ニャオニクス'],
		[Language.ZhHans]: ['超能妙喵'],
	},
	{
		[Language.JaHrkt]: ['よくせいポケモン'],
		[Language.Ko]: ['억제포켓몬'],
		[Language.ZhHant]: ['抑制寶可夢'],
		[Language.Fr]: ['Pokémon SelfContrôle'],
		[Language.De]: ['Fassungs-Pokémon'],
		[Language.Es]: ['Pokémon Autocontrol'],
		[Language.It]: ['Pokémon Temperanza'],
		[Language.En]: ['Constraint Pokémon'],
		[Language.Ja]: ['よくせいポケモン'],
		[Language.ZhHans]: ['抑制宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'きけんが　せまると　みみを　もちあげ\n１０トン　トラックを　ひねりつぶす\nサイコパワーを　かいほうする。',
			'みみの　うちがわの　めだまもようから\nサイコパワーを　だすが　あまりにも\nきょうりょくなので　ふさいでいる。',
			'みみの　うちがわの　めだまもようから\nサイコパワーを　はなつが　ふだんは\nその　ちからを　かくしている。',
			'オスは　ぼうえい　ほんのうが　つよく\nじぶんや　パートナーを　まもるときに\nさいだいきゅうの　パワーを　だす。',
		],
		[Language.Ko]: [
			'위험이 다가오면 귀를 들어 올리고\n10톤 트럭을 눌러 부술 정도의\n사이코 파워를 방출한다.',
			'귀 안쪽의 눈알 모양에서\n사이코 파워를 내지만\n너무나도 강력하여 귀를 막고 있다.',
			'귀 안쪽의 눈알 모양에서\n사이코 파워를 내지만 평소에는\n그 힘을 숨기고 있다.',
			'수컷은 방어 본능이 강해서\n자신과 파트너를 지킬 때\n최대의 파워를 쓴다.',
		],
		[Language.Fr]: [
			'S’il se sent menacé, il lève les oreilles et déchaîne\nun pouvoir psychique capable de réduire en miettes\nun camion de 10 t.',
			'Les motifs en forme d’yeux à l’intérieur de ses oreilles\némettent une force psychique tellement puissante\nqu’il est contraint de les garder couverts.',
			'S’il se sent menacé, il lève les oreilles et déchaîne un pouvoir\npsychique capable de réduire en miettes un camion de 10 t.',
			'Les motifs en forme d’yeux à l’intérieur de ses oreilles\némettent une force psychique tellement puissante qu’il est\ncontraint de les garder couverts.',
			'Les motifs en forme d’yeux, à l’intérieur de ses\noreilles, sont la source de ses pouvoirs psychiques.\nLa plupart du temps, il cache ces pouvoirs.',
			'Le mâle a un instinct de défense très développé.\nIl n’hésite pas à lancer une attaque à pleine\npuissance pour protéger ses partenaires et lui.',
		],
		[Language.De]: [
			'In Gefahrensituationen hebt es seine Ohren an und\nsetzt Psycho-Kräfte frei, die einen 10 t schweren LKW\nzu Schrott verarbeiten können.',
			'Über das Augenmuster auf der Innenseite seiner Ohren\nsetzt es seine Psycho-Kräfte frei. Da diese aber viel zu\nstark sind, hält es das Muster bedeckt.',
			'In Gefahrensituationen hebt es seine Ohren an und setzt\nPsycho-Kräfte frei, die einen 10 t schweren LKW zu Schrott\nverarbeiten können.',
			'Über das Augenmuster auf der Innenseite seiner Ohren setzt\nes seine Psycho-Kräfte frei. Da diese aber viel zu stark sind,\nhält es das Muster bedeckt.',
			'Über das Augenmuster auf der Innenseite seiner\nOhren kann es seine Psycho-Kräfte freisetzen.\nFür gewöhnlich hält es sie aber verborgen.',
			'Männliche Psiaugon haben einen ausgeprägten\nBeschützerinstinkt. Sie sind dann am stärksten,\nwenn sie sich oder ihren Trainer verteidigen.',
		],
		[Language.Es]: [
			'Cuando percibe peligro, yergue sus orejas y desata un\npoder psíquico capaz de levantar un camión de unas\n10 toneladas.',
			'Las marcas en forma de ojos que tiene en las orejas\nemiten poderes psíquicos, pero su potencia es tan\navasalladora que las mantiene tapadas.',
			'Cuando percibe peligro, yergue sus orejas y desata un poder\npsíquico capaz de levantar un camión de unas 10 toneladas.',
			'Las marcas en forma de ojos que tiene en las orejas emiten\npoderes psíquicos, pero su potencia es tan avasalladora que\nlas mantiene tapadas.',
			'Emite sus poderes psíquicos por las marcas en\nforma de ojos que tiene en las orejas, aunque,\npor lo general, las mantiene ocultas.',
			'El fuerte instinto protector de los machos los\nlleva a liberar todo su poder cuando se trata de\ndefenderse a sí mismos o a su Entrenador.',
		],
		[Language.It]: [
			'Se si sente minacciato, drizza le orecchie e libera un\npotere psichico devastante, in grado di accartocciare\nun camion da 10 t come se fosse una lattina.',
			'I motivi a forma di occhio all’interno delle orecchie\nsono la fonte del suo potere psichico. Li tiene coperti\nper controllarne l’immensa potenza.',
			'Se si sente minacciato, drizza le orecchie e libera un potere\npsichico devastante, in grado di accartocciare un camion da\n10 t come se fosse una lattina.',
			'I motivi a forma di occhio all’interno delle orecchie sono la\nfonte del suo potere psichico. Li tiene coperti per controllarne\nl’immensa potenza.',
			'I motivi a forma di occhio all’interno delle\norecchie sono la fonte del suo potere psichico.\nDi solito tiene nascosti i suoi poteri.',
			'Il maschio ha un forte istinto protettivo.\nSe deve difendere se stesso o il suo Allenatore,\nattacca con una forza formidabile.',
		],
		[Language.En]: [
			'When in danger, it raises its ears and\nreleases enough psychic power to\ngrind a 10-ton truck into dust.',
			'The eyeball patterns on the interior of its ears\nemit psychic energy. It keeps the patterns tightly\ncovered because that power is too immense.',
			'Revealing the eyelike patterns on the insides of\nits ears will unleash its psychic powers. It normally\nkeeps the patterns hidden, however.',
			'The defensive instinct of the males is strong.\nIt’s when they’re protecting themselves or their\npartners that they unleash their full power.',
		],
		[Language.Ja]: [
			'危険が　迫ると　耳を　持ち上げ\n１０トン　トラックを　ひねりつぶす\nサイコパワーを　解放する。',
			'耳の　内側の　目玉模様から\nサイコパワーを　出すが\nあまりにも　強力なので　ふさいでいる。',
			'耳の　内側の　目玉模様から\nサイコパワーを　放つが　普段は\nその　力を　隠している。',
			'オスは　防衛本能が　強く\n自分や　パートナーを　守るときに\n最大級の　パワーを　出す。',
		],
		[Language.ZhHant]: [
			'會從耳朵內側眼珠花紋的地方\n釋放出精神力量，但平時\n會將那種力量隱藏起來。',
			'雄性的防衛本能很強，\n在保護自己和夥伴時\n能發揮最大的威力。',
		],
		[Language.ZhHans]: [
			'会从耳朵内侧眼珠花纹的地方\n释放出精神力量，但平时\n会将那种力量隐藏起来。',
			'雄性的防卫本能很强，\n在保护自己和伙伴时\n能发挥最大的威力。',
		],
	},
	[
		[
			Variety.MeowsticMale,
			163,
			6,
			85,
			[Type.Psychic],
			{
				frontDefault: '43f137c6.png',
				frontShiny: '2607a555.png',
				frontFemale: '7e27e98a.png',
				frontShinyFemale: '03d7cb6b.png',
				backFemale: 'f13d127b.png',
				backShinyFemale: '7b8bc232.png',
			},
			{
				[Stat.Hp]: {baseStat: 74},
				[Stat.Attack]: {baseStat: 48},
				[Stat.Defense]: {baseStat: 76},
				[Stat.SpecialAttack]: {baseStat: 83},
				[Stat.SpecialDefense]: {baseStat: 81},
				[Stat.Speed]: {baseStat: 104, effort: 2},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
					Move.MeanLook,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					21,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Psybeam,
					Move.BatonPass,
					Move.StoredPower,
					Move.DisarmingVoice,
					Move.TeraBlast,
					Move.Trailblaze,
					Move.AlluringVoice,
					Move.PsychicNoise,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Dig,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Facade,
					Move.CalmMind,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					54,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 34,
					},

					Move.LightScreen,
					Move.Reflect,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Swift,
					Move.Endure,
					Move.Charm,
					Move.Imprison,
					Move.FakeTears,
					Move.NastyPlot,
					Move.MistyTerrain,
					Move.PlayRough,
					Move.PsychicTerrain,
					Move.ExpandingForce,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.FakeOut,
					Move.DisarmingVoice,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HelpingHand,
					12,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HelpingHand,
					Move.Trick,
					Move.Gravity,
					Move.ZenHeadbutt,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RolePlay,
					29,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Yawn,
					Move.Tickle,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.SkillSwap,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Imprison,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					39,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.QuickGuard,
					49,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					59,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.PayDay,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Dig,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Swift,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Endure,
					Move.Charm,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.HelpingHand,
					Move.Trick,
					Move.SkillSwap,
					Move.Imprison,
					Move.FakeTears,
					Move.CalmMind,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.NastyPlot,
					Move.ZenHeadbutt,
					Move.TrickRoom,
					Move.Psyshock,
					Move.TailSlap,
					Move.MistyTerrain,
					Move.PlayRough,
					Move.PsychicTerrain,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
					Move.MeanLook,
					Move.FakeOut,
					Move.DisarmingVoice,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					21,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					54,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 34,
					},

					Move.LightScreen,
					Move.Reflect,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronTail,
					Move.WonderRoom,
					Move.MagicRoom,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Safeguard,
					Move.Payback,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HelpingHand,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.RolePlay,
					29,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Imprison,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					39,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.QuickGuard,
					49,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					59,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.ExpandingForce,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
					Move.MeanLook,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Facade,
					Move.CalmMind,
					Move.Payback,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.WorkUp,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.EchoedVoice,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Confusion,
					Move.Covet,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					35,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.HelpingHand,
					Move.Trick,
					Move.SkillSwap,
					Move.Gravity,
					Move.ZenHeadbutt,
					Move.WonderRoom,
					Move.Telekinesis,
					Move.MagicRoom,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					28,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HealBell,
					Move.RolePlay,
					Move.MagicCoat,
					Move.Recycle,
					Move.Snatch,
					Move.SignalBeam,
					Move.Covet,
					Move.ShockWave,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FakeOut,
					19,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.HelpingHand,
					Move.QuickGuard,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RolePlay,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Imprison,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MiracleEye,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickGuard,
					53,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					50,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
					Move.Confusion,
					Move.MeanLook,
					Move.HelpingHand,
					Move.Covet,
					Move.QuickGuard,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.CalmMind,
					Move.Payback,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.WorkUp,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FakeOut,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RolePlay,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Imprison,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MiracleEye,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickGuard,
					53,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					22,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					50,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
					Move.MeanLook,
					Move.HelpingHand,
					Move.QuickGuard,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Flash,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Dig,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.SecretPower,
					Move.CalmMind,
					Move.Payback,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					35,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HealBell,
					Move.IronTail,
					Move.HelpingHand,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.Recycle,
					Move.Snatch,
					Move.SignalBeam,
					Move.Covet,
					Move.ShockWave,
					Move.Gravity,
					Move.ZenHeadbutt,
					Move.WonderRoom,
					Move.MagicRoom,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FakeOut,
					19,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RolePlay,
					43,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Imprison,
					45,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MiracleEye,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.QuickGuard,
					53,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					22,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					50,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
					Move.MeanLook,
					Move.HelpingHand,
					Move.QuickGuard,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Dig,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.CalmMind,
					Move.Payback,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FakeOut,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RolePlay,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Imprison,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MiracleEye,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.QuickGuard,
					53,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					50,
				),
			].flat(),
			[
				{
					ability: Ability.KeenEye,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Infiltrator,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Prankster,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.MeowsticMale,
					PokemonFormBits.Default,
					{
						frontDefault: '43f137c6.png',
						frontShiny: '2607a555.png',
						frontFemale: '7e27e98a.png',
						frontShinyFemale: '03d7cb6b.png',
						backFemale: 'f13d127b.png',
						backShinyFemale: '7b8bc232.png',
					},
					[Type.Psychic],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Mistigrix Mâle'],
						[Language.De]: ['Psiaugon ♂'],
						[Language.En]: ['Male Meowstic'],
					},
					{
						[Language.JaHrkt]: ['オスのすがた'],
						[Language.Ko]: ['수컷의 모습'],
						[Language.ZhHant]: ['雄性的樣子'],
						[Language.Fr]: ['Mâle'],
						[Language.De]: ['Männlich'],
						[Language.Es]: ['Macho'],
						[Language.It]: ['Maschio'],
						[Language.En]: ['Male'],
						[Language.Ja]: ['オスのすがた'],
						[Language.ZhHans]: ['雄性的样子'],
					},
					'male',
				],
			],
		],
		[
			Variety.MeowsticFemale,
			163,
			6,
			85,
			[Type.Psychic],
			{
				frontDefault: '5740bbfb.png',
			},
			{
				[Stat.Hp]: {baseStat: 74},
				[Stat.Attack]: {baseStat: 48},
				[Stat.Defense]: {baseStat: 76},
				[Stat.SpecialAttack]: {baseStat: 83},
				[Stat.SpecialDefense]: {baseStat: 81},
				[Stat.Speed]: {baseStat: 104, effort: 2},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
					Move.MagicalLeaf,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					21,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Psybeam,
					Move.BatonPass,
					Move.DisarmingVoice,
					Move.TeraBlast,
					Move.Trailblaze,
					Move.AlluringVoice,
					Move.PsychicNoise,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Dig,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Facade,
					Move.CalmMind,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					54,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 34,
					},

					Move.LightScreen,
					Move.Reflect,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Swift,
					Move.Endure,
					Move.Charm,
					Move.FutureSight,
					Move.FakeTears,
					Move.MagicalLeaf,
					Move.NastyPlot,
					Move.StoredPower,
					Move.PlayRough,
					Move.PsychicTerrain,
					Move.ExpandingForce,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					49,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FutureSight,
					59,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.FakeOut,
					Move.DisarmingVoice,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HelpingHand,
					Move.SkillSwap,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Trick,
					Move.Gravity,
					Move.ZenHeadbutt,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RolePlay,
					29,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Yawn,
					Move.Tickle,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.ChargeBeam,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					39,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.StoredPower,
					12,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.PayDay,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Dig,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Swift,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Endure,
					Move.Charm,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.FutureSight,
					Move.Facade,
					Move.HelpingHand,
					Move.Trick,
					Move.SkillSwap,
					Move.FakeTears,
					Move.MagicalLeaf,
					Move.CalmMind,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.NastyPlot,
					Move.ZenHeadbutt,
					Move.TrickRoom,
					Move.Psyshock,
					Move.StoredPower,
					Move.TailSlap,
					Move.PlayRough,
					Move.PsychicTerrain,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
					Move.FakeOut,
					Move.MagicalLeaf,
					Move.DisarmingVoice,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					21,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					54,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 34,
					},

					Move.LightScreen,
					Move.Reflect,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronTail,
					Move.WonderRoom,
					Move.MagicRoom,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Safeguard,
					Move.Payback,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					49,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FutureSight,
					59,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.RolePlay,
					29,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ChargeBeam,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					39,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.StoredPower,
					12,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.ExpandingForce,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
					Move.MagicalLeaf,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Facade,
					Move.CalmMind,
					Move.Payback,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.WorkUp,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.EchoedVoice,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Confusion,
					Move.Covet,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					13,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.HelpingHand,
					Move.Trick,
					Move.SkillSwap,
					Move.Gravity,
					Move.ZenHeadbutt,
					Move.WonderRoom,
					Move.Telekinesis,
					Move.MagicRoom,
					Move.AllySwitch,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HealBell,
					Move.RolePlay,
					Move.MagicCoat,
					Move.Recycle,
					Move.Snatch,
					Move.SignalBeam,
					Move.Covet,
					Move.ShockWave,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FutureSight,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FakeOut,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RolePlay,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SignalBeam,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.MeFirst,
					Move.StoredPower,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ChargeBeam,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.StoredPower,
					53,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					22,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
					Move.Confusion,
					Move.Covet,
					Move.MagicalLeaf,
					Move.MeFirst,
					Move.StoredPower,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.CalmMind,
					Move.Payback,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.WorkUp,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FutureSight,
					50,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FakeOut,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RolePlay,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SignalBeam,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ChargeBeam,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.StoredPower,
					53,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					22,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
					Move.MagicalLeaf,
					Move.MeFirst,
					Move.StoredPower,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Flash,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Dig,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.SecretPower,
					Move.CalmMind,
					Move.Payback,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					13,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HealBell,
					Move.IronTail,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.Recycle,
					Move.Snatch,
					Move.SignalBeam,
					Move.Covet,
					Move.ShockWave,
					Move.Gravity,
					Move.ZenHeadbutt,
					Move.WonderRoom,
					Move.MagicRoom,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FutureSight,
					50,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FakeOut,
					19,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RolePlay,
					43,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SignalBeam,
					45,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ChargeBeam,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.StoredPower,
					53,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					22,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.Leer,
					Move.MagicalLeaf,
					Move.MeFirst,
					Move.StoredPower,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Dig,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.CalmMind,
					Move.Payback,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Confusion,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FutureSight,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FakeOut,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RolePlay,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SignalBeam,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Extrasensory,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Covet,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ChargeBeam,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psyshock,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.StoredPower,
					53,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					22,
				),
			].flat(),
			[
				{
					ability: Ability.KeenEye,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Infiltrator,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Competitive,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.MeowsticFemale,
					PokemonFormBits.Default,
					{
						frontDefault: '5740bbfb.png',
					},
					[Type.Psychic],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Mistigrix Femelle'],
						[Language.De]: ['Psiaugon ♀'],
						[Language.En]: ['Female Meowstic'],
					},
					{
						[Language.JaHrkt]: ['メスのすがた'],
						[Language.Ko]: ['암컷의 모습'],
						[Language.ZhHant]: ['雌性的樣子'],
						[Language.Fr]: ['Femelle'],
						[Language.De]: ['Weiblich'],
						[Language.Es]: ['Hembra'],
						[Language.It]: ['Femmina'],
						[Language.En]: ['Female'],
						[Language.Ja]: ['メスのすがた'],
						[Language.ZhHans]: ['雌性的样子'],
					},
					'female',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Honedge,
	50,
	180,
	Color.Brown,
	[EggGroup.Mineral],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Blob,
	{
		[Language.JaHrkt]: ['ヒトツキ'],
		[Language.Roomaji]: ['Hitotsuki'],
		[Language.Ko]: ['단칼빙'],
		[Language.ZhHant]: ['獨劍鞘'],
		[Language.Fr]: ['Monorpale'],
		[Language.De]: ['Gramokles'],
		[Language.Es]: ['Honedge'],
		[Language.It]: ['Honedge'],
		[Language.En]: ['Honedge'],
		[Language.Ja]: ['ヒトツキ'],
		[Language.ZhHans]: ['独剑鞘'],
	},
	{
		[Language.JaHrkt]: ['とうけんポケモン'],
		[Language.Ko]: ['도검포켓몬'],
		[Language.ZhHant]: ['刀劍寶可夢'],
		[Language.Fr]: ['Pokémon Glaive'],
		[Language.De]: ['Klingenkraft-Pokémon'],
		[Language.Es]: ['Pokémon Tizona'],
		[Language.It]: ['Pokémon Armabianca'],
		[Language.En]: ['Sword Pokémon'],
		[Language.Ja]: ['とうけんポケモン'],
		[Language.ZhHans]: ['刀剑宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'ししゃの　たましいが　こだいの\nつるぎに　やどって　うまれたらしい。\nひとに　とりつき　いのちを　すう。',
			'つるぎの　つかを　にぎった　ひとの\nうでに　あおい　ぬのを　まきつけて\nたおれるまで　いのちを　すいとる。',
			'おおむかし　この　つるぎに　よって\nころされた　にんげんの　たましいが\nヒトツキの　たましいに　なっている。',
			'つるぎの　つばの　あおい　めだまが\nヒトツキの　ほんたい。　ふるびた\nぬので　ひとの　せいきを　すいとる。',
		],
		[Language.Ko]: [
			'죽은 자의 혼이 고대의\n검에 깃들어 태어났다고 한다.\n사람에게 씌어 생명을 빨아들인다.',
			'검의 자루를 잡은 사람의\n팔에 파란 천을 감아서\n쓰러질 때까지 목숨을 빨아들인다.',
			'먼 옛날에 이 검에 의해\n죽은 인간의 영혼이\n단칼빙의 영혼이 되었다.',
			'검의 가드 부분에 있는 푸른 눈동자가\n단칼빙의 본체다. 낡은 천으로\n사람의 생기를 빨아들인다.',
		],
		[Language.Fr]: [
			'Ce Pokémon naît quand l’âme d’un défunt prend\npossession d’une épée ancienne. Il s’accroche aux\nhumains pour absorber leur énergie vitale.',
			'Si quelqu’un s’aventure à l’empoigner, il enroule son\nétoffe bleue autour du bras de l’infortuné et aspire\nson énergie vitale jusqu’à ce que ce dernier s’écroule.',
			'Ce Pokémon naît quand l’âme d’un défunt prend possession\nd’une épée ancienne. Il s’accroche aux humains pour absorber\nleur énergie vitale.',
			'Si quelqu’un s’aventure à l’empoigner, il enroule son étoffe\nbleue autour du bras de l’infortuné et aspire son énergie vitale\njusqu’à ce que ce dernier s’écroule.',
			'L’âme de Monorpale est celle d’un humain\nqui a été tué il y a fort longtemps, par la même\nlame qui forme maintenant son corps.',
			'L’œil bleu sur la garde de la lame est le véritable\ncorps de Monorpale. Il aspire l’énergie vitale\ndes gens avec son étoffe usée par le temps.',
		],
		[Language.De]: [
			'Dieses Pokémon wird geboren, wenn die Seele eines\nVerstorbenen sich in einem Schwert festsetzt. Es heftet\nsich an Menschen und saugt deren Lebenskraft aus.',
			'Es wickelt ein blaues Tuch um den Arm von Menschen,\ndie seinen Schwertgriff ergreifen, und absorbiert deren\nLebensenergie, bis sie zusammenbrechen.',
			'Seine Seele ist die eines Menschen, der vor\nlanger Zeit durch dieses Schwert getötet wurde.',
			'Das blaue Auge auf der Parierstange ist sein\nwahrer Körper. Mithilfe eines alten Tuchs\nabsorbiert es die Lebenskraft von Menschen.',
		],
		[Language.Es]: [
			'Cuentan que este Pokémon nace cuando el espíritu de\nun difunto toma posesión de una espada antigua.\nSe aferra a las personas y absorbe su energía.',
			'Si alguien osa empuñarlo, se enrolla en el brazo del\ndesafortunado con su paño azul y le absorbe toda la\nenergía hasta que pierde el sentido.',
			'Cuentan que este Pokémon nace cuando el espíritu de un\ndifunto toma posesión de una espada antigua. Se aferra a las\npersonas y absorbe su energía.',
			'Si alguien osa empuñarlo, se enrolla en el brazo del\ndesafortunado con su paño azul y le absorbe toda la energía\nhasta que pierde el sentido.',
			'Su alma es la de un ser humano que poseyó la\nmisma espada que lo abatió en tiempos remotos.',
			'El ojo azul de la empuñadura es su verdadero\ncuerpo. Absorbe la energía vital de las personas\ncon su paño de aspecto andrajoso.',
		],
		[Language.It]: [
			'Sembra sia nato quando uno spirito si impossessò\ndi un’antica spada. Si lega agli esseri umani per\nassorbirne la forza vitale.',
			'Avvolge il drappo blu attorno al braccio di chiunque\nsi azzardi a impugnarne l’elsa e assorbe la sua energia\nfino a fargli perdere i sensi.',
			'Sembra sia nato quando uno spirito si impossessò di un’antica\nspada. Si lega agli esseri umani per assorbirne la forza vitale.',
			'Avvolge il drappo blu attorno al braccio di chiunque si azzardi\na impugnarne l’elsa e assorbe la sua energia fino a fargli\nperdere i sensi.',
			'La sua anima è quella di un essere umano ucciso\ntanto tempo fa dalla spada che ora forma\nil suo corpo.',
			'L’occhio blu sull’elsa della spada è il suo\nvero corpo. Usa il drappo consunto per\nassorbire la forza vitale degli uomini.',
		],
		[Language.En]: [
			'Apparently this Pokémon is born when a\ndeparted spirit inhabits a sword. It attaches itself\nto people and drinks their life force.',
			'If anyone dares to grab its hilt, it wraps\na blue cloth around that person’s arm and\ndrains that person’s life energy completely.',
			'Honedge’s soul once belonged to a person who\nwas killed a long time ago by the sword that\nmakes up Honedge’s body.',
			'The blue eye on the sword’s handguard is the\ntrue body of Honedge. With its old cloth, it\ndrains people’s lives away.',
		],
		[Language.Ja]: [
			'死者の　魂が　古代の　剣に\n宿って　生まれたらしい。\n人に　とりつき　命を　吸う。',
			'剣の　柄を　握った　人の　腕に\n青い　布を　巻きつけて\n倒れるまで　命を　吸い取る。',
			'大昔　この　剣に　よって\n殺された　人間の　魂が\nヒトツキの　魂に　なっている。',
			'剣の　鍔の　青い　目玉が\nヒトツキの　本体。　古びた\n布で　人の　生気を　吸い取る。',
		],
		[Language.ZhHant]: [
			'很久以前因這把劍\n而喪命之人的靈魂\n成為了獨劍鞘的靈魂。',
			'獨劍鞘護手上的\n藍色眼珠是牠的本體。\n會用陳舊的布吸取人類的精氣。',
		],
		[Language.ZhHans]: [
			'很久以前因这把剑\n而丧命之人的灵魂\n成为了独剑鞘的灵魂。',
			'独剑鞘剑格上的\n蓝色眼珠是它的本体。\n会用陈旧的布吸取人类的精气。',
		],
	},
	[
		[
			Variety.Honedge,
			65,
			8,
			20,
			[Type.Steel, Type.Ghost],
			{
				frontDefault: '86a80988.png',
				frontShiny: '96a30ce1.png',
			},
			{
				[Stat.Hp]: {baseStat: 45},
				[Stat.Attack]: {baseStat: 80},
				[Stat.Defense]: {baseStat: 100, effort: 1},
				[Stat.SpecialAttack]: {baseStat: 35},
				[Stat.SpecialDefense]: {baseStat: 37},
				[Stat.Speed]: {baseStat: 28},
			},
			{},
			[
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					44,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.BrickBreak,
					Move.GyroBall,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Retaliate,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Screech,
					Move.Reversal,
					Move.Endure,
					Move.CloseCombat,
					Move.PsychoCut,
					Move.Round,
					Move.SolarBlade,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronDefense,
					Move.IronHead,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DestinyBond,
					Move.WideGuard,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.IronDefense,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Egg,
					Move.Block,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PowerTrick,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					4,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.IronHead,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Autotomize,
					8,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Retaliate,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SacredSword,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.SteelBeam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.BrickBreak,
					Move.GyroBall,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.AerialAce,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					29,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronDefense,
					Move.IronHead,
					Move.LaserFocus,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.ShockWave,
					Move.MagnetRise,
					Move.AfterYou,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DestinyBond,
					Move.WideGuard,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Pursuit,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.MetalSound,
					Move.ShadowSneak,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					22,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.IronDefense,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PowerTrick,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.IronHead,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Autotomize,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Retaliate,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SacredSword,
					47,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Tackle,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.BrickBreak,
					Move.AerialAce,
					Move.GyroBall,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Confide,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					29,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DestinyBond,
					Move.MetalSound,
					Move.ShadowSneak,
					Move.WideGuard,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Pursuit,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					22,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.IronDefense,
					32,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PowerTrick,
					39,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.IronHead,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Autotomize,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Retaliate,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SacredSword,
					47,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Tackle,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.BrickBreak,
					Move.SecretPower,
					Move.AerialAce,
					Move.GyroBall,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Retaliate,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.RockSmash,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					29,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Spite,
					Move.IronDefense,
					Move.ShockWave,
					Move.MagnetRise,
					Move.IronHead,
					Move.AfterYou,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DestinyBond,
					Move.MetalSound,
					Move.ShadowSneak,
					Move.WideGuard,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Pursuit,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					8,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					22,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.IronDefense,
					32,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PowerTrick,
					39,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.IronHead,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Autotomize,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Retaliate,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SacredSword,
					47,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Tackle,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Cut,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.RockSmash,
					Move.Facade,
					Move.BrickBreak,
					Move.AerialAce,
					Move.GyroBall,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Retaliate,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					29,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DestinyBond,
					Move.MetalSound,
					Move.ShadowSneak,
					Move.WideGuard,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Pursuit,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.IronDefense,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PowerTrick,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.IronHead,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Autotomize,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Retaliate,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SacredSword,
					47,
				),
			].flat(),
			[
				{
					ability: Ability.NoGuard,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.Honedge,
					PokemonFormBits.Default,
					{
						frontDefault: '86a80988.png',
						frontShiny: '96a30ce1.png',
					},
					[Type.Steel, Type.Ghost],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Doublade,
	50,
	90,
	Color.Brown,
	[EggGroup.Mineral],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Heads,
	{
		[Language.JaHrkt]: ['ニダンギル'],
		[Language.Roomaji]: ['Nidangill'],
		[Language.Ko]: ['쌍검킬'],
		[Language.ZhHant]: ['雙劍鞘'],
		[Language.Fr]: ['Dimoclès'],
		[Language.De]: ['Duokles'],
		[Language.Es]: ['Doublade'],
		[Language.It]: ['Doublade'],
		[Language.En]: ['Doublade'],
		[Language.Ja]: ['ニダンギル'],
		[Language.ZhHans]: ['双剑鞘'],
	},
	{
		[Language.JaHrkt]: ['とうけんポケモン'],
		[Language.Ko]: ['도검포켓몬'],
		[Language.ZhHant]: ['刀劍寶可夢'],
		[Language.Fr]: ['Pokémon Glaive'],
		[Language.De]: ['Klingenkraft-Pokémon'],
		[Language.Es]: ['Pokémon Tizona'],
		[Language.It]: ['Pokémon Armabianca'],
		[Language.En]: ['Sword Pokémon'],
		[Language.Ja]: ['とうけんポケモン'],
		[Language.ZhHans]: ['刀剑宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'しんかして　２ほんに　ぶんれつした。\nテレパシーで　かいわして　れんけい\nこうげきで　てきを　きりきざむ。',
			'２ほんの　つるぎによる　ふくざつな\nれんぞく　こうげきを　ふせぐことは\nけんの　たつじんでも　ふかのうだ。',
			'しんかして　ふたごに　なった。\nやいばを　こすりあわせて　ならす\nきんぞくおんで　あいてを　いかく。',
			'２ほんの　つるぎは　こうげきと\nぼうぎょが　めまぐるしく　いれかわる\nせんぽうで　えものを　しとめる。',
		],
		[Language.Ko]: [
			'진화하여 2자루로 분열되었다.\n텔레파시로 서로 대화하며\n연계 공격으로 적을 조각낸다.',
			'2자루의 검에 의한 복잡한\n연속 공격을 막는 것은\n검의 달인일지라도 불가능하다.',
			'진화해서 쌍둥이가 되었다.\n칼날을 맞부딪혀서 내는\n금속음으로 상대를 위협한다.',
			'2자루의 검이 공격과 방어를\n어지러울 정도로 빠르게 바꾸는\n전법으로 먹이의 숨통을 끊는다.',
		],
		[Language.Fr]: [
			'En évoluant, Monorpale se divise en deux épées qui\ncommuniquent par télépathie pour mieux découper\nleur adversaire en morceaux.',
			'Même les sabreurs chevronnés sont incapables\nde parer les assauts continus et complexes menés\nde concert par ces deux épées.',
			'Même les sabreurs chevronnés sont incapables de parer\nles assauts continus et complexes menés de concert\npar ces deux épées.',
			'Il s’est dédoublé en évoluant.\nIl intimide ses ennemis à grands coups de bruits\nmétalliques en entrechoquant ses deux lames.',
			'Ses deux lames abattent leurs proies\nen enchaînant les attaques et les parades\nà un rythme effréné.',
		],
		[Language.De]: [
			'Bei seiner Entwicklung hat es sich in zwei Schwerter\ngeteilt. Es begegnet seinen Gegnern mit Attacken,\ndie es mittels Telepathie koordiniert.',
			'Nicht einmal ein Meister des Schwertkampfs kann\nden komplizierten aufeinanderfolgenden Angriffen\nder zwei Schwerter ausweichen.',
			'Bei seiner Entwicklung hat es sich in zwei Schwerter geteilt.\nEs begegnet seinen Gegnern mit Attacken, die es mittels\nTelepathie koordiniert.',
			'Bei der Entwicklung hat es sich verdoppelt. Es\nreibt seine Klingen aneinander, um Gegner mit\neinem metallenen Geräusch einzuschüchtern.',
			'Seine zwei Schwerter wechseln sich in einer\nhektischen Aufeinanderfolge von Angriff und\nVerteidigung ab, um seine Beute zu erlegen.',
		],
		[Language.Es]: [
			'Al evolucionar se divide en dos espadas.\nSe comunican entre sí mediante telepatía y\ncoordinan los ataques para rebanar al enemigo.',
			'Ni siquiera el espadachín más ducho conseguiría\nesquivar los complejos ataques que encadenan\nambas espadas a la vez.',
			'Al evolucionar se divide en dos espadas. Se comunican entre\nsí mediante telepatía y coordinan los ataques para rebanar al\nenemigo.',
			'Ni siquiera el espadachín más ducho conseguiría esquivar los\ncomplejos ataques que encadenan ambas espadas a la vez.',
			'Su espada se duplicó durante su proceso de\nevolución. Intimida a los rivales con el chirrido\nmetálico que produce al frotar ambas hojas.',
			'Su táctica para abatir a las presas consiste en\nalternar ataque y defensa de forma frenética\nentre ambas espadas.',
		],
		[Language.It]: [
			'Sdoppiatesi con l’evoluzione, le due parti comunicano\ntelepaticamente per lanciarsi in un attacco coordinato.',
			'I fendenti vorticosi e velocissimi delle due spade\npossono mettere in ginocchio anche gli spadaccini\npiù esperti.',
			'I fendenti vorticosi e velocissimi delle due spade possono\nmettere in ginocchio anche gli spadaccini più esperti.',
			'Si è duplicato con l’evoluzione. Minaccia\nl’avversario con il suono metallico che\nproduce sfregando le sue due lame.',
			'Le due spade abbattono la preda alternando\nmosse di attacco e di difesa a un ritmo\nvertiginoso.',
		],
		[Language.En]: [
			'When Honedge evolves, it divides into two swords,\nwhich cooperate via telepathy to coordinate attacks\nand slash their enemies to ribbons.',
			'The complex attack patterns of its two swords\nare unstoppable, even for an opponent\ngreatly accomplished at swordplay.',
			'Honedge evolves into twins. The two blades\nrub together to emit a metallic sound that\nunnerves opponents.',
			'The two swords employ a strategy of rapidly\nalternating between offense and defense to\nbring down their prey.',
		],
		[Language.Ja]: [
			'進化して　２本に　分裂した。\nテレパシーで　会話して\n連係攻撃で　敵を　切り刻む。',
			'２本の　剣による\n複雑な　連続攻撃を　防ぐことは\n剣の　達人でも　不可能だ。',
			'進化して　双子に　なった。\n刃を　擦り合わせて　鳴らす\n金属音で　相手を　威嚇。',
			'２本の　剣は　攻撃と\n防御が　目まぐるしく　入れ替わる\n戦法で　獲物を　しとめる。',
		],
		[Language.ZhHant]: [
			'進化之後變成了雙胞胎。\n用互相摩擦劍刃發出的\n聲音來威嚇對手。',
			'２把劍會用令人眼花繚亂的\n速度不斷交替攻擊和防禦，\n藉以制服獵物。',
		],
		[Language.ZhHans]: [
			'进化之后变成了双胞胎。\n用互相摩擦剑刃发出的\n金属音来威吓对手。',
			'２把剑会用令人眼花缭乱的\n速度不断交替攻击和防御，\n借以制服猎物。',
		],
	},
	[
		[
			Variety.Doublade,
			157,
			8,
			45,
			[Type.Steel, Type.Ghost],
			{
				frontDefault: '63bb8f71.png',
				frontShiny: '2458759b.png',
			},
			{
				[Stat.Hp]: {baseStat: 59},
				[Stat.Attack]: {baseStat: 110},
				[Stat.Defense]: {baseStat: 150, effort: 2},
				[Stat.SpecialAttack]: {baseStat: 45},
				[Stat.SpecialDefense]: {baseStat: 49},
				[Stat.Speed]: {baseStat: 35},
			},
			{},
			[
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					50,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.BrickBreak,
					Move.GyroBall,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Retaliate,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Screech,
					Move.Reversal,
					Move.Endure,
					Move.CloseCombat,
					Move.PsychoCut,
					Move.Round,
					Move.SolarBlade,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronDefense,
					Move.IronHead,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.IronDefense,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PowerTrick,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					24,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ShadowSneak,
					Move.Autotomize,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.IronHead,
					38,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Retaliate,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SacredSword,
					56,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.SteelBeam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.BrickBreak,
					Move.GyroBall,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.FuryCutter,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.AerialAce,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					29,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronDefense,
					Move.IronHead,
					Move.LaserFocus,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.ShockWave,
					Move.MagnetRise,
					Move.AfterYou,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Pursuit,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					22,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.IronDefense,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PowerTrick,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.IronHead,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Autotomize,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Retaliate,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SacredSword,
					51,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Tackle,
					Move.FuryCutter,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.BrickBreak,
					Move.AerialAce,
					Move.GyroBall,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Confide,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					29,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Pursuit,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					22,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.IronDefense,
					32,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PowerTrick,
					41,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.IronHead,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Autotomize,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Retaliate,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SacredSword,
					51,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Tackle,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.BrickBreak,
					Move.SecretPower,
					Move.AerialAce,
					Move.GyroBall,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Retaliate,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.RockSmash,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					29,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Spite,
					Move.IronDefense,
					Move.ShockWave,
					Move.MagnetRise,
					Move.IronHead,
					Move.AfterYou,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Pursuit,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					8,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					22,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.IronDefense,
					32,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PowerTrick,
					41,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					36,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.IronHead,
					45,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Autotomize,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Retaliate,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SacredSword,
					51,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Tackle,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Cut,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.RockSmash,
					Move.Facade,
					Move.BrickBreak,
					Move.AerialAce,
					Move.GyroBall,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Retaliate,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					29,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Pursuit,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.IronDefense,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PowerTrick,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.IronHead,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Autotomize,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Retaliate,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SacredSword,
					51,
				),
			].flat(),
			[
				{
					ability: Ability.NoGuard,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.Doublade,
					PokemonFormBits.Default,
					{
						frontDefault: '63bb8f71.png',
						frontShiny: '2458759b.png',
					},
					[Type.Steel, Type.Ghost],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Aegislash,
	50,
	45,
	Color.Brown,
	[EggGroup.Mineral],
	4,
	PokemonSpeciesBits.FormsSwitchable,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Blob,
	{
		[Language.JaHrkt]: ['ギルガルド'],
		[Language.Roomaji]: ['Gillgard'],
		[Language.Ko]: ['킬가르도'],
		[Language.ZhHant]: ['堅盾劍怪'],
		[Language.Fr]: ['Exagide'],
		[Language.De]: ['Durengard'],
		[Language.Es]: ['Aegislash'],
		[Language.It]: ['Aegislash'],
		[Language.En]: ['Aegislash'],
		[Language.Ja]: ['ギルガルド'],
		[Language.ZhHans]: ['坚盾剑怪'],
	},
	{
		[Language.JaHrkt]: ['おうけんポケモン'],
		[Language.Ko]: ['왕검포켓몬'],
		[Language.ZhHant]: ['王劍寶可夢'],
		[Language.Fr]: ['Pokémon Noble Lame'],
		[Language.De]: ['Königsklingen-Pokémon'],
		[Language.Es]: ['Pokémon Espada Real'],
		[Language.It]: ['Pokémon Spadareale'],
		[Language.En]: ['Royal Sword Pokémon'],
		[Language.Ja]: ['おうけんポケモン'],
		[Language.ZhHans]: ['王剑宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'れきだいの　おうが　つれていた。\nれいりょくで　ひとや　ポケモンの\nこころを　あやつり　したがわせる。',
			'おうの　そしつを　もつ　にんげんを\nみぬくらしい。みとめられた　ひとは\nやがて　おうになると　いわれている。',
			'はがねの　からだと　れいりょくの\nバリアで　あらゆる　こうげきを\nよわめる　ぼうぎょの　たいせい。',
			'きょうりょくな　れいりょくで　ひとや\nポケモンを　あやつり　ギルガルドに\nつごうの　よい　くにを　つくらせた。',
		],
		[Language.Ko]: [
			'역대 왕들이 데리고 있었다.\n영험한 힘으로 사람이나 포켓몬의\n마음을 조종하여 복종하게 한다.',
			'왕의 기질을 가진 인간을\n간파하는 듯하다. 인정받은 자는\n이윽고 왕이 된다고 한다.',
			'강철로 된 몸과 영험한 힘을 가진\n배리어로 모든 공격을\n약하게 만드는 방어적인 태세.',
			'강력한 영력으로 사람과\n포켓몬을 조종해 킬가르도의\n입맛에 맞는 나라를 만들게 했다.',
		],
		[Language.Fr]: [
			'Ils ont fait le bonheur de générations de rois.\nLeurs pouvoirs psychiques leur permettent de\ncontrôler hommes et Pokémon.',
			'Il peut déceler les qualités régaliennes dans les âmes\nhumaines. On raconte que celui ou celle qui obtient\nsa faveur deviendra à coup sûr roi ou reine.',
			'Ils ont fait le bonheur de générations de rois. Leurs pouvoirs\npsychiques leur permettent de contrôler hommes et Pokémon.',
			'Grâce à son corps en acier et à sa barrière\npsychique, il peut se défendre en affaiblissant\ntoutes sortes d’attaques.',
			'Grâce à ses puissants pouvoirs spirituels,\nil a contrôlé des humains et des Pokémon\npour créer un pays conforme à ses idéaux.',
		],
		[Language.De]: [
			'Generationen von Königen hatten dieses Pokémon\nan ihrer Seite. Mit seiner mysteriösen Kraft kann es\nMenschen und Pokémon gleichermaßen kontrollieren.',
			'Angeblich erkennt es jene Menschen, die Potenzial\nzum Herrscher haben. Es heißt, von ihm anerkannte\nPersonen seien bald darauf Könige geworden.',
			'Generationen von Königen hatten dieses Pokémon an ihrer\nSeite. Mit seiner mysteriösen Kraft kann es Menschen und\nPokémon gleichermaßen kontrollieren.',
			'Angeblich erkennt es jene Menschen, die Potenzial zum\nHerrscher haben. Es heißt, von ihm anerkannte Personen\nseien bald darauf Könige geworden.',
			'Mit seinem stählernen Körper und der Barriere,\ndie es durch eine mysteriöse Kraft erzeugt,\nvermag es jegliche Angriffe abzuschwächen.',
			'Mithilfe seiner mysteriösen Kräfte kontrollierte es\nMenschen und Pokémon und ließ sie ein Land\nnach seinen Vorstellungen erschaffen.',
		],
		[Language.Es]: [
			'Han permanecido junto a estirpes de reyes durante\ngeneraciones. Mediante su poder espectral pueden\ncontrolar a humanos y a Pokémon.',
			'Al parecer, puede intuir si un humano tiene madera\nde rey. Según se dice, las personas que obtuvieron\nsu reconocimiento acabaron siendo reyes.',
			'Han permanecido junto a estirpes de reyes durante\ngeneraciones. Mediante su poder espectral pueden controlar\na humanos y a Pokémon.',
			'Al parecer, puede intuir si un humano tiene madera de rey.\nSegún se dice, las personas que obtuvieron su reconocimiento\nacabaron siendo reyes.',
			'Gracias a su cuerpo de acero y a una barrera de\npoder espectral, crea una defensa que le permite\nmitigar prácticamente cualquier ataque.',
			'Mediante el control ejercido con su inmenso\npoder espectral, logró que humanos y Pokémon\nle forjaran un país a medida de sus necesidades.',
		],
		[Language.It]: [
			'Ha accompagnato generazioni di re. È in grado di\ncontrollare e manipolare esseri umani e Pokémon col\nsuo potere spettrale.',
			'Si dice che sia in grado di riconoscere chi possiede le\nqualità per diventare re e che le persone da lui\nindicate siano effettivamente destinate al trono.',
			'Ha accompagnato generazioni di re. È in grado di controllare\ne manipolare esseri umani e Pokémon col suo potere spettrale.',
			'Si dice che sia in grado di riconoscere chi possiede le\nqualità per diventare re e che le persone da lui indicate\nsiano effettivamente destinate al trono.',
			'Con il suo corpo metallico e la sua barriera\npsichica può opporre una difesa in grado di\nindebolire qualsiasi tipo di attacco.',
			'Ha manipolato il pensiero di esseri umani e\nPokémon con il suo potere spettrale facendogli\ncostruire un paese adatto alle sue esigenze.',
		],
		[Language.En]: [
			'Generations of kings were attended by these\nPokémon, which used their spectral power to\nmanipulate and control people and Pokémon.',
			'Apparently, it can detect the innate qualities\nof leadership. According to legend, whoever it\nrecognizes is destined to become king.',
			'In this defensive stance, Aegislash uses its steel\nbody and a force field of spectral power to\nreduce the damage of any attack.',
			'Its potent spectral powers allow it to manipulate\nothers. It once used its powers to force people\nand Pokémon to build a kingdom to its liking.',
		],
		[Language.Ja]: [
			'歴代の　王が　連れていた。\n霊力で　人や　ポケモンの\n心を　操り　従わせる。',
			'王の　素質を　持つ　人間を\n見抜くらしい。認められた　人は\nやがて　王になると　言われている。',
			'鋼の　体と　霊力の\nバリアで　あらゆる　攻撃を\n弱める　防御の　体勢。',
			'強力な　霊力で　人や\nポケモンを　操り　ギルガルドに\n都合の　良い　国を　つくらせた。',
		],
		[Language.ZhHant]: [
			'處於防禦狀態時，\n會用鋼之身體和靈力的屏障\n來減弱一切的攻擊。',
			'堅盾劍怪曾經用強大的靈力\n控制人和寶可夢，建立了\n適合自己生活的國家。',
		],
		[Language.ZhHans]: [
			'处于防御状态时，\n会用钢之身体和灵力的屏障\n来减弱一切的攻击。',
			'坚盾剑怪曾经用强大的灵力\n控制人和宝可梦，建立了\n适合自己生活的国家。',
		],
	},
	[
		[
			Variety.AegislashShield,
			250,
			17,
			530,
			[Type.Steel, Type.Ghost],
			{
				frontDefault: '0ea7e37b.png',
				frontShiny: '9e7934b9.png',
			},
			{
				[Stat.Hp]: {baseStat: 60},
				[Stat.Attack]: {baseStat: 50},
				[Stat.Defense]: {baseStat: 140, effort: 2},
				[Stat.SpecialAttack]: {baseStat: 50},
				[Stat.SpecialDefense]: {baseStat: 140, effort: 1},
				[Stat.Speed]: {baseStat: 60},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Slash,
					Move.FuryCutter,
					Move.AerialAce,
					Move.IronDefense,
					Move.PowerTrick,
					Move.NightSlash,
					Move.ShadowSneak,
					Move.IronHead,
					Move.HeadSmash,
					Move.Autotomize,
					Move.SacredSword,
					Move.KingsShield,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.HyperBeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.BrickBreak,
					Move.GyroBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Round,
					Move.Retaliate,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.MetalSound,
					Move.Retaliate,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Screech,
					Move.Reversal,
					Move.Endure,
					Move.CloseCombat,
					Move.AirSlash,
					Move.PsychoCut,
					Move.SolarBlade,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronDefense,
					Move.IronHead,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.KingsShield,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.SteelBeam,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Slash,
					Move.FuryCutter,
					Move.AerialAce,
					Move.IronDefense,
					Move.PowerTrick,
					Move.NightSlash,
					Move.ShadowSneak,
					Move.IronHead,
					Move.HeadSmash,
					Move.Autotomize,
					Move.SacredSword,
					Move.KingsShield,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.HyperBeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.BrickBreak,
					Move.GyroBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Round,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.AerialAce,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronDefense,
					Move.IronHead,
					Move.LaserFocus,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.Block,
					Move.ShockWave,
					Move.MagnetRise,
					Move.AfterYou,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Pursuit,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Slash,
					Move.FuryCutter,
					Move.Pursuit,
					Move.AerialAce,
					Move.IronDefense,
					Move.PowerTrick,
					Move.NightSlash,
					Move.ShadowSneak,
					Move.IronHead,
					Move.HeadSmash,
					Move.Autotomize,
					Move.SacredSword,
					Move.KingsShield,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.HyperBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.BrickBreak,
					Move.AerialAce,
					Move.GyroBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Round,
					Move.Confide,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Slash,
					Move.FuryCutter,
					Move.Pursuit,
					Move.AerialAce,
					Move.IronDefense,
					Move.PowerTrick,
					Move.NightSlash,
					Move.ShadowSneak,
					Move.IronHead,
					Move.HeadSmash,
					Move.Autotomize,
					Move.SacredSword,
					Move.KingsShield,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.HyperBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.BrickBreak,
					Move.SecretPower,
					Move.AerialAce,
					Move.GyroBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Round,
					Move.Retaliate,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.RockSmash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Spite,
					Move.IronDefense,
					Move.Block,
					Move.ShockWave,
					Move.MagnetRise,
					Move.IronHead,
					Move.AfterYou,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Slash,
					Move.FuryCutter,
					Move.Pursuit,
					Move.AerialAce,
					Move.IronDefense,
					Move.PowerTrick,
					Move.NightSlash,
					Move.ShadowSneak,
					Move.IronHead,
					Move.HeadSmash,
					Move.Autotomize,
					Move.SacredSword,
					Move.KingsShield,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Cut,
					Move.HyperBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.RockSmash,
					Move.Facade,
					Move.BrickBreak,
					Move.AerialAce,
					Move.GyroBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Round,
					Move.Retaliate,
					Move.Confide,
				),
			].flat(),
			[
				{
					ability: Ability.StanceChange,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.AegislashShield,
					PokemonFormBits.Default,
					{
						frontDefault: '0ea7e37b.png',
						frontShiny: '9e7934b9.png',
					},
					[Type.Steel, Type.Ghost],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Exagide Parade'],
						[Language.De]: ['Durengard (Schild)'],
						[Language.En]: ['Shield Aegislash'],
					},
					{
						[Language.JaHrkt]: ['シールドフォルム'],
						[Language.Ko]: ['실드폼'],
						[Language.ZhHant]: ['盾牌形態'],
						[Language.Fr]: ['Forme Parade'],
						[Language.De]: ['Schildform'],
						[Language.Es]: ['Forma Escudo'],
						[Language.It]: ['Forma Scudo'],
						[Language.En]: ['Shield Forme'],
						[Language.Ja]: ['シールドフォルム'],
						[Language.ZhHans]: ['盾牌形态'],
					},
					'shield',
				],
			],
		],
		[
			Variety.AegislashBlade,
			250,
			17,
			530,
			[Type.Steel, Type.Ghost],
			{
				frontDefault: '91d4a151.png',
				frontShiny: 'dd697d83.png',
			},
			{
				[Stat.Hp]: {baseStat: 60},
				[Stat.Attack]: {baseStat: 140, effort: 2},
				[Stat.Defense]: {baseStat: 50},
				[Stat.SpecialAttack]: {baseStat: 140, effort: 1},
				[Stat.SpecialDefense]: {baseStat: 50},
				[Stat.Speed]: {baseStat: 60},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Slash,
					Move.FuryCutter,
					Move.AerialAce,
					Move.IronDefense,
					Move.PowerTrick,
					Move.NightSlash,
					Move.ShadowSneak,
					Move.IronHead,
					Move.HeadSmash,
					Move.Autotomize,
					Move.SacredSword,
					Move.KingsShield,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.HyperBeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.BrickBreak,
					Move.GyroBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Round,
					Move.Retaliate,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.MetalSound,
					Move.Retaliate,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Screech,
					Move.Reversal,
					Move.Endure,
					Move.CloseCombat,
					Move.AirSlash,
					Move.PsychoCut,
					Move.SolarBlade,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronDefense,
					Move.IronHead,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.KingsShield,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.SteelBeam,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Slash,
					Move.FuryCutter,
					Move.AerialAce,
					Move.IronDefense,
					Move.PowerTrick,
					Move.NightSlash,
					Move.ShadowSneak,
					Move.IronHead,
					Move.HeadSmash,
					Move.Autotomize,
					Move.SacredSword,
					Move.KingsShield,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.HyperBeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.BrickBreak,
					Move.GyroBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Round,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.AerialAce,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronDefense,
					Move.IronHead,
					Move.LaserFocus,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.Block,
					Move.ShockWave,
					Move.MagnetRise,
					Move.AfterYou,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Pursuit,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Slash,
					Move.FuryCutter,
					Move.Pursuit,
					Move.AerialAce,
					Move.IronDefense,
					Move.PowerTrick,
					Move.NightSlash,
					Move.ShadowSneak,
					Move.IronHead,
					Move.HeadSmash,
					Move.Autotomize,
					Move.SacredSword,
					Move.KingsShield,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.HyperBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.BrickBreak,
					Move.AerialAce,
					Move.GyroBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Round,
					Move.Confide,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Slash,
					Move.FuryCutter,
					Move.Pursuit,
					Move.AerialAce,
					Move.IronDefense,
					Move.PowerTrick,
					Move.NightSlash,
					Move.ShadowSneak,
					Move.IronHead,
					Move.HeadSmash,
					Move.Autotomize,
					Move.SacredSword,
					Move.KingsShield,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.HyperBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.BrickBreak,
					Move.SecretPower,
					Move.AerialAce,
					Move.GyroBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Round,
					Move.Retaliate,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.RockSmash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Spite,
					Move.IronDefense,
					Move.Block,
					Move.ShockWave,
					Move.MagnetRise,
					Move.IronHead,
					Move.AfterYou,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SwordsDance,
					Move.Slash,
					Move.FuryCutter,
					Move.Pursuit,
					Move.AerialAce,
					Move.IronDefense,
					Move.PowerTrick,
					Move.NightSlash,
					Move.ShadowSneak,
					Move.IronHead,
					Move.HeadSmash,
					Move.Autotomize,
					Move.SacredSword,
					Move.KingsShield,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Cut,
					Move.HyperBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.RockSmash,
					Move.Facade,
					Move.BrickBreak,
					Move.AerialAce,
					Move.GyroBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.FlashCannon,
					Move.Round,
					Move.Retaliate,
					Move.Confide,
				),
			].flat(),
			[
				{
					ability: Ability.StanceChange,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.AegislashBlade,
					PokemonFormBits.BattleOnly | PokemonFormBits.Default,
					{
						frontDefault: '91d4a151.png',
						frontShiny: 'dd697d83.png',
					},
					[Type.Steel, Type.Ghost],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Exagide Assaut'],
						[Language.De]: ['Durengard (Klinge)'],
						[Language.En]: ['Blade Aegislash'],
					},
					{
						[Language.JaHrkt]: ['ブレードフォルム'],
						[Language.Ko]: ['블레이드폼'],
						[Language.ZhHant]: ['刀劍形態'],
						[Language.Fr]: ['Forme Assaut'],
						[Language.De]: ['Klingenform'],
						[Language.Es]: ['Forma Filo'],
						[Language.It]: ['Forma Spada'],
						[Language.En]: ['Blade Forme'],
						[Language.Ja]: ['ブレードフォルム'],
						[Language.ZhHans]: ['刀剑形态'],
					},
					'blade',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Spritzee,
	50,
	200,
	Color.Pink,
	[EggGroup.Fairy],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Arms,
	{
		[Language.JaHrkt]: ['シュシュプ'],
		[Language.Roomaji]: ['Shushupu'],
		[Language.Ko]: ['슈쁘'],
		[Language.ZhHant]: ['粉香香'],
		[Language.Fr]: ['Fluvetin'],
		[Language.De]: ['Parfi'],
		[Language.Es]: ['Spritzee'],
		[Language.It]: ['Spritzee'],
		[Language.En]: ['Spritzee'],
		[Language.Ja]: ['シュシュプ'],
		[Language.ZhHans]: ['粉香香'],
	},
	{
		[Language.JaHrkt]: ['こうすいポケモン'],
		[Language.Ko]: ['향수포켓몬'],
		[Language.ZhHant]: ['香水寶可夢'],
		[Language.Fr]: ['Pokémon Fragrance'],
		[Language.De]: ['Parfüm-Pokémon'],
		[Language.Es]: ['Pokémon Aroma'],
		[Language.It]: ['Pokémon Profumo'],
		[Language.En]: ['Perfume Pokémon'],
		[Language.Ja]: ['こうすいポケモン'],
		[Language.ZhHans]: ['香水宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'かいだ　ものを　うっとりさせる\nかおりを　からだから　ただよわせる。\nたべた　もので　かおりが　かわる。',
			'むかしの　きふじんたちは　こうすいの\nかわりに　このみの　かおりを　だす\nシュシュプを　つれていた。',
			'たいないの　においぶくろで　においを\nつくる　ポケモン。　えさが　かわると\nつくられる　においも　かわる。',
			'ひとを　みりょうする　かぐわしい\nにおいを　からだから　ただよわせる。\nこうきな　ふじんたちに　あいされた。',
		],
		[Language.Ko]: [
			'냄새를 맡은 자를 황홀하게 만드는\n향기를 몸에서 풍긴다.\n먹은 먹이에 따라 향기가 달라진다.',
			'옛 귀부인들은 향수 대신에\n좋아하는 향을 내는\n슈쁘를 데리고 다녔다.',
			'체내에 있는 향기주머니로 향기를\n만들어 내는 포켓몬. 먹이가 바뀌면\n만들어 내는 향기도 바뀐다.',
			'사람을 매료하는 황홀한\n냄새를 몸에서 풍긴다.\n귀부인들에게 사랑받았다.',
		],
		[Language.Fr]: [
			'Son corps dégage un parfum qui envoûte ceux qui le\nrespirent et change en fonction de son alimentation.',
			'Par le passé, les femmes de la noblesse ne se\nparfumaient pas, mais étaient accompagnées\nd’un Fluvetin exhalant leur parfum favori.',
			'Son corps dégage un parfum qui envoûte ceux qui le respirent\net change en fonction de son alimentation.',
			'Par le passé, les femmes de la noblesse ne se parfumaient\npas, mais étaient accompagnées d’un Fluvetin exhalant\nleur parfum favori.',
			'Ce Pokémon sécrète son doux parfum grâce\nà un organe en forme de poche. S’il modifie\nson alimentation, l’odeur de son parfum change.',
			'Une douce odeur qui charme les gens émane\nde son corps. Les dames nobles raffolaient de lui.',
		],
		[Language.De]: [
			'Der von ihm verströmte Duft verzückt jeden, der ihn\nriecht. Je nachdem, was es frisst, ändert sich sein Duft.',
			'In der Vergangenheit hatten vornehme Damen, anstatt\nParfüm zu benutzen, immer ein Parfi dabei, das ihren\nLieblingsduft verströmte.',
			'Der von ihm verströmte Duft verzückt jeden, der ihn riecht.\nJe nachdem, was es frisst, ändert sich sein Duft.',
			'In der Vergangenheit hatten vornehme Damen, anstatt Parfüm\nzu benutzen, immer ein Parfi dabei, das ihren Lieblingsduft\nverströmte.',
			'Dieses Pokémon erzeugt Gerüche mithilfe einer\nDrüse in seinem Körper. Je nach Futter kann es\nunterschiedliche Düfte produzieren.',
			'Von seinem Körper geht ein süßer Duft aus, der\neinfach jeden bezaubert. Bei den vornehmen\nDamen des Adels war es besonders beliebt.',
		],
		[Language.Es]: [
			'Su cuerpo emana una fragancia que embelesa a quien\nla huele. La fragancia es diferente según los alimentos\nque ingiere.',
			'Antaño, las damas de la nobleza llevaban un Spritzee\nconsigo que desprendía su aroma preferido, en vez de\nutilizar un perfume convencional.',
			'Su cuerpo emana una fragancia que embelesa a quien la\nhuele. La fragancia es diferente según los alimentos que\ningiere.',
			'Antaño, las damas de la nobleza llevaban un Spritzee consigo\nque desprendía su aroma preferido, en vez de utilizar un\nperfume convencional.',
			'Posee un órgano interno con el cual produce una\nfragancia que varía en función de los alimentos\nque ingiere.',
			'Su cuerpo emana una fragancia que embelesa a\nquien la huele. Llegó a ser muy apreciado entre\nlas damas de la nobleza.',
		],
		[Language.It]: [
			'Il suo corpo emette un profumo che inebria chi lo\nannusa. La fragranza cambia in base a ciò che mangia.',
			'Si dice che nell’antichità, al posto del profumo,\nle nobildonne portassero sempre con loro questo\nPokémon, che diffondeva la loro fragranza preferita.',
			'Il suo corpo emette un profumo che inebria chi lo annusa.\nLa fragranza cambia in base a ciò che mangia.',
			'Si dice che nell’antichità, al posto del profumo, le nobildonne\nportassero sempre con loro questo Pokémon, che diffondeva\nla loro fragranza preferita.',
			'Questo Pokémon possiede un organo interno che\nproduce profumo. Il tipo di profumo cambia a\nseconda del cibo di cui si nutre.',
			'Il suo corpo emana un profumo irresistibile che\nammalia gli esseri umani. Era particolarmente\namato dalle nobildonne.',
		],
		[Language.En]: [
			'It emits a scent that enraptures those\nwho smell it. This fragrance changes\ndepending on what it has eaten.',
			'In the past, rather than using perfume,\nroyal ladies carried a Spritzee\nthat would waft a fragrance they liked.',
			'A scent pouch within this Pokémon’s body allows\nit to create various scents. A change in its diet\nwill alter the fragrance it produces.',
			'The scent its body gives off enraptures those\nwho smell it. Noble ladies had no shortage of\nlove for Spritzee.',
		],
		[Language.Ja]: [
			'かいだ　者を　うっとりさせる\n香りを　体から　漂わせる。\n食べた　もので　香りが　変わる。',
			'昔の　貴婦人たちは　香水の　かわりに\n好みの　香りを　出す\nシュシュプを　連れていたという。',
			'体内の　におい袋で　においを\nつくる　ポケモン。　エサが　変わると\nつくられる　においも　変わる。',
			'人を　魅了する　香しい\nにおいを　体から　漂わせる。\n高貴な　婦人たちに　愛された。',
		],
		[Language.ZhHant]: [
			'用體內的香囊製造香氣的寶可夢。\n如果更換餵給牠的食物，\n製造出的香氣也會隨之改變。',
			'身上飄出的香氣\n能讓人們神魂顛倒。\n貴婦們對牠鍾愛萬分。',
		],
		[Language.ZhHans]: [
			'用体内的香囊制造香气的宝可梦。\n如果更换喂给它的食物，\n制造出的香气也会随之改变。',
			'身上飘出的香气\n能让人们神魂颠倒。\n贵妇们对它钟爱万分。',
		],
	},
	[
		[
			Variety.Spritzee,
			68,
			2,
			5,
			[Type.Fairy],
			{
				frontDefault: 'fbd135b8.png',
				frontShiny: 'af58efcf.png',
				backDefault: 'a0bcbc44.png',
				backShiny: 'a63a4e63.png',
			},
			{
				[Stat.Hp]: {baseStat: 78, effort: 1},
				[Stat.Attack]: {baseStat: 52},
				[Stat.Defense]: {baseStat: 60},
				[Stat.SpecialAttack]: {baseStat: 63},
				[Stat.SpecialDefense]: {baseStat: 65},
				[Stat.Speed]: {baseStat: 23},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.Wish,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.CalmMind,
					Move.GyroBall,
					Move.EnergyBall,
					Move.FlashCannon,
					Move.TrickRoom,
					Move.Round,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					27,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.HelpingHand,
					Move.SkillSwap,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					21,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SweetKiss,
					3,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Endure,
					Move.Charm,
					Move.Encore,
					Move.FakeTears,
					Move.DrainingKiss,
					Move.MistyTerrain,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Attract,
					18,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SweetScent,
					Move.FairyWind,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					39,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.CalmMind,
					33,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.NastyPlot,
					Move.AllySwitch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_SwordShield,
					MoveLearnMethod_Egg,
					Move.AfterYou,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					6,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					9,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.MistyExplosion,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.Wish,
					Move.NastyPlot,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.CalmMind,
					Move.GyroBall,
					Move.EnergyBall,
					Move.FlashCannon,
					Move.TrickRoom,
					Move.Round,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.PsychUp,
					Move.Torment,
					Move.ChargeBeam,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					48,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HelpingHand,
					Move.SkillSwap,
					Move.Telekinesis,
					Move.AfterYou,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SweetKiss,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Attract,
					29,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HealBell,
					Move.MagicCoat,
					Move.Endeavor,
					Move.Covet,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SweetScent,
					Move.FairyWind,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					44,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Refresh,
					Move.Captivate,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.CalmMind,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					31,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.Wish,
					Move.Refresh,
					Move.Captivate,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.CalmMind,
					Move.GyroBall,
					Move.EnergyBall,
					Move.FlashCannon,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SweetKiss,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Attract,
					29,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SweetScent,
					Move.FairyWind,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.CalmMind,
					17,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					50,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					31,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.Wish,
					Move.Refresh,
					Move.Captivate,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.SecretPower,
					Move.CalmMind,
					Move.GyroBall,
					Move.EnergyBall,
					Move.FlashCannon,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Flash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HealBell,
					Move.HelpingHand,
					Move.MagicCoat,
					Move.Endeavor,
					Move.SkillSwap,
					Move.Covet,
					Move.AfterYou,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SweetKiss,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Attract,
					29,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SweetScent,
					Move.FairyWind,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					44,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					8,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.CalmMind,
					17,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					50,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					21,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					31,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.Wish,
					Move.Refresh,
					Move.Captivate,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.CalmMind,
					Move.GyroBall,
					Move.EnergyBall,
					Move.FlashCannon,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SweetKiss,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Attract,
					29,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SweetScent,
					Move.FairyWind,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.CalmMind,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					31,
				),
			].flat(),
			[
				{
					ability: Ability.Healer,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.AromaVeil,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Spritzee,
					PokemonFormBits.Default,
					{
						frontDefault: 'fbd135b8.png',
						frontShiny: 'af58efcf.png',
						backDefault: 'a0bcbc44.png',
						backShiny: 'a63a4e63.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Aromatisse,
	50,
	140,
	Color.Pink,
	[EggGroup.Fairy],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Humanoid,
	{
		[Language.JaHrkt]: ['フレフワン'],
		[Language.Roomaji]: ['Frefuwan'],
		[Language.Ko]: ['프레프티르'],
		[Language.ZhHant]: ['芳香精'],
		[Language.Fr]: ['Cocotine'],
		[Language.De]: ['Parfinesse'],
		[Language.Es]: ['Aromatisse'],
		[Language.It]: ['Aromatisse'],
		[Language.En]: ['Aromatisse'],
		[Language.Ja]: ['フレフワン'],
		[Language.ZhHans]: ['芳香精'],
	},
	{
		[Language.JaHrkt]: ['ほうこうポケモン'],
		[Language.Ko]: ['방향포켓몬'],
		[Language.ZhHant]: ['芳香寶可夢'],
		[Language.Fr]: ['Pokémon Parfum'],
		[Language.De]: ['Duft-Pokémon'],
		[Language.Es]: ['Pokémon Fragancia'],
		[Language.It]: ['Pokémon Fragranza'],
		[Language.En]: ['Fragrance Pokémon'],
		[Language.Ja]: ['ほうこうポケモン'],
		[Language.ZhHans]: ['芳香宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'さまざまな　においを　つくりだす。\nあいての　いやがる　においを　だして\nたたかいを　ゆうりに　すすめるのだ。',
			'においが　つよすぎるため\nよほど　すきな　トレーナーでなければ\nつれて　あるくのは　キツイのだ。',
			'たいもうから　きょうれつな　においを\nいつも　だしているため　パートナーは\nはなが　きかなくなってしまうのだ。',
			'てきの　たたかう　きもちを　なくす\nあくしゅうや　みかたを　たすける\nかぐわしい　かおりを　つくりだす。',
		],
		[Language.Ko]: [
			'여러 가지 향기를 만들어 낸다.\n상대가 싫어하는 냄새를 내보내\n싸움을 유리하게 이끌어 나간다.',
			'향기가 지나치게 강하기 때문에\n어지간히 좋아하는 트레이너가 아니면\n데리고 다니기 힘들다.',
			'털에서 항상 강렬한 향기를\n내보내기 때문에 파트너는\n후각이 둔해지게 된다.',
			'상대의 전의를 상실시키는\n악취와 같은 편을 돕는\n황홀한 향기를 만들어 낸다.',
		],
		[Language.Fr]: [
			'Ce Pokémon est capable d’émettre toutes sortes\nd’odeurs pour incommoder son adversaire et\naugmenter ses chances de gagner.',
			'Son parfum est tellement capiteux qu’un Dresseur\nn’appréciant pas pleinement son odeur aura toutes\nles difficultés du monde à cheminer à ses côtés.',
			'Ce Pokémon est capable d’émettre toutes sortes d’odeurs\npour incommoder son adversaire et augmenter ses chances\nde gagner.',
			'Son parfum est tellement capiteux qu’un Dresseur n’appréciant\npas pleinement son odeur aura toutes les difficultés du monde\nà cheminer à ses côtés.',
			'Un parfum capiteux émane constamment\nde sa fourrure. Ce parfum est si fort qu’il peut\npriver son Dresseur d’odorat.',
			'Il peut émettre une puanteur si infâme qu’elle\nprive ses ennemis de leur combativité, ou un\nparfum si réconfortant qu’il encourage ses alliés.',
		],
		[Language.De]: [
			'Es produziert verschiedene Düfte. Im Kampf verschafft\nes sich einen Vorteil, indem es einen Duft verströmt,\nder dem Gegner zuwider ist.',
			'Sein Duft ist so stark, dass es für einen Trainer,\nder seinen Duft nicht mag, schwer ist, es an\nseiner Seite zu haben.',
			'Es produziert verschiedene Düfte. Im Kampf verschafft es sich\neinen Vorteil, indem es einen Duft verströmt, der dem Gegner\nzuwider ist.',
			'Sein Duft ist so stark, dass es für einen Trainer, der seinen\nDuft nicht mag, schwer ist, es an seiner Seite zu haben.',
			'Von seinem Fell strömt ein derart intensiver\nGeruch aus, dass die Nase seines Trainers\nirgendwann unweigerlich den Geist aufgibt.',
			'Es kann üblen Gestank verströmen, der seinen\nGegnern den Kampfeswillen raubt, oder wohlige\nDüfte erzeugen, die seinen Mitstreitern helfen.',
		],
		[Language.Es]: [
			'Puede producir multitud de olores diferentes y, en\ncombate, secreta los que le resultan molestos al\nenemigo para así contar con cierta ventaja.',
			'La fragancia que despide es tan potente que solo\npodría caminar a su lado un Entrenador que tenga\nespecial predilección por ese aroma.',
			'Puede producir multitud de olores diferentes y, en combate,\nsecreta los que le resultan molestos al enemigo para así\ncontar con cierta ventaja.',
			'La fragancia que despide es tan potente que solo podría\ncaminar a su lado un Entrenador que tenga especial\npredilección por ese aroma.',
			'La fragancia que despide su pelaje es tan\npotente que puede dejar sin olfato a su\nEntrenador.',
			'Puede emanar tanto un olor desagradable para\ndesmotivar al rival como un dulce aroma para\nreconfortar a los aliados en combate.',
		],
		[Language.It]: [
			'È in grado di emanare profumi di diversi tipi. Durante\nla lotta, mette in difficoltà i nemici emettendo odori\nsgradevoli.',
			'Emette un profumo intensissimo. Se un Allenatore non\nè un assoluto estimatore di quel particolare aroma,\navrà grosse difficoltà anche solo a stargli vicino.',
			'È in grado di emanare profumi di diversi tipi. Durante la lotta,\nmette in difficoltà i nemici emettendo odori sgradevoli.',
			'Emette un profumo intensissimo. Se un Allenatore non è un\nassoluto estimatore di quel particolare aroma, avrà grosse\ndifficoltà anche solo a stargli vicino.',
			'Il suo pelo emette un profumo così intenso\nda compromettere irrimediabilmente l’olfatto\ndel suo Allenatore.',
			'Può produrre un tanfo così tremendo da far\npassare ai nemici la voglia di lottare, e un\nprofumo così buono da incoraggiare gli alleati.',
		],
		[Language.En]: [
			'It devises various scents, pleasant and unpleasant,\nand emits scents that its enemies dislike in order\nto gain an edge in battle.',
			'Its scent is so overpowering that, unless a Trainer\nhappens to really enjoy the smell, he or she will\nhave a hard time walking alongside it.',
			'The scent that constantly emits from its fur is so\npowerful that this Pokémon’s companions will\neventually lose their sense of smell.',
			'The scents Aromatisse can produce range from\nsweet smells that bolster allies to foul smells\nthat sap an opponent’s will to fight.',
		],
		[Language.Ja]: [
			'さまざまな　においを　作り出す。\n相手の　嫌がる　においを　出して\n戦いを　有利に　進めるのだ。',
			'においが　強すぎるため\nよほど　好きな　トレーナーでなければ\n連れて　歩くのは　キツイのだ。',
			'体毛から　強烈な　においを\nいつも　出しているため　パートナーは\n鼻が　利かなくなってしまうのだ。',
			'敵の　戦う　気持ちを　なくす\n悪臭や　味方を　助ける\n香しい　香りを　つくりだす。',
		],
		[Language.ZhHant]: [
			'由於牠會不斷從體毛裡\n散發出強烈的香氣，\n導致夥伴訓練家的嗅覺失靈。',
			'會發出惡臭讓敵人喪失戰意，\n或者發出芳香的味道\n來幫助自己的夥伴。',
		],
		[Language.ZhHans]: [
			'由于它会不断从体毛里\n散发出强烈的香气，\n导致伙伴训练家的嗅觉失灵。',
			'会发出恶臭让敌人丧失战意，\n或者发出芳香的味道\n来帮助自己的伙伴。',
		],
	},
	[
		[
			Variety.Aromatisse,
			162,
			8,
			155,
			[Type.Fairy],
			{
				frontDefault: 'd5559798.png',
				frontShiny: 'a9172945.png',
				backDefault: '0f7b1ebc.png',
				backShiny: '8b6f9732.png',
			},
			{
				[Stat.Hp]: {baseStat: 101, effort: 2},
				[Stat.Attack]: {baseStat: 72},
				[Stat.Defense]: {baseStat: 72},
				[Stat.SpecialAttack]: {baseStat: 99},
				[Stat.SpecialDefense]: {baseStat: 89},
				[Stat.Speed]: {baseStat: 29},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.CalmMind,
					Move.GyroBall,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.TrickRoom,
					Move.Psyshock,
					Move.Round,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					27,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Metronome,
					Move.Endure,
					Move.Charm,
					Move.Encore,
					Move.FakeTears,
					Move.NastyPlot,
					Move.DrainingKiss,
					Move.MistyTerrain,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.HelpingHand,
					Move.SkillSwap,
					Move.DrainPunch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SweetKiss,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Attract,
					18,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SweetScent,
					Move.HealPulse,
					Move.FairyWind,
					Move.AromaticMist,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					42,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					39,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.CalmMind,
					33,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					1,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					9,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.MistyExplosion,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.CalmMind,
					Move.GyroBall,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.TrickRoom,
					Move.Psyshock,
					Move.Round,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.PsychUp,
					Move.Torment,
					Move.ChargeBeam,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					57,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HelpingHand,
					Move.SkillSwap,
					Move.DrainPunch,
					Move.Telekinesis,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					38,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SweetKiss,
					Move.SweetScent,
					Move.HealPulse,
					Move.FairyWind,
					Move.AromaticMist,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SweetKiss,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Attract,
					29,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HealBell,
					Move.MagicCoat,
					Move.Endeavor,
					Move.Covet,
					Move.AfterYou,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					64,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.CalmMind,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					53,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					31,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.CalmMind,
					Move.GyroBall,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					57,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					38,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SweetKiss,
					Move.SweetScent,
					Move.OdorSleuth,
					Move.HealPulse,
					Move.FairyWind,
					Move.AromaticMist,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SweetKiss,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Attract,
					29,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					64,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.CalmMind,
					17,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					53,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					31,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.SecretPower,
					Move.CalmMind,
					Move.GyroBall,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Flash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HealBell,
					Move.HelpingHand,
					Move.MagicCoat,
					Move.Endeavor,
					Move.SkillSwap,
					Move.Covet,
					Move.DrainPunch,
					Move.AfterYou,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SweetKiss,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Attract,
					29,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SweetScent,
					Move.HealPulse,
					Move.FairyWind,
					Move.AromaticMist,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					64,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					44,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					8,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.CalmMind,
					17,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					53,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					21,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					31,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.CalmMind,
					Move.GyroBall,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.TrickRoom,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SweetKiss,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Attract,
					29,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SweetScent,
					Move.HealPulse,
					Move.FairyWind,
					Move.AromaticMist,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					64,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.OdorSleuth,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.CalmMind,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.EchoedVoice,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					53,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					31,
				),
			].flat(),
			[
				{
					ability: Ability.Healer,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.AromaVeil,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Aromatisse,
					PokemonFormBits.Default,
					{
						frontDefault: 'd5559798.png',
						frontShiny: 'a9172945.png',
						backDefault: '0f7b1ebc.png',
						backShiny: '8b6f9732.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Swirlix,
	50,
	200,
	Color.White,
	[EggGroup.Fairy],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Legs,
	{
		[Language.JaHrkt]: ['ペロッパフ'],
		[Language.Roomaji]: ['Peroppafu'],
		[Language.Ko]: ['나룸퍼프'],
		[Language.ZhHant]: ['綿綿泡芙'],
		[Language.Fr]: ['Sucroquin'],
		[Language.De]: ['Flauschling'],
		[Language.Es]: ['Swirlix'],
		[Language.It]: ['Swirlix'],
		[Language.En]: ['Swirlix'],
		[Language.Ja]: ['ペロッパフ'],
		[Language.ZhHans]: ['绵绵泡芙'],
	},
	{
		[Language.JaHrkt]: ['わたあめポケモン'],
		[Language.Ko]: ['솜사탕포켓몬'],
		[Language.ZhHant]: ['棉花糖寶可夢'],
		[Language.Fr]: ['Pokémon Confiserie'],
		[Language.De]: ['Zuckerwatte-Pokémon'],
		[Language.Es]: ['Pokémon Chuchería'],
		[Language.It]: ['Pokémon Zuccherino'],
		[Language.En]: ['Cotton Candy Pokémon'],
		[Language.Ja]: ['わたあめポケモン'],
		[Language.ZhHans]: ['棉花糖宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'わたあめのような　あまくて　ベタつく\nしろい　いとを　だして　あいてを\nからめとり　うごきを　ふうじる。',
			'あまいもの　ばかりを　たべているので\nたいもうが　わたあめのように\nあまく　ベタベタしている。',
			'１にちに　たべる　さとうは　じぶんの\nたいじゅうと　おなじ。　とうぶんが\nたりないと　ひどく　ふきげんになる。',
			'ふわふわの　たいもうは　わたあめの\nように　あまい　におい。　べたつく\nいとを　だして　てきを　からめとる。',
		],
		[Language.Ko]: [
			'솜사탕 같은 달고 끈적끈적한\n하얀 실을 내뿜어 상대를\n휘감고 움직이지 못하게 한다.',
			'달콤한 것만 먹기 때문에\n몸의 털이 솜사탕처럼\n달고 끈적끈적하다.',
			'하루에 자신의 체중만큼의\n설탕을 먹는다. 당분이\n부족하면 매우 기분이 나빠진다.',
			'푹신푹신한 털은 솜사탕처럼\n달콤한 냄새가 난다.\n끈끈한 실을 내어 상대를 묶어버린다.',
		],
		[Language.Fr]: [
			'Il immobilise son adversaire à l’aide de filaments\nblancs, sucrés et collants qui ressemblent à de la\nbarbe à papa.',
			'Il se gave de sucreries à longueur de journée, à tel\npoint que sa fourrure finit par ressembler à de la barbe\nà papa, sucrée et poisseuse.',
			'Il immobilise son adversaire à l’aide de filaments blancs,\nsucrés et collants qui ressemblent à de la barbe à papa.',
			'Il se gave de sucreries à longueur de journée, à tel point\nque sa fourrure finit par ressembler à de la barbe à papa,\nsucrée et poisseuse.',
			'Il mange son propre poids en sucre chaque jour.\nS’il n’a pas sa dose de sucreries, il devient\nhorriblement grognon.',
			'Sa douce fourrure possède une odeur sucrée\ncomme la barbe à papa. Il produit des filaments\ngluants pour empêtrer ses adversaires.',
		],
		[Language.De]: [
			'Es stößt weiße Fäden aus, die so süß und klebrig wie\nZuckerwatte sind. Mit ihnen umwickelt es den Gegner\nund hindert ihn daran, sich zu bewegen.',
			'Es frisst nur Süßigkeiten, weshalb sein Fell so süß\nund klebrig wie Zuckerwatte ist.',
			'Es frisst nur Süßigkeiten, weshalb sein Fell so süß und klebrig\nwie Zuckerwatte ist.',
			'Die Menge an Zucker, die es pro Tag verschlingt,\nentspricht seinem Körpergewicht. Bekommt es\nnicht genügend Zucker, wird es unausstehlich.',
			'Sein flauschiges Fell duftet süß wie Zuckerwatte.\nEs stößt klebrige Fäden aus, mit denen es seine\nGegner umwickelt.',
		],
		[Language.Es]: [
			'Escupe hebras pegajosas de color blanco y textura\nparecida a la del algodón de azúcar, con las que\nenvuelve al enemigo y le impide que se mueva.',
			'Como se alimenta exclusivamente de dulces, su\npelaje es tan pegajoso y dulzón como el algodón\nde azúcar.',
			'Escupe hebras pegajosas de color blanco y textura parecida a\nla del algodón de azúcar, con las que envuelve al enemigo y\nle impide que se mueva.',
			'Como se alimenta exclusivamente de dulces, su pelaje es tan\npegajoso y dulzón como el algodón de azúcar.',
			'Ingiere diariamente una cantidad de azúcar\nequivalente a su peso corporal. De lo contrario,\nse pone de muy mal humor.',
			'Su esponjoso pelaje desprende un olor dulzón\ncomo el del algodón de azúcar. Escupe hebras\npegajosas con las que envuelve a sus enemigos.',
		],
		[Language.It]: [
			'Immobilizza il nemico avvolgendolo in filamenti\nbianchi, dolci e appiccicosi, simili a zucchero filato.',
			'Poiché mangia solo cose dolci, il suo pelo ha\nla consistenza e il sapore dello zucchero filato.',
			'Immobilizza il nemico avvolgendolo in filamenti bianchi, dolci\ne appiccicosi, simili a zucchero filato.',
			'Poiché mangia solo cose dolci, il suo pelo ha la consistenza\ne il sapore dello zucchero filato.',
			'Mangia ogni giorno una quantità di zucchero pari\nal peso del suo corpo. Quando il suo livello di\nglucosio cala troppo, diventa di cattivo umore.',
			'La sua soffice pelliccia emette un dolce\nprofumo di zucchero filato. Avvolge il nemico\ncon filamenti appiccicosi.',
		],
		[Language.En]: [
			'To entangle its opponents in battle, it extrudes\nwhite threads as sweet and sticky as cotton candy.',
			'Because it eats nothing but sweets,\nits fur is as sticky sweet as cotton candy.',
			'It eats its own weight in sugar every day.\nIf it doesn’t get enough sugar, it becomes\nincredibly grumpy.',
			'The sweet smell of cotton candy perfumes\nSwirlix’s fluffy fur. This Pokémon spits out\nsticky string to tangle up its enemies.',
		],
		[Language.Ja]: [
			'わたあめのような　甘くて　ベタつく\n白い　糸を　出して\n相手を　絡め取り　動きを　封じる。',
			'甘いもの　ばかりを　食べているので\n体毛が　わたあめのように\n甘く　ベタベタしている。',
			'１日に　食べる　砂糖は　自分の\n体重と　同じ。　糖分が\n足りないと　ひどく　不機嫌になる。',
			'ふわふわの　体毛は　綿飴の\nように　甘い　におい。　べたつく\n糸を　出して　敵を　絡めとる。',
		],
		[Language.ZhHant]: [
			'每天要吃掉與自己體重\n相同重量的砂糖，\n糖分不夠就會鬧脾氣。',
			'蓬鬆的體毛聞起來\n就像棉花糖一樣甜甜的。\n會放出黏答答的絲纏住敵人。',
		],
		[Language.ZhHans]: [
			'每天要吃掉与自己体重\n相同重量的砂糖，\n糖分不够就会闹脾气。',
			'蓬松的体毛闻起来\n就像棉花糖一样甜甜的。\n会放出黏糊糊的丝缠住敌人。',
		],
	},
	[
		[
			Variety.Swirlix,
			68,
			4,
			35,
			[Type.Fairy],
			{
				frontDefault: '4809de34.png',
				frontShiny: '375d81f1.png',
				backDefault: 'ecdf496d.png',
				backShiny: 'dd243ea0.png',
			},
			{
				[Stat.Hp]: {baseStat: 62},
				[Stat.Attack]: {baseStat: 48},
				[Stat.Defense]: {baseStat: 66, effort: 1},
				[Stat.SpecialAttack]: {baseStat: 59},
				[Stat.SpecialDefense]: {baseStat: 57},
				[Stat.Speed]: {baseStat: 49},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.SweetScent,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.Surf,
					Move.Thunderbolt,
					Move.Psychic,
					Move.LightScreen,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.CalmMind,
					Move.EnergyBall,
					Move.Round,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.StringShot,
					21,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Amnesia,
					Move.Endure,
					Move.Charm,
					Move.FakeTears,
					Move.DrainingKiss,
					Move.PlayRough,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.HelpingHand,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.CottonSpore,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					30,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Yawn,
					Move.Copycat,
					Move.AfterYou,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					39,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					9,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FakeTears,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.EnergyBall,
					27,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Round,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.CottonGuard,
					36,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Egg,
					Move.StickyWeb,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					33,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					6,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PlayNice,
					3,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.MistyExplosion,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.SweetScent,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.Surf,
					Move.Thunderbolt,
					Move.Psychic,
					Move.LightScreen,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.CalmMind,
					Move.EnergyBall,
					Move.Round,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.PsychUp,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					58,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HelpingHand,
					Move.AfterYou,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.CottonSpore,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Egg,
					Move.BellyDrum,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HealBell,
					Move.MagicCoat,
					Move.Endeavor,
					Move.Covet,
					Move.GastroAcid,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					67,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					45,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Yawn,
					Move.Copycat,
					Move.AfterYou,
					Move.StickyWeb,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FakeTears,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.EnergyBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Round,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.CottonGuard,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PlayNice,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.SweetScent,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.Surf,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.CalmMind,
					Move.EnergyBall,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					58,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.CottonSpore,
					17,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.BellyDrum,
					Move.Yawn,
					Move.Copycat,
					Move.AfterYou,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					67,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FakeTears,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.EnergyBall,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Round,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.CottonGuard,
					41,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PlayNice,
					8,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.SweetScent,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.Surf,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.SecretPower,
					Move.CalmMind,
					Move.EnergyBall,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					58,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Flash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HealBell,
					Move.HelpingHand,
					Move.MagicCoat,
					Move.Endeavor,
					Move.Covet,
					Move.GastroAcid,
					Move.AfterYou,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.CottonSpore,
					17,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.BellyDrum,
					Move.Yawn,
					Move.Copycat,
					Move.AfterYou,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					67,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					45,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					21,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FakeTears,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.EnergyBall,
					36,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Round,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.CottonGuard,
					41,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					49,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PlayNice,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.SweetScent,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.Surf,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.DreamEater,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.CalmMind,
					Move.EnergyBall,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					58,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.CottonSpore,
					17,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.BellyDrum,
					Move.Yawn,
					Move.Copycat,
					Move.AfterYou,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					67,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FakeTears,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.EnergyBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Round,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.CottonGuard,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PlayNice,
					8,
				),
			].flat(),
			[
				{
					ability: Ability.SweetVeil,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Unburden,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Swirlix,
					PokemonFormBits.Default,
					{
						frontDefault: '4809de34.png',
						frontShiny: '375d81f1.png',
						backDefault: 'ecdf496d.png',
						backShiny: 'dd243ea0.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Slurpuff,
	50,
	140,
	Color.White,
	[EggGroup.Fairy],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Humanoid,
	{
		[Language.JaHrkt]: ['ペロリーム'],
		[Language.Roomaji]: ['Peroream'],
		[Language.Ko]: ['나루림'],
		[Language.ZhHant]: ['胖甜妮'],
		[Language.Fr]: ['Cupcanaille'],
		[Language.De]: ['Sabbaione'],
		[Language.Es]: ['Slurpuff'],
		[Language.It]: ['Slurpuff'],
		[Language.En]: ['Slurpuff'],
		[Language.Ja]: ['ペロリーム'],
		[Language.ZhHans]: ['胖甜妮'],
	},
	{
		[Language.JaHrkt]: ['ホイップポケモン'],
		[Language.Ko]: ['휩포켓몬'],
		[Language.ZhHant]: ['泡沫奶油寶可夢'],
		[Language.Fr]: ['Pokémon Mousseline'],
		[Language.De]: ['Schlagsahne-Pokémon'],
		[Language.Es]: ['Pokémon Nata'],
		[Language.It]: ['Pokémon Panna'],
		[Language.En]: ['Meringue Pokémon'],
		[Language.Ja]: ['ホイップポケモン'],
		[Language.ZhHans]: ['泡沫奶油宝可梦'],
	},
	{
		[Language.Ja]: [
			'体臭から　心と　体の\n調子を　嗅ぎとる。　医療への\n応用が　期待されている。',
			'わずかな　においでも　かぎわける\n敏感な　きゅうかくを　活かして\nパティシエの　手伝いを　している。',
			'きゅうかくは　人の　１億倍以上。\n空気中に　漂う　わずかな　においで\nまわりの　様子が　すべて　わかる。',
			'体毛に　たくさん　空気を\n含んでいるので　触り心地は\n柔らかく　見た目より　軽い。',
		],
		[Language.JaHrkt]: [
			'わずかな　においでも　かぎわける\nびんかんな　きゅうかくを　いかして\nパティシエの　てつだいを　している。',
			'きゅうかくは　ひとの　１おくばい。\nくうきちゅうの　わずかな　においで\nまわりの　ようすが　すべて　わかる。',
			'たいしゅうから　こころと　からだの\nちょうしを　かぎとる。　いりょうへの\nおうようが　きたいされている。',
			'たいもうに　たくさん　くうきを\nふくんでいるので　さわりごこちは\nやわらかく　みためより　かるい。',
		],
		[Language.Ko]: [
			'아주 약간의 냄새도 구별할 수 있는\n민감한 후각을 살려\n파티시에를 돕고 있다.',
			'후각이 사람의 1억 배이다.\n공기 중의 미세한 냄새로\n주위의 상황을 전부 파악할 수 있다.',
			'체취로 몸과 마음의 상태를\n알아낸다. 의료계에서 응용될\n것으로 기대되고 있다.',
			'털에 많은 공기를 담고 있어\n촉감이 부드럽고\n보기보다 가볍다.',
		],
		[Language.Fr]: [
			'La finesse de son odorat lui permet de distinguer\nles nuances de parfums les plus subtiles, ce qui en\nfait un compagnon idéal pour les pâtissiers.',
			'Son odorat est des millions de fois plus développé\nque celui d’un humain. Il se repère dans l’espace\ngrâce aux odeurs qui flottent autour de lui.',
			'La finesse de son odorat lui permet de distinguer les nuances\nde parfums les plus subtiles, ce qui en fait un compagnon idéal\npour les pâtissiers.',
			'Son odorat est des millions de fois plus développé que celui\nd’un humain. Il se repère dans l’espace grâce aux odeurs\nqui flottent autour de lui.',
			'Il peut diagnostiquer l’état de santé mentale et\nphysique de quelqu’un rien qu’à l’odorat. Un tel\ndon pourrait avoir des applications en médecine.',
			'Sa fourrure est si aérée qu’elle le rend très doux\net très agréable au toucher, et bien plus léger\nqu’il en a l’air.',
		],
		[Language.De]: [
			'Es verfügt über einen feinen Geruchssinn, mit dem\nes selbst die schwächsten Gerüche erkennen kann.\nEs hilft deshalb oft in Konditoreien aus.',
			'Sein Geruchssinn ist mehrere Millionen Mal stärker als\nder des Menschen. Durch die schwächsten Gerüche\nin der Luft weiß es, was in seiner Umgebung vorgeht.',
			'Es verfügt über einen feinen Geruchssinn, mit dem es selbst\ndie schwächsten Gerüche erkennen kann. Es hilft deshalb oft\nin Konditoreien aus.',
			'Sein Geruchssinn ist mehrere Millionen Mal stärker als der\ndes Menschen. Durch die schwächsten Gerüche in der Luft\nweiß es, was in seiner Umgebung vorgeht.',
			'Es kann die körperliche und seelische Verfassung\nanderer anhand ihres Körpergeruchs erkennen.\nDies versucht man für die Medizin zu nutzen.',
			'Da in seinem Fell eine Menge Luft eingeschlossen\nist, fühlt es sich unheimlich weich an und ist\nleichter, als es auf den ersten Blick aussieht.',
		],
		[Language.Es]: [
			'Puede rastrear hasta el más débil de los olores. Hace\nuso de su fino olfato para ayudar a los pasteleros más\nexquisitos.',
			'Su sentido del olfato es varios millones de veces más\nagudo que el de un humano. Con él percibe lo que\nsucede a su alrededor, por sutil que sea el olor.',
			'Puede rastrear hasta el más débil de los olores. Hace uso de\nsu fino olfato para ayudar a los pasteleros más exquisitos.',
			'Su sentido del olfato es varios millones de veces más agudo\nque el de un humano. Con él percibe lo que sucede a su\nalrededor, por sutil que sea el olor.',
			'Puede percibir el estado físico y mental de\nalguien solo con olerlo, lo que podría tener\naplicaciones útiles en el campo de la medicina.',
			'La gran cantidad de aire acumulada en su pelaje\nle confiere un tacto aterciopelado y un peso muy\ninferior al que aparenta.',
		],
		[Language.It]: [
			'È dotato di un olfatto sensibilissimo che gli permette\ndi distinguere anche gli odori più sottili. Si serve di\nquesto talento per aiutare i pasticcieri.',
			'Il suo olfatto è milioni di volte più sviluppato di quello\ndegli esseri umani. Grazie ad esso, riesce a percepire\nl’ambiente circostante attraverso gli odori più sottili.',
			'È dotato di un olfatto sensibilissimo che gli permette di\ndistinguere anche gli odori più sottili. Si serve di questo\ntalento per aiutare i pasticcieri.',
			'Il suo olfatto è milioni di volte più sviluppato di quello degli\nesseri umani. Grazie ad esso, riesce a percepire l’ambiente\ncircostante attraverso gli odori più sottili.',
			'È in grado di comprendere lo stato fisico e\nmentale altrui dall’odore. Questa capacità\npotrebbe essere molto utile in campo medico.',
			'La grande quantità d’aria contenuta nella sua\npelliccia la rende soffice al tatto. È più leggero\ndi quanto possa sembrare.',
		],
		[Language.En]: [
			'It can distinguish the faintest of scents.\nIt puts its sensitive sense of smell to use\nby helping pastry chefs in their work.',
			'Its sense of smell is 100 million times better than\na human’s, so even the faintest scent tells it about\neverything in the area. It’s like it can see with its nose!',
			'By taking in a person’s scent, it can sniff out their\nmental and physical condition. It’s hoped that\nthis skill will have many medical applications.',
			'Slurpuff’s fur contains a lot of air, making it soft\nto the touch and lighter than it looks.',
		],
		[Language.ZhHant]: [
			'能從人們身上的氣味裡\n嗅出他們的身心狀態。\n在醫療領域的實際應用備受矚目。',
			'因為體毛裡富含空氣，\n所以摸起來十分柔軟，\n重量也比看起來要輕。',
		],
		[Language.ZhHans]: [
			'能从人们身上的气味里\n嗅出他们的身心状态。\n在医疗领域的实际应用备受瞩目。',
			'因为体毛里富含空气，\n所以摸起来十分柔软，\n重量也比看起来要轻。',
		],
	},
	[
		[
			Variety.Slurpuff,
			168,
			8,
			50,
			[Type.Fairy],
			{
				frontDefault: '5791e8c4.png',
				frontShiny: '3a516014.png',
				backDefault: '8933e004.png',
				backShiny: '6613de63.png',
			},
			{
				[Stat.Hp]: {baseStat: 82},
				[Stat.Attack]: {baseStat: 80},
				[Stat.Defense]: {baseStat: 86, effort: 2},
				[Stat.SpecialAttack]: {baseStat: 85},
				[Stat.SpecialDefense]: {baseStat: 75},
				[Stat.Speed]: {baseStat: 72},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.SweetScent,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Psychic,
					Move.LightScreen,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.Round,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.StringShot,
					21,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunder,
					Move.Metronome,
					Move.Amnesia,
					Move.Endure,
					Move.Charm,
					Move.FakeTears,
					Move.DrainingKiss,
					Move.PlayRough,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.HelpingHand,
					Move.DrainPunch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.CottonSpore,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					39,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					9,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FakeTears,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.EnergyBall,
					27,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Round,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.CottonGuard,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.StickyWeb,
					42,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					33,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.FairyWind,
					Move.PlayNice,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.MistyExplosion,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.SweetScent,
					Move.FairyWind,
					Move.PlayNice,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Psychic,
					Move.LightScreen,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.Round,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.PsychUp,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					58,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HelpingHand,
					Move.DrainPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.CottonSpore,
					17,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HealBell,
					Move.MagicCoat,
					Move.Endeavor,
					Move.Covet,
					Move.GastroAcid,
					Move.AfterYou,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					67,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FakeTears,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.EnergyBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Round,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.CottonGuard,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PlayNice,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.SweetScent,
					Move.FairyWind,
					Move.PlayNice,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					58,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.CottonSpore,
					17,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					67,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FakeTears,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.EnergyBall,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Round,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.CottonGuard,
					41,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PlayNice,
					8,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.SweetScent,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.SecretPower,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					58,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Flash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HealBell,
					Move.HelpingHand,
					Move.MagicCoat,
					Move.Endeavor,
					Move.Covet,
					Move.GastroAcid,
					Move.DrainPunch,
					Move.AfterYou,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.CottonSpore,
					17,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					67,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					45,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					21,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FakeTears,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.EnergyBall,
					36,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Round,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.CottonGuard,
					41,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					49,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PlayNice,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.SweetScent,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.DreamEater,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.CalmMind,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					58,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.CottonSpore,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					67,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Wish,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FakeTears,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.EnergyBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Round,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.CottonGuard,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PlayNice,
					8,
				),
			].flat(),
			[
				{
					ability: Ability.SweetVeil,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Unburden,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Slurpuff,
					PokemonFormBits.Default,
					{
						frontDefault: '5791e8c4.png',
						frontShiny: '3a516014.png',
						backDefault: '8933e004.png',
						backShiny: '6613de63.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Inkay,
	50,
	190,
	Color.Blue,
	[EggGroup.Water1, EggGroup.Water2],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Tentacles,
	{
		[Language.JaHrkt]: ['マーイーカ'],
		[Language.Roomaji]: ['Maaiika'],
		[Language.Ko]: ['오케이징'],
		[Language.ZhHant]: ['好啦魷'],
		[Language.Fr]: ['Sepiatop'],
		[Language.De]: ['Iscalar'],
		[Language.Es]: ['Inkay'],
		[Language.It]: ['Inkay'],
		[Language.En]: ['Inkay'],
		[Language.Ja]: ['マーイーカ'],
		[Language.ZhHans]: ['好啦鱿'],
	},
	{
		[Language.JaHrkt]: ['かいてんポケモン'],
		[Language.Ko]: ['회전포켓몬'],
		[Language.ZhHant]: ['回轉寶可夢'],
		[Language.Fr]: ['Pokémon Rotation'],
		[Language.De]: ['Rotations-Pokémon'],
		[Language.Es]: ['Pokémon Rotación'],
		[Language.It]: ['Pokémon Volteggio'],
		[Language.En]: ['Revolving Pokémon'],
		[Language.Ja]: ['かいてんポケモン'],
		[Language.ZhHans]: ['回转宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'はっこうたいの　てんめつを　みつめた\nあいては　めが　くらみ　たたかう\nきもちが　なくなってしまうのだ。',
			'ひかりの　てんめつで　おそってきた\nてきの　せんいを　なくしてしまう。\nその　すきに　すがたを　かくすのだ。',
			'ひかりを　てんめつさせて　えものを\nおびきよせると　ながい　しょくしゅで\nからめとり　うごきを　ふうじるぞ。',
			'なかまと　じょうほう　こうかんを\nするとき　からだの　はっこうたいを\nふくざつな　リズムで　ひからせる。',
			'かいてんしながら　はっこうたいを\nてんめつ。　ひかりの　パターンで\nなかまと　コミュニケーションする。',
			'てきに　はっこうたいの　てんめつを\nあびせて　せんいを　なくしてしまう。\nその　すきに　にげだすのだ。',
		],
		[Language.Ko]: [
			'깜빡이는 발광체를 바라본\n상대는 눈앞이 어두컴컴해져\n전의를 상실해버리고 만다.',
			'빛을 깜박여서 덮쳐온\n적의 전의를 잃게 한다.\n그 틈에 모습을 감춘다.',
			'빛을 깜박여 먹이를 꾀어내고\n긴 촉수로 포박하여\n움직이지 못하게 한다.',
			'동료와 정보 교환을 할 때\n몸의 발광체를\n복잡한 리듬으로 빛낸다.',
			'회전하면서 발광체를\n깜빡인다. 빛의 패턴으로\n동료와 의사소통한다.',
			'상대를 향해 발광체를 깜빡여서\n전의를 상실시킨다.\n그 틈에 도망간다.',
		],
		[Language.Fr]: [
			'Éblouis par les points lumineux qui clignotent sur son\ncorps, les ennemis perdent toute envie de se battre.',
			'Il ébranle le moral des ennemis lui cherchant noise\ngrâce aux clignotements qu’il émet.\nIl profite de cette diversion pour se cacher.',
			'Éblouis par les points lumineux qui clignotent sur son corps,\nles ennemis perdent toute envie de se battre.',
			'Il ébranle le moral des ennemis lui cherchant noise grâce\naux clignotements qu’il émet. Il profite de cette diversion\npour se cacher.',
			'Il attire ses proies en faisant clignoter\nson corps, puis les immobilise en les enserrant\nde ses longs tentacules.',
			'Il fait clignoter ses points lumineux à différentes\nfréquences pour échanger des informations\navec ses congénères.',
			'Il fait clignoter son corps lumineux en tournoyant.\nIl communique avec ses congénères à l’aide\nde signaux de lumière.',
			'Il sape la combativité de son adversaire en faisant\nclignoter son corps lumineux, puis profite\nde cet instant de répit pour s’enfuir.',
		],
		[Language.De]: [
			'Gegner, die auf die blinkenden Punkte an seinem\nKörper blicken, werden geblendet und verlieren den\nWillen zu kämpfen.',
			'Mit den blinkenden Punkten auf seinem Körper raubt\nes Gegnern den Kampfeswillen. Es nutzt diese\nGelegenheit, um sich zu verstecken.',
			'Gegner, die auf die blinkenden Punkte an seinem Körper\nblicken, werden geblendet und verlieren den Willen zu\nkämpfen.',
			'Mit den blinkenden Punkten auf seinem Körper raubt es\nGegnern den Kampfeswillen. Es nutzt diese Gelegenheit,\num sich zu verstecken.',
			'Mit den blinkenden Punkten auf seinem Körper\nlockt es Beute an, um sie dann mit seinen langen\nTentakeln bewegungsunfähig zu machen.',
			'Wenn es mit seinen Artgenossen kommuniziert,\nlässt es die leuchtenden Punkte auf seinem\nKörper in einem komplexen Rhythmus blinken.',
			'Es dreht sich und lässt dabei Punkte auf seinem\nKörper blinken. Durch bestimmte Lichtmuster\nkann es mit seinen Artgenossen kommunizieren.',
			'Es lässt die Punkte auf seinem Körper blinken,\num Gegnern den Kampfeswillen zu rauben.\nDiesen Moment nutzt es dann, um zu fliehen.',
		],
		[Language.Es]: [
			'Los enemigos que contemplan el titilante fulgor de su\nbrillante cuerpo terminan mareándose y pierden las\nganas de continuar combatiendo.',
			'La luz intermitente que emite aplaca el ánimo de\nlucha del enemigo. Aprovecha la ocasión para\nesconderse.',
			'Los enemigos que contemplan el titilante fulgor de su brillante\ncuerpo terminan mareándose y pierden las ganas de continuar\ncombatiendo.',
			'La luz intermitente que emite aplaca el ánimo de lucha del\nenemigo. Aprovecha la ocasión para esconderse.',
			'Los destellos que emite atraen a su presa, a la\nque rodea con sus largos tentáculos e inmoviliza\npor completo.',
			'Los complejos patrones de destellos que emite\ncon sus órganos luminosos le permiten\ncomunicarse con sus congéneres.',
			'Gira sobre sí mismo emitiendo luz intermitente\ncon la que crea señales para comunicarse con\nlos suyos.',
			'Los destellos de luz intermitente que emite\naplacan el ánimo de lucha del enemigo, tras lo\nque aprovecha para esconderse.',
		],
		[Language.It]: [
			'I nemici che guardano la luce lampeggiante emessa\ndal suo corpo rimangono abbagliati e perdono il loro\nspirito combattivo.',
			'Fa lampeggiare i motivi sul suo corpo in una sequenza\nipnotica per far perdere lo spirito combattivo ai nemici,\nriuscendo così a fuggire.',
			'I nemici che guardano la luce lampeggiante emessa dal suo\ncorpo rimangono abbagliati e perdono il loro spirito\ncombattivo.',
			'Fa lampeggiare i motivi sul suo corpo in una sequenza ipnotica\nper far perdere lo spirito combattivo ai nemici, riuscendo così\na fuggire.',
			'Attira a sé la preda con luci lampeggianti\nper poi immobilizzarla avvinghiandola con\ni suoi tentacoli.',
			'Scambia informazioni con i suoi simili facendo\nlampeggiare i motivi sul suo corpo in sequenze\ncomplesse.',
			'Gira su se stesso facendo lampeggiare i motivi\nche ha sul corpo. Comunica con i suoi simili\nemettendo segnali luminosi.',
			'Fa perdere ai nemici lo spirito combattivo\ngrazie alla luce lampeggiante che emette\ndal suo corpo e ne approfitta per scappare.',
		],
		[Language.En]: [
			'Opponents who stare at the flashing of the\nlight-emitting spots on its body become\ndazed and lose their will to fight.',
			'It flashes the light-emitting spots on its body,\nwhich drains its opponent’s will to fight.\nIt takes the opportunity to scuttle away and hide.',
			'It draws prey near with its blinking lights and\nthen wraps them up in its long tentacles and\nholds them in place.',
			'When exchanging information with others of its\nkind, it flashes the light-emitting spots on its\nbody in a complex rhythm.',
			'It spins while making its luminescent spots flash.\nThese spots allow it to communicate with others\nby using different patterns of light.',
			'By exposing foes to the blinking of its\nluminescent spots, Inkay demoralizes them,\nand then it seizes the chance to flee.',
		],
		[Language.Ja]: [
			'発光体の　点滅を　見つめた　相手は\n目が　くらみ　戦う　気持ちが\nなくなってしまうのだ。',
			'光の　点滅で　襲ってきた　敵の\n戦意を　なくしてしまう。\nその　すきに　姿を　くらますのだ。',
			'光を　点滅させて　獲物を\nおびきよせると　長い　触手で\n絡めとり　動きを　封じるぞ。',
			'仲間と　情報　交換を\nするとき　身体の　発光体を\n複雑な　リズムで　光らせる。',
			'回転しながら　発光体を\n点滅。　光の　パターンで\n仲間と　コミュニケーションする。',
			'敵に　発光体の　点滅を\n浴びせて　戦意を　なくしてしまう。\nその　隙に　逃げ出すのだ。',
		],
		[Language.ZhHant]: [
			'會利用閃爍的光吸引獵物靠近，\n然後用長長的觸手纏住對手，\n封鎖獵物的行動。',
			'與夥伴交換訊息時，\n會讓身上的發光體\n以複雜的節奏發光。',
			'旋轉著閃爍自己的發光體。\n透過改變閃爍的方式\n來和其他夥伴交流。',
			'會讓敵人看到自己閃爍的\n發光體來讓對方喪失戰意，\n然後趁機逃之夭夭。',
		],
		[Language.ZhHans]: [
			'闪烁着光，让猎物受诱惑靠近后，\n会用长长的触手缠住对方，\n封住其行动。',
			'与伙伴交换信息时，\n会让身上的发光体\n以复杂的节奏发光。',
			'旋转着闪烁自己的发光体。\n通过改变闪烁的方式\n来和其他伙伴交流。',
			'会让敌人看到自己闪烁的\n发光体来让对方丧失战意，\n然后趁机逃之夭夭。',
		],
	},
	[
		[
			Variety.Inkay,
			58,
			4,
			35,
			[Type.Dark, Type.Psychic],
			{
				frontDefault: 'd7188ccd.png',
				frontShiny: '1f28953e.png',
				backDefault: '281162b4.png',
				backShiny: '069a09c0.png',
			},
			{
				[Stat.Hp]: {baseStat: 53},
				[Stat.Attack]: {baseStat: 54, effort: 1},
				[Stat.Defense]: {baseStat: 53},
				[Stat.SpecialAttack]: {baseStat: 37},
				[Stat.SpecialDefense]: {baseStat: 46},
				[Stat.Speed]: {baseStat: 45},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Peck,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Wrap,
					6,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.Acupressure,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.Thunderbolt,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.Taunt,
					Move.AerialAce,
					Move.CalmMind,
					Move.Fling,
					Move.DarkPulse,
					Move.TrickRoom,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Psybeam,
					Move.Swift,
					Move.HelpingHand,
					Move.Trick,
					Move.SkillSwap,
					Move.Gravity,
					Move.Psyshock,
					Move.Lunge,
					Move.TeraBlast,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Hypnosis,
					3,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					21,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Spite,
					Move.KnockOff,
					Move.FoulPlay,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.DestinyBond,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Endure,
					Move.BatonPass,
					Move.FutureSight,
					Move.FakeTears,
					Move.NastyPlot,
					Move.StoredPower,
					Move.Liquidation,
					Move.ExpandingForce,
					Move.LashOut,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Swagger,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Superpower,
					39,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Pluck,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Payback,
					9,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Switcheroo,
					31,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PsychoCut,
					27,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					33,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TopsyTurvy,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Peck,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Wrap,
					6,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
					Move.Acupressure,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.Thunderbolt,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Endure,
					Move.SleepTalk,
					Move.BatonPass,
					Move.RainDance,
					Move.SunnyDay,
					Move.FutureSight,
					Move.Facade,
					Move.Taunt,
					Move.FakeTears,
					Move.CalmMind,
					Move.Fling,
					Move.DarkPulse,
					Move.NastyPlot,
					Move.PsychoCut,
					Move.TrickRoom,
					Move.FoulPlay,
					Move.StoredPower,
					Move.Liquidation,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Hypnosis,
					3,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					21,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.Superpower,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Swagger,
					18,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Payback,
					Move.Round,
					Move.Retaliate,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Superpower,
					39,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Pluck,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Payback,
					9,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.GuardSwap,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Switcheroo,
					31,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PsychoCut,
					27,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					33,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TopsyTurvy,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ExpandingForce,
					Move.LashOut,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Bind,
					Move.RolePlay,
					Move.Snatch,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Peck,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.Thunderbolt,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.Taunt,
					Move.AerialAce,
					Move.CalmMind,
					Move.Payback,
					Move.Fling,
					Move.DarkPulse,
					Move.TrickRoom,
					Move.Round,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					21,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.Embargo,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Hypnosis,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Constrict,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psywave,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					43,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Spite,
					Move.Superpower,
					Move.KnockOff,
					Move.Telekinesis,
					Move.FoulPlay,
					Move.AllySwitch,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DestinyBond,
					Move.GuardSwap,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Swagger,
					12,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Flatter,
					Move.Camouflage,
					Move.PowerSplit,
					Move.SimpleBeam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Superpower,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Pluck,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Payback,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Switcheroo,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PsychoCut,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TopsyTurvy,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Peck,
					Move.Constrict,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.AerialAce,
					Move.CalmMind,
					Move.Payback,
					Move.Embargo,
					Move.Fling,
					Move.DarkPulse,
					Move.TrickRoom,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Hypnosis,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					4,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psywave,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					43,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DestinyBond,
					Move.Flatter,
					Move.Camouflage,
					Move.PowerSplit,
					Move.SimpleBeam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Swagger,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Superpower,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Pluck,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Payback,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					46,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Switcheroo,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PsychoCut,
					39,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TopsyTurvy,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Flash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Bind,
					Move.Snore,
					Move.Spite,
					Move.RolePlay,
					Move.Superpower,
					Move.KnockOff,
					Move.Snatch,
					Move.FoulPlay,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Peck,
					Move.Constrict,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.SecretPower,
					Move.AerialAce,
					Move.CalmMind,
					Move.Payback,
					Move.Embargo,
					Move.Fling,
					Move.DarkPulse,
					Move.TrickRoom,
					Move.Round,
					Move.Retaliate,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					21,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Hypnosis,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					4,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psywave,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					43,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DestinyBond,
					Move.Flatter,
					Move.Camouflage,
					Move.PowerSplit,
					Move.SimpleBeam,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Swagger,
					12,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Superpower,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Pluck,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Payback,
					27,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					46,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Switcheroo,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PsychoCut,
					39,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					8,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TopsyTurvy,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Flamethrower,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Flash,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.AerialAce,
					Move.CalmMind,
					Move.Payback,
					Move.Embargo,
					Move.Fling,
					Move.DarkPulse,
					Move.TrickRoom,
					Move.Round,
					Move.Retaliate,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Peck,
					Move.Constrict,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Hypnosis,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psywave,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					43,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DestinyBond,
					Move.Flatter,
					Move.Camouflage,
					Move.PowerSplit,
					Move.SimpleBeam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Swagger,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Superpower,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Pluck,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Payback,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Switcheroo,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PsychoCut,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TopsyTurvy,
					15,
				),
			].flat(),
			[
				{
					ability: Ability.Contrary,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.SuctionCups,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Infiltrator,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Inkay,
					PokemonFormBits.Default,
					{
						frontDefault: 'd7188ccd.png',
						frontShiny: '1f28953e.png',
						backDefault: '281162b4.png',
						backShiny: '069a09c0.png',
					},
					[Type.Dark, Type.Psychic],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Malamar,
	50,
	80,
	Color.Blue,
	[EggGroup.Water1, EggGroup.Water2],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Blob,
	{
		[Language.JaHrkt]: ['カラマネロ'],
		[Language.Roomaji]: ['Calamanero'],
		[Language.Ko]: ['칼라마네로'],
		[Language.ZhHant]: ['烏賊王'],
		[Language.Fr]: ['Sepiatroce'],
		[Language.De]: ['Calamanero'],
		[Language.Es]: ['Malamar'],
		[Language.It]: ['Malamar'],
		[Language.En]: ['Malamar'],
		[Language.Ja]: ['カラマネロ'],
		[Language.ZhHans]: ['乌贼王'],
	},
	{
		[Language.JaHrkt]: ['ぎゃくてんポケモン'],
		[Language.Ko]: ['역전포켓몬'],
		[Language.ZhHant]: ['倒轉寶可夢'],
		[Language.Fr]: ['Pokémon Révolution'],
		[Language.De]: ['Inversions-Pokémon'],
		[Language.Es]: ['Pokémon Revolución'],
		[Language.It]: ['Pokémon Giravolta'],
		[Language.En]: ['Overturning Pokémon'],
		[Language.Ja]: ['ぎゃくてんポケモン'],
		[Language.ZhHans]: ['倒转宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'ポケモンで　いちばん　きょうりょくな\nさいみんじゅつを　つかう。あいてを\nいのままに　あやつってしまうのだ。',
			'さいみんじゅつで　おびきよせて\nあたまの　しょくしゅで　からめとり\nしょうかえきを　あびせて　しとめる。',
			'きょうりょくな　さいみんじゅつを\nつかう。　それを　りようし　あくじを\nはたらくものは　あとを　たたない。',
			'どうたいの　もようを　ひからせて\nエモノを　あやつり　おびき　よせる。\nヒレさきは　ばつぐんの　きれあじ。',
			'はっこうたいの　ひかりを　みつめると\nたちまち　さいみんじょうたいになり\nカラマネロに　あやつられてしまう。',
			'れきしを　かえるほどの　だいじけんは\nカラマネロの　さいみん　のうりょくが\nかかわっていたと　いわれている。',
		],
		[Language.Ko]: [
			'포켓몬 중에서 가장 강력한\n최면술을 쓴다. 상대를\n자기 마음대로 조종해버린다.',
			'최면술로 끌어들여서\n머리의 촉수로 휘감아\n소화액을 끼얹어 꼼짝 못하게 한다.',
			'강력한 최면술을 사용한다.\n그것을 이용해 못된 짓을\n하는 자들이 끊이지 않는다.',
			'몸통에 있는 모양을 빛내서\n먹이를 조종해 끌어들인다.\n지느러미 끝은 굉장히 날카롭다.',
			'발광체의 빛을 보면\n순식간에 최면 상태가 되어\n칼라마네로에게 조종당한다.',
			'역사를 바꿀 정도의 큰 사건은\n칼라마네로의 최면 능력과\n관련이 있다고 전해진다.',
		],
		[Language.Fr]: [
			'Doté des pouvoirs hypnotiques les plus puissants\ndu règne des Pokémon, il manipule son adversaire\nà sa guise.',
			'Il attire ses ennemis en les hypnotisant, avant de les\nenserrer de ses tentacules et de les neutraliser avec\nson suc gastrique.',
			'Doté des pouvoirs hypnotiques les plus puissants du règne\ndes Pokémon, il manipule son adversaire à sa guise.',
			'Il attire ses ennemis en les hypnotisant, avant de les enserrer\nde ses tentacules et de les neutraliser avec son suc gastrique.',
			'Les personnes malintentionnées tentent\nsouvent de s’approprier ses grands pouvoirs\nhypnotiques pour servir leurs mauvais desseins.',
			'Il fait briller les motifs qui ornent son corps\nafin d’attirer ses proies. L’extrémité de ses\ntentacules est aussi coupante qu’un rasoir.',
			'Il manipule à sa guise ceux qui se sont laissé\nhypnotiser en observant son corps lumineux\ntrop longtemps.',
			'On raconte que ses pouvoirs hypnotiques\nseraient à l’origine d’évènements qui ont\nbouleversé le cours de l’Histoire.',
		],
		[Language.De]: [
			'Unter allen Pokémon verfügt es über die stärksten\nhypnotischen Kräfte, mit denen es Gegner nach\nBelieben kontrollieren kann.',
			'Mit seinen hypnotischen Kräften lockt es Gegner an,\nhält sie mit den Tentakeln an seinem Kopf fest und\nzersetzt sie dann mit Verdauungssekret.',
			'Unter allen Pokémon verfügt es über die stärksten\nhypnotischen Kräfte, mit denen es Gegner nach Belieben\nkontrollieren kann.',
			'Mit seinen hypnotischen Kräften lockt es Gegner an, hält sie\nmit den Tentakeln an seinem Kopf fest und zersetzt sie dann\nmit Verdauungssekret.',
			'Dieses Pokémon kann starke hypnotische\nKräfte einsetzen, die ständig von Halunken für\nüble Machenschaften missbraucht werden.',
			'Mithilfe der blinkenden Muster an seinem Rumpf\nhypnotisiert es seine Beute und lockt sie an. Die\nEnden seiner Flossen sind rasiermesserscharf.',
			'Blickt man in das Licht, das es mit seinem Körper\nerzeugt, wird man sofort hypnotisiert und steht\ndanach unter der Kontrolle von Calamanero.',
			'Man erzählt sich, dass die hypnotischen Kräfte\ndieses Pokémon mit einigen geschichtsträchtigen\nEreignissen in Verbindung stehen.',
		],
		[Language.Es]: [
			'Tiene a su disposición los poderes hipnóticos más\npoderosos de entre todos los Pokémon. Controla al\nenemigo a su voluntad.',
			'Hipnotiza a su objetivo para atraerlo y lo aprisiona\ncon los tentáculos de su cabeza, para asestarle el\ngolpe de gracia rociándolo con sus jugos gástricos.',
			'Tiene a su disposición los poderes hipnóticos más poderosos\nde entre todos los Pokémon. Controla al enemigo a su\nvoluntad.',
			'Hipnotiza a su objetivo para atraerlo y lo aprisiona con los\ntentáculos de su cabeza, para asestarle el golpe de gracia\nrociándolo con sus jugos gástricos.',
			'Posee grandes poderes hipnóticos de los que\ninnumerables criminales se aprovechan para\ncometer delitos.',
			'Hipnotiza a su presa con las luces que emite su\ntorso y la atrae hacia sí. Las puntas de sus\ntentáculos son extremadamente afiladas.',
			'Los destellos que emite sumen rápidamente en\nun estado hipnótico al observador, que queda\nbajo su control.',
			'Se dice que sus poderes hipnóticos han influido\nen grandes acontecimientos que han cambiado\nel curso de la historia.',
		],
		[Language.It]: [
			'È il Pokémon con il potere ipnotico più forte in\nassoluto. Può controllare a piacimento i suoi nemici.',
			'Attira le prede con l’ipnosi, le cattura con i tentacoli\ne le finisce spruzzando loro addosso i suoi succhi\ngastrici.',
			'È il Pokémon con il potere ipnotico più forte in assoluto.\nPuò controllare a piacimento i suoi nemici.',
			'Attira le prede con l’ipnosi, le cattura con i tentacoli e le\nfinisce spruzzando loro addosso i suoi succhi gastrici.',
			'Possiede incredibili poteri ipnotici che tanti\nmalintenzionati cercano di sfruttare a proprio\nvantaggio.',
			'Fa lampeggiare i motivi sul suo corpo per\nattirare a sé la preda. Le estremità dei suoi\ntentacoli sono affilatissime.',
			'Chi osserva troppo a lungo la luce dei motivi sul\nsuo corpo viene ipnotizzato e cade sotto il suo\ncontrollo.',
			'Si dice che il potere ipnotico di questo Pokémon\nabbia giocato un ruolo nei grandi avvenimenti\nche hanno cambiato il corso della storia.',
		],
		[Language.En]: [
			'It wields the most compelling hypnotic powers\nof any Pokémon, and it forces others to do\nwhatever it wants.',
			'It lures its prey close with hypnotic motions,\nthen wraps its tentacles around it before\nfinishing it off with digestive fluids.',
			'When it comes to strong hypnosis, there’s an\nendless number of people who utilize Malamar\nfor their nefarious deeds.',
			'It flashes the pattern on its torso to control its\nprey and draw them in. The edges of its fins are\nsupremely sharp.',
			'Gazing at its luminescent spots will quickly\ninduce a hypnotic state, putting the observer\nunder Malamar’s control.',
			'It’s said that Malamar’s hypnotic powers played\na role in certain history-changing events.',
		],
		[Language.Ja]: [
			'ポケモンで　一番　強力な\n催眠術を　使う。相手を　意のままに\n操ってしまうのだ。',
			'催眠術で　おびき寄せて\n頭の　触手で　絡め取り\n消化液を　浴びせて　しとめる。',
			'強力な　さいみんじゅつを\n使う。　それを　利用し　悪事を\n働く者は　後を　絶たない。',
			'胴体の　模様を　光らせて\nエモノを　操り　おびき　よせる。\nヒレ先は　抜群の　切れ味。',
			'発光体の　光を　見つめると\nたちまち　催眠状態になり\nカラマネロに　操られてしまう。',
			'歴史を　変えるほどの　大事件は\nカラマネロの　催眠能力が\nかかわっていたと　いわれている。',
		],
		[Language.ZhHant]: [
			'會使用強力的催眠術。\n利用這點來做壞事的人\n從來就沒有少過。',
			'會讓身體上的花紋發光，\n操縱獵物靠近自己。\n鰭的前端非常鋒利。',
			'要是盯著牠的發光體看，\n就會馬上陷入催眠狀態，\n並且受到牠的控制。',
			'據說那些能夠改變歷史\n的重大事件其實都和\n烏賊王的催眠能力有關。',
		],
		[Language.ZhHans]: [
			'会使用强力的催眠术。\n用此来做坏事者源源不断。',
			'让身体上的花纹发光，\n操纵猎物，引诱其靠近。\n鳍的前端非常锋利。',
			'要是盯着乌贼王的发光体看，\n就会马上陷入催眠状态，\n并且受到它的控制。',
			'据说那些能够改变历史\n的重大事件其实都和\n乌贼王的催眠能力有关。',
		],
	},
	[
		[
			Variety.Malamar,
			169,
			15,
			470,
			[Type.Dark, Type.Psychic],
			{
				frontDefault: '67c08171.png',
				frontShiny: '20c1b067.png',
			},
			{
				[Stat.Hp]: {baseStat: 86},
				[Stat.Attack]: {baseStat: 92, effort: 2},
				[Stat.Defense]: {baseStat: 88},
				[Stat.SpecialAttack]: {baseStat: 68},
				[Stat.SpecialDefense]: {baseStat: 75},
				[Stat.Speed]: {baseStat: 73},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Peck,
					Move.Reversal,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Wrap,
					Move.Hypnosis,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
					Move.Acupressure,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.Taunt,
					Move.AerialAce,
					Move.CalmMind,
					Move.Fling,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.Psyshock,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Psybeam,
					Move.Swift,
					Move.HelpingHand,
					Move.Trick,
					Move.SkillSwap,
					Move.Gravity,
					Move.Lunge,
					Move.TeraBlast,
					Move.Trailblaze,
					Move.PsychicNoise,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					21,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Reversal,
					Move.ScaryFace,
					Move.Endure,
					Move.BatonPass,
					Move.FutureSight,
					Move.FakeTears,
					Move.NastyPlot,
					Move.StoredPower,
					Move.Liquidation,
					Move.ExpandingForce,
					Move.LashOut,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Spite,
					Move.KnockOff,
					Move.FoulPlay,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Swagger,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Superpower,
					47,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Pluck,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Payback,
					9,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Switcheroo,
					33,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PsychoCut,
					27,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					37,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TopsyTurvy,
					42,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.ThroatChop,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Wrap,
					Move.Peck,
					Move.Hypnosis,
					Move.Reversal,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Reversal,
					Move.Protect,
					Move.ScaryFace,
					Move.Endure,
					Move.SleepTalk,
					Move.BatonPass,
					Move.RainDance,
					Move.SunnyDay,
					Move.FutureSight,
					Move.Facade,
					Move.Taunt,
					Move.FakeTears,
					Move.CalmMind,
					Move.Fling,
					Move.GuardSwap,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.NastyPlot,
					Move.PsychoCut,
					Move.TrickRoom,
					Move.Psyshock,
					Move.FoulPlay,
					Move.StoredPower,
					Move.ThroatChop,
					Move.Liquidation,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					21,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.Superpower,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Swagger,
					18,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Payback,
					Move.Round,
					Move.Retaliate,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Superpower,
					47,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Pluck,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Payback,
					9,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Switcheroo,
					33,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PsychoCut,
					27,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					37,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TopsyTurvy,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ExpandingForce,
					Move.LashOut,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Bind,
					Move.RolePlay,
					Move.Snatch,
					Move.SignalBeam,
					Move.Block,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Peck,
					Move.Reversal,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.Taunt,
					Move.AerialAce,
					Move.CalmMind,
					Move.Payback,
					Move.Fling,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.Psyshock,
					Move.Round,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					21,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.Embargo,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Hypnosis,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Constrict,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psywave,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					43,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Spite,
					Move.Superpower,
					Move.KnockOff,
					Move.Telekinesis,
					Move.FoulPlay,
					Move.AllySwitch,
					Move.ThroatChop,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Swagger,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Superpower,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Pluck,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Payback,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Switcheroo,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PsychoCut,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TopsyTurvy,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Peck,
					Move.Reflect,
					Move.Constrict,
					Move.Reversal,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.AerialAce,
					Move.CalmMind,
					Move.Payback,
					Move.Embargo,
					Move.Fling,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.Psyshock,
					Move.Round,
					Move.Confide,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Hypnosis,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					4,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psywave,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Swagger,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Superpower,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Pluck,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Payback,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					46,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Switcheroo,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PsychoCut,
					39,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TopsyTurvy,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Flash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Bind,
					Move.Snore,
					Move.Spite,
					Move.RolePlay,
					Move.Superpower,
					Move.KnockOff,
					Move.Snatch,
					Move.SignalBeam,
					Move.Block,
					Move.FoulPlay,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Peck,
					Move.Constrict,
					Move.Reversal,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.SecretPower,
					Move.AerialAce,
					Move.CalmMind,
					Move.Payback,
					Move.Embargo,
					Move.Fling,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.Psyshock,
					Move.Round,
					Move.Retaliate,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					21,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Hypnosis,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					4,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psywave,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					43,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Swagger,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Superpower,
					1,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Superpower,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Pluck,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Payback,
					27,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					46,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Switcheroo,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PsychoCut,
					39,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					8,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TopsyTurvy,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Flash,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.AerialAce,
					Move.CalmMind,
					Move.Payback,
					Move.Embargo,
					Move.Fling,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.Psyshock,
					Move.Round,
					Move.Retaliate,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Peck,
					Move.Constrict,
					Move.Reversal,
					Move.Superpower,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Hypnosis,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psywave,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Swagger,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Superpower,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Pluck,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Payback,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Switcheroo,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PsychoCut,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TopsyTurvy,
					15,
				),
			].flat(),
			[
				{
					ability: Ability.Contrary,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.SuctionCups,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Infiltrator,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Malamar,
					PokemonFormBits.Default,
					{
						frontDefault: '67c08171.png',
						frontShiny: '20c1b067.png',
					},
					[Type.Dark, Type.Psychic],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Binacle,
	50,
	120,
	Color.Brown,
	[EggGroup.Water3],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Heads,
	{
		[Language.JaHrkt]: ['カメテテ'],
		[Language.Roomaji]: ['Kametete'],
		[Language.Ko]: ['거북손손'],
		[Language.ZhHant]: ['龜腳腳'],
		[Language.Fr]: ['Opermine'],
		[Language.De]: ['Bithora'],
		[Language.Es]: ['Binacle'],
		[Language.It]: ['Binacle'],
		[Language.En]: ['Binacle'],
		[Language.Ja]: ['カメテテ'],
		[Language.ZhHans]: ['龟脚脚'],
	},
	{
		[Language.JaHrkt]: ['ふたてポケモン'],
		[Language.Ko]: ['두손포켓몬'],
		[Language.ZhHant]: ['雙手寶可夢'],
		[Language.Fr]: ['Pokémon Bimane'],
		[Language.De]: ['Krallenduo-Pokémon'],
		[Language.Es]: ['Pokémon Dos Manos'],
		[Language.It]: ['Pokémon Bimano'],
		[Language.En]: ['Two-Handed Pokémon'],
		[Language.Ja]: ['ふたてポケモン'],
		[Language.ZhHans]: ['双手宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'２ひきの　カメテテが　ひとつの\nいわで　くらす。ケンカすると\nどちらかが　ほかの　いわに　うつる。',
			'からだを　のばす　はんどうで　いわを\nもちあげて　あるく。なみうちぎわで\nながされてきた　かいそうを　たべる。',
			'２ひきが　うみべの　てごろな　いわに\nくっついて　くらす。　まんちょうじ\nきょうりょくして　えさを　あつめる。',
			'２ひきの　いきが　あわないと\nこうげき　ぼうぎょ　どちらも\nおろそかになり　いきのこれない。',
		],
		[Language.Ko]: [
			'2마리의 거북손손이 하나의\n바위에서 산다. 서로 싸우면\n한쪽이 다른 바위로 옮겨 간다.',
			'몸을 늘린 반동으로 바위를\n들어 올리며 걷는다. 물가로\n흘러들어온 해조를 먹는다.',
			'2마리가 해변가의 적당한 바위에\n달라붙어서 지낸다. 만조가 되면\n협력해서 먹이를 모은다.',
			'2마리의 호흡이 맞지 않으면\n공격과 방어 어느 쪽도\n변변치 않게 되어 살아남지 못한다.',
		],
		[Language.Fr]: [
			'Chaque rocher abrite deux Opermine.\nS’ils se disputent, l’un d’entre eux part à la recherche\nd’un nouveau logis.',
			'Ils prennent de l’élan avec tout leur corps et\nsoulèvent ainsi leur pierre pour se déplacer.\nIls mangent les algues échouées sur le rivage.',
			'Chaque rocher abrite deux Opermine. S’ils se disputent,\nl’un d’entre eux part à la recherche d’un nouveau logis.',
			'Ils prennent de l’élan avec tout leur corps et soulèvent ainsi\nleur pierre pour se déplacer. Ils mangent les algues échouées\nsur le rivage.',
			'Ils vivent par groupes de deux sur un rocher\nqui leur convient en bord de mer. À marée haute,\nle duo coopère pour capturer des proies.',
			'Il faut que les deux bras travaillent bien ensemble\ns’ils souhaitent survivre, sinon leur défense\net leur attaque en souffrent grandement.',
		],
		[Language.De]: [
			'Bithora bewohnen jeweils zu zweit einen Felsen.\nEntzweien sie sich im Streit, sucht sich eines\nder beiden einen neuen Felsen als Unterkunft.',
			'Sie bewegen sich fort, indem sie durch Strecken beider\nExtremitäten ihren Felsen anheben. Sie ernähren\nsich von Seetang, der an die Küste gespült wurde.',
			'Bithora bewohnen jeweils zu zweit einen Felsen. Entzweien sie\nsich im Streit, sucht sich eines der beiden einen neuen Felsen\nals Unterkunft.',
			'Sie bewegen sich fort, indem sie durch Strecken beider\nExtremitäten ihren Felsen anheben. Sie ernähren sich\nvon Seetang, der an die Küste gespült wurde.',
			'Zwei Exemplare hängen sich an einen passenden\nFelsen in Küstennähe, um dort zu leben. Bei Flut\nsammeln sie gemeinsam Nahrung.',
			'Wenn die beiden Exemplare sich nicht gut\nverstehen, werden sie in Angriff und Verteidigung\nnachlässig und ihre Überlebenschancen sinken.',
		],
		[Language.Es]: [
			'Dos Binacle conviven en la misma roca, pero cuando\nse produce un altercado entre ambos, uno de ellos se\nmuda a otra.',
			'El impulso que cogen al erguirse les permite levantar\nsu roca y caminar. Se alimentan de las algas que la\nmarea arrastra hasta la orilla.',
			'Dos Binacle conviven en la misma roca, pero cuando se\nproduce un altercado entre ambos, uno de ellos se muda\na otra.',
			'El impulso que cogen al erguirse les permite levantar su roca\ny caminar. Se alimentan de las algas que la marea arrastra\nhasta la orilla.',
			'Dos Binacle conviven adheridos a una misma\nroca a orillas del mar y colaboran para atrapar\na sus presas cuando sube la marea.',
			'Si no se llevan bien, no consiguen ni atacar ni\ndefenderse de forma eficaz y sus probabilidades\nde supervivencia se reducen.',
		],
		[Language.It]: [
			'I Binacle vivono su una roccia. Quando litigano, uno\ndei due finisce per spostarsi su una pietra diversa.',
			'Si muovono allungando il corpo a turno, in modo da\nsollevare la pietra. Si nutrono di alghe portate a riva\ndalle onde.',
			'I Binacle vivono su una roccia. Quando litigano, uno dei due\nfinisce per spostarsi su una pietra diversa.',
			'Si muovono allungando il corpo a turno, in modo da sollevare\nla pietra. Si nutrono di alghe portate a riva dalle onde.',
			'Vivono in riva al mare attaccati a due a due su\nrocce adatte. Quando sale la marea, i membri\ndi ciascun duo collaborano per raccogliere cibo.',
			'Se non vanno d’accordo non riescono né ad\nattaccare né a difendersi efficacemente e la\nloro probabilità di sopravvivenza si riduce.',
		],
		[Language.En]: [
			'Two Binacle live together on one rock.\nWhen they fight, one of them will move\nto a different rock.',
			'They stretch and then contract, yanking their\nrocks along with them in bold hops. They eat\nseaweed that washes up on the shoreline.',
			'After two Binacle find a suitably sized rock, they\nadhere themselves to it and live together.\nThey cooperate to gather food during high tide.',
			'If the two don’t work well together, both their\noffense and defense fall apart. Without good\nteamwork, they won’t survive.',
		],
		[Language.Ja]: [
			'２匹の　カメテテが　ひとつの　岩で\n暮らす。ケンカすると　どちらかが\n他の　岩に　移る。',
			'体を　伸ばす　反動で　岩を\n持ち上げて　歩く。波打ち際で\n流されてきた　海藻を　食べる。',
			'２匹が　海辺の　手ごろな　岩に\nくっついて　暮らす。　満潮時\n協力して　エサを　集める。',
			'２匹の　息が　合わないと\n攻撃　防御　どちらも\nおろそかになり　生き残れない。',
		],
		[Language.ZhHant]: [
			'２隻龜腳腳會在海邊找一塊大小\n合適的岩石，附在上面一起生活。\n漲潮的時候會互相合作尋找食物。',
			'如果２隻龜腳腳配合得不好，\n不但無法有效地攻擊和防禦，\n甚至沒辦法生存下去。',
		],
		[Language.ZhHans]: [
			'２只龟脚脚会在海边找一块大小\n合适的岩石，附在上面一起生活。\n涨潮的时候会互相合作寻找食物。',
			'如果２只龟脚脚配合得不好，\n不但无法有效地攻击和防御，\n甚至没办法生存下去。',
		],
	},
	[
		[
			Variety.Binacle,
			61,
			5,
			310,
			[Type.Rock, Type.Water],
			{
				frontDefault: 'a5430391.png',
				frontShiny: '5bde281a.png',
				backDefault: '91073b76.png',
				backShiny: '8f02c03d.png',
			},
			{
				[Stat.Hp]: {baseStat: 42},
				[Stat.Attack]: {baseStat: 52, effort: 1},
				[Stat.Defense]: {baseStat: 67},
				[Stat.SpecialAttack]: {baseStat: 39},
				[Stat.SpecialDefense]: {baseStat: 56},
				[Stat.Speed]: {baseStat: 50},
			},
			{},
			[
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Scratch,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Earthquake,
					Move.Dig,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.HelpingHand,
					Move.BrickBreak,
					Move.RockTomb,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.XScissor,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.SandAttack,
					Move.NightSlash,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Screech,
					Move.Endure,
					Move.BeatUp,
					Move.Uproar,
					Move.MudShot,
					Move.RockBlast,
					Move.Assurance,
					Move.RazorShell,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Withdraw,
					4,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FurySwipes,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					28,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IcyWind,
					Move.IronDefense,
					Move.StealthRock,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.CrossChop,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.RockPolish,
					24,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_Egg,
					Move.Switcheroo,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HoneClaws,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShellSmash,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.RazorShell,
					36,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.Liquidation,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Scratch,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.XScissor,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SandAttack,
					Move.ShellSmash,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					4,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.NaturePower,
					Move.AerialAce,
					Move.Embargo,
					Move.RockPolish,
					Move.SmackDown,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Withdraw,
					7,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Clamp,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FurySwipes,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					13,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.HelpingHand,
					Move.IronDefense,
					Move.StealthRock,
					Move.Liquidation,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					37,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.CrossChop,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					28,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.HelpingHand,
					Move.Switcheroo,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Endeavor,
					Move.WaterPulse,
					Move.DualChop,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Tickle,
					Move.WaterSport,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RockPolish,
					24,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					41,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HoneClaws,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorShell,
					45,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.SandAttack,
					Move.ShellSmash,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.Torment,
					Move.Facade,
					Move.NaturePower,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.Payback,
					Move.Embargo,
					Move.Fling,
					Move.RockPolish,
					Move.PoisonJab,
					Move.XScissor,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Bulldoze,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					4,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Withdraw,
					7,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Clamp,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FurySwipes,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					37,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.CrossChop,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					28,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.HelpingHand,
					Move.Tickle,
					Move.WaterSport,
					Move.Switcheroo,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RockPolish,
					24,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					41,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HoneClaws,
					32,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorShell,
					45,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.SandAttack,
					Move.ShellSmash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.Torment,
					Move.Facade,
					Move.NaturePower,
					Move.Taunt,
					Move.BrickBreak,
					Move.SecretPower,
					Move.RockTomb,
					Move.AerialAce,
					Move.Payback,
					Move.Embargo,
					Move.Fling,
					Move.RockPolish,
					Move.PoisonJab,
					Move.XScissor,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Bulldoze,
					Move.Confide,
					Move.Infestation,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.RockSmash,
					Move.HoneClaws,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					4,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Withdraw,
					7,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Clamp,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FurySwipes,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					13,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.HelpingHand,
					Move.Endeavor,
					Move.IronDefense,
					Move.WaterPulse,
					Move.StealthRock,
					Move.DualChop,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					37,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.CrossChop,
					49,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					28,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.HelpingHand,
					Move.Tickle,
					Move.WaterSport,
					Move.Switcheroo,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RockPolish,
					24,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					41,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HoneClaws,
					32,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorShell,
					45,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.SandAttack,
					Move.ShellSmash,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Cut,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Strength,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.RockSmash,
					Move.Torment,
					Move.Facade,
					Move.NaturePower,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.Payback,
					Move.Embargo,
					Move.Fling,
					Move.RockPolish,
					Move.PoisonJab,
					Move.XScissor,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.HoneClaws,
					Move.SmackDown,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Bulldoze,
					Move.Confide,
					Move.Infestation,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Withdraw,
					7,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Clamp,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FurySwipes,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					37,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.CrossChop,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					28,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.HelpingHand,
					Move.Tickle,
					Move.WaterSport,
					Move.Switcheroo,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RockPolish,
					24,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HoneClaws,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorShell,
					45,
				),
			].flat(),
			[
				{
					ability: Ability.ToughClaws,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Sniper,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Pickpocket,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Binacle,
					PokemonFormBits.Default,
					{
						frontDefault: 'a5430391.png',
						frontShiny: '5bde281a.png',
						backDefault: '91073b76.png',
						backShiny: '8f02c03d.png',
					},
					[Type.Rock, Type.Water],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Barbaracle,
	50,
	45,
	Color.Brown,
	[EggGroup.Water3],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Heads,
	{
		[Language.JaHrkt]: ['ガメノデス'],
		[Language.Roomaji]: ['Gamenodes'],
		[Language.Ko]: ['거북손데스'],
		[Language.ZhHant]: ['龜足巨鎧'],
		[Language.Fr]: ['Golgopathe'],
		[Language.De]: ['Thanathora'],
		[Language.Es]: ['Barbaracle'],
		[Language.It]: ['Barbaracle'],
		[Language.En]: ['Barbaracle'],
		[Language.Ja]: ['ガメノデス'],
		[Language.ZhHans]: ['龟足巨铠'],
	},
	{
		[Language.JaHrkt]: ['しゅうごうポケモン'],
		[Language.Ko]: ['집합포켓몬'],
		[Language.ZhHant]: ['集合寶可夢'],
		[Language.Fr]: ['Pokémon Assemblage'],
		[Language.De]: ['Ballungs-Pokémon'],
		[Language.Es]: ['Pokémon Combinación'],
		[Language.It]: ['Pokémon Aggregato'],
		[Language.En]: ['Collective Pokémon'],
		[Language.Ja]: ['しゅうごうポケモン'],
		[Language.ZhHans]: ['集合宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'しんかのとき　２ひきの　カメテテが\n７ひきに　ぶんれつした　ポケモン。\n７ひきぶんの　パワーで　たたかう。',
			'てあしにも　のうが　あり　かってに\nうごけるが　ふだんは　あたまの\nガメノデスの　めいれいに　したがう。',
			'７ひきの　カメテテが　１ぴきぶんの\nからだを　つくっている。　あたまが\nてあしに　めいれいする　しくみ。',
			'てのひらの　めだまが　ぜんごさゆうを\nみはる。　ピンチのときは　てあしが\nかってに　うごいて　てきを　たおす。',
		],
		[Language.Ko]: [
			'진화할 때 2마리의 거북손손이\n7마리로 분열된 포켓몬이다.\n7마리분의 파워로 싸운다.',
			'손과 발에도 뇌가 있어 멋대로\n움직일 수 있지만 보통은 머리인\n거북손데스의 명령에 따른다.',
			'7마리의 거북손손이 1마리의\n몸을 이루고 있다. 머리가\n손발에 명령하는 구조다.',
			'손바닥의 눈동자가 전후좌우를\n감시한다. 위기에 처하면 손발이\n멋대로 움직여 적을 쓰러뜨린다.',
		],
		[Language.Fr]: [
			'Après évolution, les deux Opermine laissent place\nà sept créatures qui ont la puissance cumulée de\nsept Opermine.',
			'Ses jambes et ses bras sont dotés d’une volonté\npropre. Cependant, ils suivent généralement\nles ordres donnés.',
			'Après évolution, les deux Opermine laissent place à sept\ncréatures qui ont la puissance cumulée de sept Opermine.',
			'Ses jambes et ses bras sont dotés d’une volonté propre.\nCependant, ils suivent généralement les ordres donnés.',
			'Sept Opermine s’assemblent pour former\nun Golgopathe. La tête commande les autres\nmembres.',
			'Il scrute les environs avec les yeux de ses paumes.\nEn cas d’urgence, ses membres peuvent prendre\ndes initiatives pour triompher de l’ennemi.',
		],
		[Language.De]: [
			'Es entsteht bei der entwicklungsbedingten Aufspaltung\nder beiden Bithora in sieben Vertreter ihrer Art.\nGemeinsam verfügen sie über die siebenfache Stärke.',
			'Arme und Beine verfügen über eigene Gehirne, was\nihnen relative Bewegungsfreiheit gewährt. Sie ordnen\nsich jedoch zumeist den Befehlen des Kopfes unter.',
			'Es entsteht bei der entwicklungsbedingten Aufspaltung der\nbeiden Bithora in sieben Vertreter ihrer Art. Gemeinsam\nverfügen sie über die siebenfache Stärke.',
			'Arme und Beine verfügen über eigene Gehirne, was ihnen\nrelative Bewegungsfreiheit gewährt. Sie ordnen sich jedoch\nzumeist den Befehlen des Kopfes unter.',
			'Sein Körper besteht aus sieben verschiedenen\nBithora, wobei der Kopf das Sagen über die\nanderen Gliedmaßen hat.',
			'Die Augen auf den Händen überwachen sein\ngesamtes Umfeld. In Notsituationen greifen\nArme und Beine eigenständig an.',
		],
		[Language.Es]: [
			'Al evolucionar, los dos Binacle se dividen y dan lugar\na siete criaturas que se aglomeran formando un\nBarbaracle y suman su poder al combatir.',
			'Si bien todas las extremidades de Barbaracle tienen\ncerebro propio y se mueven a su antojo, suelen\nseguir las órdenes que imparte la cabeza.',
			'Al evolucionar, los dos Binacle se dividen y dan lugar a siete\ncriaturas que se aglomeran formando un Barbaracle y suman\nsu poder al combatir.',
			'Si bien todas las extremidades de Barbaracle tienen cerebro\npropio y se mueven a su antojo, suelen seguir las órdenes\nque imparte la cabeza.',
			'Su cuerpo está formado por siete Binacle. El\nsituado en la posición central a modo de cabeza\nsuele impartir las órdenes a las extremidades.',
			'Los ojos de las manos le permiten ver en todas\ndirecciones. En caso de apuro, sus extremidades\nse mueven solas para derribar al enemigo.',
		],
		[Language.It]: [
			'Con l’evoluzione, i due Binacle si moltiplicano e il\nPokémon lotta con la forza di sette Binacle.',
			'I Binacle delle gambe e delle braccia hanno cervelli\nindipendenti, ma generalmente seguono le direttive\ndi quello della testa.',
			'Con l’evoluzione, i due Binacle si moltiplicano e il Pokémon\nlotta con la forza di sette Binacle.',
			'Il suo corpo è formato da sette Binacle.\nQuello che occupa la posizione della testa\ncoordina gli altri.',
			'Gli occhi sulle sue mani hanno una visuale a 360\ngradi. Quando è in difficoltà, i suoi arti agiscono\nautonomamente per sconfiggere il nemico.',
		],
		[Language.En]: [
			'When they evolve, two Binacle multiply into seven.\nThey fight with the power of seven Binacle.',
			'Barbaracle’s legs and hands have minds\nof their own, and they will move independently.\nBut they usually follow the head’s orders.',
			'Seven Binacle come together to form one\nBarbaracle. The Binacle that serves as the head\ngives orders to those serving as the limbs.',
			'Having an eye on each palm allows it to keep\nwatch in all directions. In a pinch, its limbs start\nto act on their own to ensure the enemy’s defeat.',
		],
		[Language.Ja]: [
			'進化のとき　２匹の　カメテテが\n７匹に　分裂した　ポケモン。\n７匹分の　パワーで　戦う。',
			'手足にも　脳が　あり\n勝手に　動けるが　普段は\n頭の　ガメノデスの　命令に　従う。',
			'７匹の　カメテテが　１匹分の\n体を　つくっている。　頭が\n手足に　命令する　仕組み。',
			'手のひらの　目玉が　前後左右を\n見張る。　ピンチのときは　手足が\n勝手に　動いて　敵を　倒す。',
		],
		[Language.ZhHant]: [
			'７隻龜腳腳組成了１隻\n龜足巨鎧的身體。\n由頭部對手腳發號施令。',
			'用手掌上的眼珠來觀察\n前後左右的狀況。遇上危機時\n手腳會自己動起來打倒對手。',
		],
		[Language.ZhHans]: [
			'７只龟脚脚组成了１只\n龟足巨铠的身体。\n由头部对手脚发号施令。',
			'用手掌上的眼珠来观察\n前后左右的状况。遇上危机时\n手脚会自己动起来打倒对手。',
		],
	},
	[
		[
			Variety.Barbaracle,
			175,
			13,
			960,
			[Type.Rock, Type.Water],
			{
				frontDefault: '49deab49.png',
				frontShiny: '476bfd1d.png',
			},
			{
				[Stat.Hp]: {baseStat: 72},
				[Stat.Attack]: {baseStat: 105, effort: 2},
				[Stat.Defense]: {baseStat: 115},
				[Stat.SpecialAttack]: {baseStat: 54},
				[Stat.SpecialDefense]: {baseStat: 86},
				[Stat.Speed]: {baseStat: 68},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.SkullBash,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.DragonClaw,
					Move.BulkUp,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Bulldoze,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.LowKick,
					Move.Snore,
					Move.IcyWind,
					Move.HelpingHand,
					Move.Superpower,
					Move.IronDefense,
					Move.EarthPower,
					Move.StealthRock,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Screech,
					Move.Endure,
					Move.Whirlpool,
					Move.BeatUp,
					Move.Uproar,
					Move.Dive,
					Move.MuddyWater,
					Move.MudShot,
					Move.RockBlast,
					Move.Assurance,
					Move.RazorShell,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Withdraw,
					Move.MudSlap,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FurySwipes,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.CrossChop,
					48,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.RockPolish,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					54,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HoneClaws,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShellSmash,
					42,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.RazorShell,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.Liquidation,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.MeteorBeam,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.WaterGun,
					Move.SkullBash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.FalseSwipe,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.DragonClaw,
					Move.BulkUp,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Bulldoze,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.SandAttack,
					Move.StoneEdge,
					Move.ShellSmash,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					4,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.LowKick,
					Move.Snore,
					Move.IcyWind,
					Move.HelpingHand,
					Move.Superpower,
					Move.IronDefense,
					Move.EarthPower,
					Move.StealthRock,
					Move.LaserFocus,
					Move.Liquidation,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.NaturePower,
					Move.AerialAce,
					Move.Embargo,
					Move.RockPolish,
					Move.SmackDown,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Withdraw,
					7,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Clamp,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SkullBash,
					65,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FurySwipes,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					37,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.CrossChop,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					28,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Endeavor,
					Move.WaterPulse,
					Move.DualChop,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RockPolish,
					24,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					60,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HoneClaws,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorShell,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.SandAttack,
					Move.WaterGun,
					Move.SkullBash,
					Move.StoneEdge,
					Move.ShellSmash,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.Torment,
					Move.Facade,
					Move.NaturePower,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.BulkUp,
					Move.Payback,
					Move.Embargo,
					Move.Fling,
					Move.RockPolish,
					Move.PoisonJab,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Bulldoze,
					Move.Confide,
					Move.Infestation,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					4,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Withdraw,
					7,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Clamp,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SkullBash,
					65,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FurySwipes,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					37,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.CrossChop,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RockPolish,
					24,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					60,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HoneClaws,
					32,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorShell,
					48,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.SandAttack,
					Move.SkullBash,
					Move.StoneEdge,
					Move.ShellSmash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.Torment,
					Move.Facade,
					Move.NaturePower,
					Move.Taunt,
					Move.BrickBreak,
					Move.SecretPower,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.BulkUp,
					Move.Payback,
					Move.Embargo,
					Move.Fling,
					Move.RockPolish,
					Move.PoisonJab,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SmackDown,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Bulldoze,
					Move.Confide,
					Move.Infestation,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.RockSmash,
					Move.HoneClaws,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					4,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.LowKick,
					Move.Snore,
					Move.IcyWind,
					Move.HelpingHand,
					Move.Superpower,
					Move.Endeavor,
					Move.IronDefense,
					Move.WaterPulse,
					Move.EarthPower,
					Move.StealthRock,
					Move.DualChop,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Withdraw,
					7,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Clamp,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SkullBash,
					65,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FurySwipes,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					37,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.CrossChop,
					55,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RockPolish,
					24,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					44,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					60,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HoneClaws,
					32,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorShell,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Scratch,
					Move.SandAttack,
					Move.SkullBash,
					Move.StoneEdge,
					Move.ShellSmash,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Cut,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Strength,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.FalseSwipe,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.RockSmash,
					Move.Torment,
					Move.Facade,
					Move.NaturePower,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.BulkUp,
					Move.Payback,
					Move.Embargo,
					Move.Fling,
					Move.RockPolish,
					Move.PoisonJab,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.HoneClaws,
					Move.SmackDown,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Bulldoze,
					Move.Confide,
					Move.Infestation,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Withdraw,
					7,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Clamp,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SkullBash,
					65,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FurySwipes,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Slash,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FuryCutter,
					37,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.CrossChop,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RockPolish,
					24,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					60,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HoneClaws,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorShell,
					48,
				),
			].flat(),
			[
				{
					ability: Ability.ToughClaws,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Sniper,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Pickpocket,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Barbaracle,
					PokemonFormBits.Default,
					{
						frontDefault: '49deab49.png',
						frontShiny: '476bfd1d.png',
					},
					[Type.Rock, Type.Water],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Skrelp,
	50,
	225,
	Color.Brown,
	[EggGroup.Water1, EggGroup.Dragon],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Blob,
	{
		[Language.JaHrkt]: ['クズモー'],
		[Language.Roomaji]: ['Kuzumo'],
		[Language.Ko]: ['수레기'],
		[Language.ZhHant]: ['垃垃藻'],
		[Language.Fr]: ['Venalgue'],
		[Language.De]: ['Algitt'],
		[Language.Es]: ['Skrelp'],
		[Language.It]: ['Skrelp'],
		[Language.En]: ['Skrelp'],
		[Language.Ja]: ['クズモー'],
		[Language.ZhHans]: ['垃垃藻'],
	},
	{
		[Language.JaHrkt]: ['クサモドキポケモン'],
		[Language.Ko]: ['풀모방포켓몬'],
		[Language.ZhHant]: ['似草寶可夢'],
		[Language.Fr]: ['Pokémon Simulalgue'],
		[Language.De]: ['Tangmimikry-Pokémon'],
		[Language.Es]: ['Pokémon Pseudoalga'],
		[Language.It]: ['Pokémon Similalga'],
		[Language.En]: ['Mock Kelp Pokémon'],
		[Language.Ja]: ['クサモドキポケモン'],
		[Language.ZhHans]: ['似草宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'くさった　かいそうに　ぎたいする。\nきづかずに　ちかよってきた　えものに\nどくえきを　あびせて　しとめる。',
			'くさった　かいそうに　そっくり。\nてきの　めを　ごまかしながら\nしんかする　ちからを　たくわえる。',
			'もくずに　まぎれ　おおきなポケモンに\nおそわれないよう　じっと　している。\nくさった　かいそうが　おもな　エサ。',
			'およぐのが　ヘタなので　もくずに\nまきついている。　アローラちほうでは\nダダリンの　そばで　よく　みつかる。',
			'もくずに　まぎれて　うみを　ただよい\nかいそうを　たべにきた　ポケモンを\nしとめて　ごちそうに　するのだ。',
			'くさった　かいそうに　にているので\nうみを　ただよう　もくずの　なかに\nかくれて　てきのめを　ごまかす。',
		],
		[Language.Ko]: [
			'썩은 해조로 위장한다.\n눈치채지 못하고 가까이 다가온\n사냥감에 독액을 끼얹어 잡는다.',
			'썩은 해조와 똑같이 생겼다.\n적의 눈을 속이며\n진화할 힘을 비축한다.',
			'수초 찌꺼기로 뒤범벅을 하고 큰 포켓몬에게\n공격당하지 않도록 가만히 있다.\n썩은 해초가 주요 먹이다.',
			'헤엄을 잘 못 치기 때문에 해초를\n휘감고 있다. 알로라지방에서는\n타타륜 주변에서 자주 발견된다.',
			'수초 찌꺼기 틈에서 바다를 떠다니다가\n해초를 먹으러 온 포켓몬을\n꼼짝 못 하게 한 후 잡아먹는다.',
			'썩은 해초를 닮아서\n바다를 떠도는 해초 더미 안에\n숨어 적의 눈을 속인다.',
		],
		[Language.Fr]: [
			'Il se cache parmi les algues en décomposition pour\nmieux approcher ses proies, qu’il achève en les\naspergeant de poison.',
			'Sa ressemblance avec le varech pourri est\nconfondante. Il se soustrait à l’attention de\nses ennemis en attendant de pouvoir évoluer.',
			'Il se cache parmi les algues en décomposition pour mieux\napprocher ses proies, qu’il achève en les aspergeant\nde poison.',
			'Sa ressemblance avec le varech pourri est confondante.\nIl se soustrait à l’attention de ses ennemis en attendant\nde pouvoir évoluer.',
			'Il reste tapi au fond des océans, à l’abri des\nplus gros Pokémon. Il se nourrit principalement\nd’algues pourries.',
			'Comme il n’est pas très bon nageur, il se\ncontente de s’entortiller autour des algues.\nÀ Alola, on le trouve souvent près de Sinistrail.',
			'Il se mêle aux algues en décomposition flottant\nà la surface des océans afin de surprendre et de\ndévorer les Pokémon qui viennent s’en nourrir.',
			'Ressembler à une algue en décomposition lui\npermet d’échapper à ses ennemis en se cachant\nau milieu des résidus de plantes aquatiques.',
		],
		[Language.De]: [
			'Als verfaulter Seetang getarnt, lauert es auf Beute und\nbespritzt alles und jeden, der sich ahnungslos nähert,\nmit flüssigem Gift, bevor es ihm den Rest gibt.',
			'Mit seinem an verfaulten Seetang erinnernden\nAussehen führt es den Gegner in die Irre, während\nes selbst Energie zur Weiterentwicklung speichert.',
			'Mit seinem an verfaulten Seetang erinnernden Aussehen\nführt es den Gegner in die Irre, während es selbst Energie\nzur Weiterentwicklung speichert.',
			'Es versteckt sich regungslos zwischen Algen,\num Angriffe von großen Pokémon zu vermeiden.\nVerfaulter Seetang ist seine bevorzugte Speise.',
			'Es wickelt sich um treibende Algenfetzen, da es\nein schlechter Schwimmer ist. In Alola sieht man\nes oft Seite an Seite mit Moruda.',
			'Es treibt versteckt zwischen Algen durchs Meer.\nNähert sich ein Pokémon, um diese zu essen,\nwird es von Algitt erledigt und verspeist.',
			'Da es wie verfaulter Seetang aussieht, versteckt\nes sich zwischen den im Meer treibenden Algen,\num sich den Blicken seiner Feinde zu entziehen.',
		],
		[Language.Es]: [
			'Adopta la apariencia de algas podridas y lanza un\nlíquido venenoso a las presas desprevenidas que\npasan cerca.',
			'Es idéntico a un alga podrida. Mientras burla al\nenemigo, acumula energía para evolucionar.',
			'Adopta la apariencia de algas podridas y lanza un líquido\nvenenoso a las presas desprevenidas que pasan cerca.',
			'Es idéntico a un alga podrida. Mientras burla al enemigo,\nacumula energía para evolucionar.',
			'Permanece escondido e inmóvil entre las algas\npara protegerse de Pokémon más grandes. Su\nprincipal sustento son las algas podridas.',
			'Sus dotes para el nado dejan que desear y se\nenrolla en las algas. En la región de Alola se le\nsuele ver acompañando a Dhelmise.',
			'Vaga por el océano oculto entre las algas y da\nbuena cuenta de los Pokémon que se acercan\npara alimentarse de ellas.',
			'Su aspecto de alga podrida le permite ocultarse\nentre los restos que flotan a la deriva y pasar\ndesapercibido ante sus enemigos.',
		],
		[Language.It]: [
			'Si mimetizza assumendo l’aspetto della vegetazione\nmarina in decomposizione. Spruzza sulle prede ignare\nun liquido velenoso per poi finirle.',
			'Il suo aspetto ricorda la vegetazione marina in\ndecomposizione. Sfugge ai nemici mimetizzandosi e\nresta nascosto accumulando energie per l’evoluzione.',
			'Si mimetizza assumendo l’aspetto della vegetazione marina\nin decomposizione. Spruzza sulle prede ignare un liquido\nvelenoso per poi finirle.',
			'Il suo aspetto ricorda la vegetazione marina in\ndecomposizione. Sfugge ai nemici mimetizzandosi e resta\nnascosto accumulando energie per l’evoluzione.',
			'Si nasconde immobile tra la vegetazione marina\nper sfuggire ai Pokémon più grandi. Si nutre\nprevalentemente di alghe in decomposizione.',
			'È un pessimo nuotatore e preferisce restare\navvinghiato alle alghe. Nella regione di Alola\nlo si trova spesso al fianco di Dhelmise.',
			'Galleggia nel mare mimetizzandosi fra le alghe\nfluttuanti e agguanta i Pokémon che si avvicinano\nper nutrirsi.',
			'Il suo aspetto simile a quello di alghe fluttuanti\nin decomposizione gli permette di mimetizzarsi\nper sfuggire allo sguardo del nemico.',
		],
		[Language.En]: [
			'Camouflaged as rotten kelp, they spray\nliquid poison on prey that approaches\nunawares and then finish it off.',
			'It looks just like rotten kelp. It hides from foes\nwhile storing up power for its evolution.',
			'It vanishes into seaweed and remains perfectly\nstill to avoid attacks from large Pokémon.\nRotten seaweed is its main food source.',
			'It’s not good at swimming, so it clings to the\nseaweed. In the Alola region, it’s often found\nnear Dhelmise.',
			'It drifts in the ocean, blending in with floating\nseaweed. When other Pokémon come to feast on\nthe seaweed, Skrelp feasts on them instead.',
			'Skrelp looks like a piece of rotten seaweed, so it\ncan blend in with seaweed drifting on the ocean\nand avoid being detected by enemies.',
		],
		[Language.Ja]: [
			'腐った　海藻に　擬態する。\n気づかずに　近寄ってきた　獲物に\n毒液を　浴びせて　しとめる。',
			'腐った　海藻に　そっくり。\n敵の　目を　ごまかしながら\n進化する　力を　蓄える。',
			'藻屑に　紛れ　大きなポケモンに\n襲われないよう　じっと　している。\n腐った　海草が　主な　エサ。',
			'泳ぐのが　下手なので　藻屑に\n巻きついている。　アローラ地方では\nダダリンの　そばで　よく　見つかる。',
			'藻屑に　紛れて　海を　漂い\n海藻を　食べに来た　ポケモンを\nしとめて　ご馳走に　するのだ。',
			'腐った　海藻に　似ているので\n海を　漂う　藻屑の　中に\n隠れて　敵の目を　ごまかす。',
		],
		[Language.ZhHant]: [
			'為了不被大型寶可夢襲擊，\n總是混在海藻屑裡動也不動。\n主要的食物是腐爛的海草。',
			'因為不擅長游泳，所以會纏在\n海藻碎屑上。在阿羅拉地區，\n經常可以在破破舵輪旁邊看見牠。',
			'會混在海藻屑裡漂浮在大海，\n並且捕獵來吃海藻的寶可夢，\n當作大餐飽吃一頓。',
			'看起來像是腐爛的海藻，\n因此會躲在海裡漂浮的\n藻屑裡混淆敵人的耳目。',
		],
		[Language.ZhHans]: [
			'同碎藻混杂在一起，为了不被\n大型宝可梦袭击，一直一动不动的。\n以腐烂的海藻为主要食物。',
			'因为不擅长游泳，\n所以会缠住碎藻。在阿罗拉地区，\n经常能在破破舵轮旁边发现它。',
			'与碎藻混杂在一起漂浮于海中。\n会瞄准来吃海藻的宝可梦，\n了结它的性命并美餐一顿。',
			'看上去很像腐烂的海藻，\n因此会藏身于漂在海里的\n碎藻中，骗过敌人的眼睛。',
		],
	},
	[
		[
			Variety.Skrelp,
			64,
			5,
			73,
			[Type.Poison, Type.Water],
			{
				frontDefault: '65c562b2.png',
				frontShiny: 'f6b5939d.png',
				backDefault: '5c6e921a.png',
				backShiny: 'dd4fb9be.png',
			},
			{
				[Stat.Hp]: {baseStat: 50},
				[Stat.Attack]: {baseStat: 60},
				[Stat.Defense]: {baseStat: 60},
				[Stat.SpecialAttack]: {baseStat: 60},
				[Stat.SpecialDefense]: {baseStat: 60, effort: 1},
				[Stat.Speed]: {baseStat: 30},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Smokescreen,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.Haze,
					Move.Thief,
					Move.Spite,
					Move.ScaryFace,
					Move.MudSlap,
					Move.Whirlpool,
					Move.MuddyWater,
					Move.MudShot,
					Move.PoisonTail,
					Move.AcidSpray,
					Move.DragonTail,
					Move.Liquidation,
					Move.TeraBlast,
					Move.Snowscape,
					Move.ChillingWater,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Acid,
					5,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					10,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					55,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HydroPump,
					Move.Endure,
					Move.ScaleShot,
					Move.FlipTurn,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Waterfall,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.SleepTalk,
					Move.RainDance,
					Move.ShadowBall,
					Move.Facade,
					Move.ToxicSpikes,
					Move.Venoshock,
					Move.SludgeWave,
					Move.PlayRough,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Toxic,
					35,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Haze,
					Move.AcidArmor,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SludgeBomb,
					50,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IcyWind,
					Move.Outrage,
					Move.WaterPulse,
					Move.DragonPulse,
					Move.GunkShot,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Twister,
					Move.DragonTail,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PoisonTail,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
					45,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Smokescreen,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Acid,
					5,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					10,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					55,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HydroPump,
					Move.Surf,
					Move.Thunderbolt,
					Move.Waterfall,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.IcyWind,
					Move.Outrage,
					Move.Endure,
					Move.SleepTalk,
					Move.RainDance,
					Move.ShadowBall,
					Move.Facade,
					Move.ToxicSpikes,
					Move.DragonPulse,
					Move.GunkShot,
					Move.Venoshock,
					Move.SludgeWave,
					Move.PlayRough,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Toxic,
					35,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Haze,
					Move.AcidArmor,
					Move.Twister,
					Move.DragonTail,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronTail,
					Move.Dive,
					Move.Bounce,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SludgeBomb,
					50,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Hail,
					Move.Round,
					Move.Scald,
					Move.VenomDrench,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PoisonTail,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
					45,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ScaleShot,
					Move.FlipTurn,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Smokescreen,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Acid,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					42,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Waterfall,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.ShadowBall,
					Move.Hail,
					Move.Facade,
					Move.Venoshock,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Toxic,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					28,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Haze,
					Move.AcidArmor,
					Move.ToxicSpikes,
					Move.PlayRough,
					Move.VenomDrench,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.Outrage,
					Move.IronTail,
					Move.Bounce,
					Move.WaterPulse,
					Move.DragonPulse,
					Move.GunkShot,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SludgeBomb,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PoisonTail,
					23,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ShockWave,
					Move.AquaTail,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					49,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.WaterGun,
					Move.Smokescreen,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Acid,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					42,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.Thunderbolt,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.ShadowBall,
					Move.Hail,
					Move.Facade,
					Move.Venoshock,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Toxic,
					32,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					28,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Haze,
					Move.AcidArmor,
					Move.ToxicSpikes,
					Move.PlayRough,
					Move.VenomDrench,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SludgeBomb,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PoisonTail,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					49,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.WaterGun,
					Move.Smokescreen,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Acid,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					42,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.Thunderbolt,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.ShadowBall,
					Move.Hail,
					Move.Facade,
					Move.SecretPower,
					Move.Dive,
					Move.Venoshock,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Toxic,
					32,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					28,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Haze,
					Move.AcidArmor,
					Move.ToxicSpikes,
					Move.PlayRough,
					Move.VenomDrench,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.Outrage,
					Move.IronTail,
					Move.Bounce,
					Move.ShockWave,
					Move.WaterPulse,
					Move.AquaTail,
					Move.DragonPulse,
					Move.GunkShot,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SludgeBomb,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					19,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PoisonTail,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					49,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.WaterGun,
					Move.Smokescreen,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Acid,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					42,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.Thunderbolt,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.ShadowBall,
					Move.Hail,
					Move.Facade,
					Move.Venoshock,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Toxic,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					28,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Haze,
					Move.AcidArmor,
					Move.ToxicSpikes,
					Move.PlayRough,
					Move.VenomDrench,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SludgeBomb,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PoisonTail,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					49,
				),
			].flat(),
			[
				{
					ability: Ability.PoisonPoint,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.PoisonTouch,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Adaptability,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Skrelp,
					PokemonFormBits.Default,
					{
						frontDefault: '65c562b2.png',
						frontShiny: 'f6b5939d.png',
						backDefault: '5c6e921a.png',
						backShiny: 'dd4fb9be.png',
					},
					[Type.Poison, Type.Water],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Dragalge,
	50,
	55,
	Color.Brown,
	[EggGroup.Water1, EggGroup.Dragon],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Blob,
	{
		[Language.JaHrkt]: ['ドラミドロ'],
		[Language.Roomaji]: ['Dramidoro'],
		[Language.Ko]: ['드래캄'],
		[Language.ZhHant]: ['毒藻龍'],
		[Language.Fr]: ['Kravarech'],
		[Language.De]: ['Tandrak'],
		[Language.Es]: ['Dragalge'],
		[Language.It]: ['Dragalge'],
		[Language.En]: ['Dragalge'],
		[Language.Ja]: ['ドラミドロ'],
		[Language.ZhHans]: ['毒藻龙'],
	},
	{
		[Language.JaHrkt]: ['クサモドキポケモン'],
		[Language.Ko]: ['풀모방포켓몬'],
		[Language.ZhHant]: ['似草寶可夢'],
		[Language.Fr]: ['Pokémon Simulalgue'],
		[Language.De]: ['Tangmimikry-Pokémon'],
		[Language.Es]: ['Pokémon Pseudoalga'],
		[Language.It]: ['Pokémon Similalga'],
		[Language.En]: ['Mock Kelp Pokémon'],
		[Language.Ja]: ['クサモドキポケモン'],
		[Language.ZhHans]: ['似草宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'タンカーの　せんたいを　くさらせる\nもうどくを　なわばりに　はいりこんだ\nものに　みさかいなく　はきかける。',
			'ドラミドロが　すむ　かいいきに\nまよいこんだ　ふねは　２どと\nいきて　もどれないと　いわれている。',
			'きょうぼうで　よってきた　あいてに\nどくえきを　ふきかける。　なぜだか\nダダリンとだけは　とっても　なかよし。',
			'かいそうに　まぎれて　えものを　まち\nきんぞくを　とかすほどの　どくえきを\nふきかけて　しとめるのだ。',
			'きんぞくを　くさらせる　どくえきで\nなわばりに　はいりこんだ　タンカーを\nうみのもくずに　してしまう。',
			'あたまの　カサを　かいめんから　だし\nたいようの　ひかりを　あびることで\nドラゴンエネルギーを　つくるのだ。',
		],
		[Language.Ko]: [
			'유조선의 선체를 썩게 할 정도의\n맹독을 영역 안에 들어 온 것에\n무턱대고 끼얹는다',
			'드래캄이 사는 해역에\n길을 잘못 든 배는 두 번 다시\n살아서 돌아가지 못한다고 전해진다.',
			'유조선의 선체를 썩게 할 정도의\n맹독을 영역 안에 들어 온 것에\n무턱대고 끼얹는다.',
			'매우 흉포해서, 다가온 상대에게\n독액을 내뿜는다. 무슨 이유에서인지\n타타륜과만 매우 사이가 좋다.',
			'해조와 뒤섞여서 먹이를 기다렸다\n금속을 녹일 정도의 독액을\n내뿜어서 처리한다.',
			'금속을 녹슬게 하는 독액으로\n영역에 들어온 유조선을\n바다의 부스러기로 만들어 버린다.',
			'머리의 갓을 해면 위로 내밀고\n태양 빛을 받아\n드래곤 에너지를 만든다.',
		],
		[Language.Fr]: [
			'Il asperge tous ceux qui osent pénétrer sur son\nterritoire d’un poison assez corrosif pour dissoudre\nla coque d’un pétrolier.',
			'Il paraît que les navires qui s’aventurent dans les eaux\npeuplées de Kravarech ne reviennent jamais de leur\npériple.',
			'Il asperge tous ceux qui osent pénétrer sur son territoire\nd’un poison assez corrosif pour dissoudre la coque\nd’un pétrolier.',
			'Il paraît que les navires qui s’aventurent dans les eaux\npeuplées de Kravarech ne reviennent jamais de leur périple.',
			'Les étourdis qui divaguent du côté de chez lui\nse font chasser à grands jets de poison.\nCurieusement, il adore Sinistrail.',
			'Il attend sa proie tapi au milieu des algues,\net attaque en crachant un poison si corrosif\nqu’il peut même dissoudre le métal.',
			'Avec son poison capable de dissoudre le métal,\nil réduit à l’état d’épave les navires-citernes qui\npénètrent sur son territoire.',
			'Il sort la crête sur sa tête à la surface de l’eau\net l’expose à la lumière du soleil pour produire\nde l’énergie draconique.',
		],
		[Language.De]: [
			'Das Gift, mit dem es Eindringlinge in seinem Revier\nbespritzt, ist ätzend genug, um sich durch\nden Stahl eines Tankschiffes zu fressen.',
			'Es heißt, dass die Besatzung von Schiffen, die sich in\nTandraks Hoheitsgebiet begeben, nicht mehr lebend\nzurückkehrt.',
			'Das Gift, mit dem es Eindringlinge in seinem Revier bespritzt,\nist ätzend genug, um sich durch den Stahl eines Tankschiffes\nzu fressen.',
			'Es heißt, dass die Besatzung von Schiffen, die sich in Tandraks\nHoheitsgebiet begeben, nicht mehr lebend zurückkehrt.',
			'Ein boshaftes Pokémon, das alle, die sich ihm\nnähern, mit Gift bespritzt. Einzig mit Moruda\nversteht es sich aus unbekannten Gründen gut.',
			'Es versteckt sich in Algen und lauert dort seiner\nBeute auf. Diese greift es mit einem Gift an, das\nselbst Metall zum Schmelzen bringt.',
			'Dringen Tankschiffe in sein Revier ein, versenkt\nes diese mithilfe eines Giftes, das selbst Metall\nzum Korrodieren bringt.',
			'Indem Tandrak seinen Kopfschmuck aus dem\nWasser reckt und ihn im Sonnenlicht badet,\nproduziert es Drachen-Energie.',
		],
		[Language.Es]: [
			'Ataca de manera indiscriminada a quien ose adentrarse\nen su territorio, escupiéndole un virulento veneno\nque puede corroer hasta el casco de un petrolero.',
			'Según se dice, los barcos que se aventuran en aguas\ndonde habitan Dragalge desaparecen del mapa y no\nregresan a puerto.',
			'Ataca de manera indiscriminada a quien ose adentrarse en\nsu territorio, escupiéndole un virulento veneno que puede\ncorroer hasta el casco de un petrolero.',
			'Según se dice, los barcos que se aventuran en aguas donde\nhabitan Dragalge desaparecen del mapa y no regresan a\npuerto.',
			'Este violento Pokémon escupe veneno a los\nrivales que se le acercan. Sin embargo, por algún\nextraño motivo, se lleva muy bien con Dhelmise.',
			'Se esconde entre las algas y espera a sus\npresas, a las cuales rocía con un veneno tan\ncáustico que puede derretir hasta el metal.',
			'Utiliza su veneno capaz de corroer el metal\npara enviar a pique cualquier navío que ose\nadentrarse en las aguas que habita.',
			'Asoma la cresta de la cabeza sobre la superficie\ndel agua y transforma la luz que absorbe del sol\nen energía dragón.',
		],
		[Language.It]: [
			'Spruzza su chiunque invada il suo territorio un veleno\ntalmente potente da sciogliere lo scafo di una\npetroliera.',
			'Si dice che le navi che finiscono alla deriva nelle acque\nin cui vive questo Pokémon non tornino più indietro.',
			'Spruzza su chiunque invada il suo territorio un veleno\ntalmente potente da sciogliere lo scafo di una petroliera.',
			'È spietato e spruzza un liquido velenoso sui\nPokémon ostili che gli si avvicinano. Per qualche\nstrano motivo, va d’accordo solo con Dhelmise.',
			'Aspetta la preda nascosto tra le alghe e\nl’attacca spruzzandole addosso un liquido\naltamente corrosivo che scioglie anche il metallo.',
			'Con il suo liquido altamente corrosivo, capace\ndi sciogliere il metallo, riduce in rottami\nle petroliere che sconfinano nel suo territorio.',
			'Fa uscire la cresta che ha sulla testa fuori\ndall’acqua per assorbire la luce del sole\ne convertirla in energia Drago.',
		],
		[Language.En]: [
			'Their poison is strong enough to eat through\nthe hull of a tanker, and they spit it indiscriminately\nat anything that enters their territory.',
			'Tales are told of ships that wander into\nseas where Dragalge live, never to return.',
			'This vicious Pokémon sprays a poisonous liquid\non opponents that come near. For whatever\nreason, it gets along really well with Dhelmise.',
			'It blends in with seaweed to ambush its prey\nand then takes them down with a poisonous\nliquid strong enough to melt metal.',
			'Dragalge uses a poisonous liquid capable of\ncorroding metal to send tankers that enter its\nterritory to the bottom of the sea.',
			'Dragalge generates dragon energy by sticking\nthe plume on its head out above the ocean’s\nsurface and bathing it in sunlight.',
		],
		[Language.Ja]: [
			'タンカーの　船体を　腐らせる　猛毒を\n縄張りに　入りこんだ　ものに\n見境なく　吐きかける。',
			'ドラミドロが　住む　海域に\n迷いこんだ　船は　２度と\n生きて　戻れないと　言われている。',
			'凶暴で　寄ってきた　相手に\n毒液を　吹きかける。　なぜだか\nダダリンとだけは　とっても　仲良し。',
			'海藻に　まぎれて　獲物を　待ち\n金属を　溶かすほどの　毒液を\n吹きかけて　仕留めるのだ。',
			'金属を　腐らせる　毒液で\n縄張りに　入りこんだ　タンカーを\n海の藻屑に　してしまう。',
			'頭の　笠を　海面から　出し\n太陽の　光を　浴びることで\nドラゴンエネルギーを　作るのだ。',
		],
		[Language.ZhHant]: [
			'性情兇暴，會對靠近自己的對手\n噴出毒液。不知為何就只跟\n破破舵輪關係非常親密。',
			'混在海藻裡等待獵物上門。\n會噴出連金屬都能溶解的毒液，\n給獵物致命一擊。',
			'會用能夠腐蝕金屬的毒液\n將闖入自己地盤的油輪\n化為碎屑，沉入大海。',
			'透過讓頭頂類似帽子的部分\n浮出海面吸收陽光，\n就能夠製造龍之能量。',
		],
		[Language.ZhHans]: [
			'性格粗暴，会朝靠近的对手\n喷出毒液。不知为何，\n只和破破舵轮关系非常好。',
			'混在海藻里，等待着猎物，\n会喷出连金属都能溶解的毒液，\n给猎物致命一击。',
			'将能够腐蚀金属的毒液\n喷向进入自己领地的油轮，\n使其化为碎屑，葬身海底。',
			'会通过将头上的伞状部分\n伸出海面吸收阳光的方式，\n在体内制造龙之能量。',
		],
	},
	[
		[
			Variety.Dragalge,
			173,
			18,
			815,
			[Type.Poison, Type.Dragon],
			{
				frontDefault: 'ae5eb4d9.png',
				frontShiny: 'ce44084e.png',
			},
			{
				[Stat.Hp]: {baseStat: 65},
				[Stat.Attack]: {baseStat: 75},
				[Stat.Defense]: {baseStat: 90},
				[Stat.SpecialAttack]: {baseStat: 97},
				[Stat.SpecialDefense]: {baseStat: 123, effort: 2},
				[Stat.Speed]: {baseStat: 44},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.WaterGun,
					Move.Smokescreen,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.Haze,
					Move.Thief,
					Move.Spite,
					Move.ScaryFace,
					Move.MudSlap,
					Move.Whirlpool,
					Move.MuddyWater,
					Move.MudShot,
					Move.PoisonTail,
					Move.AcidSpray,
					Move.Liquidation,
					Move.TeraBlast,
					Move.Snowscape,
					Move.ChillingWater,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Acid,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					59,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HydroPump,
					Move.Endure,
					Move.ToxicSpikes,
					Move.PlayRough,
					Move.ScaleShot,
					Move.FlipTurn,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Toxic,
					Move.Waterfall,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.SleepTalk,
					Move.RainDance,
					Move.ShadowBall,
					Move.Facade,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.DracoMeteor,
					Move.Venoshock,
					Move.SludgeWave,
					Move.Scald,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Toxic,
					35,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SludgeBomb,
					52,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IcyWind,
					Move.Outrage,
					Move.WaterPulse,
					Move.DragonPulse,
					Move.GunkShot,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					66,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PoisonTail,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
					45,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Acid,
					Move.WaterGun,
					Move.Smokescreen,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					59,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HydroPump,
					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Waterfall,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.IcyWind,
					Move.Outrage,
					Move.Endure,
					Move.SleepTalk,
					Move.RainDance,
					Move.ShadowBall,
					Move.Facade,
					Move.ToxicSpikes,
					Move.DragonPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.GunkShot,
					Move.Venoshock,
					Move.SludgeWave,
					Move.Scald,
					Move.PlayRough,
					Move.VenomDrench,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Toxic,
					35,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronTail,
					Move.Dive,
					Move.Bounce,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SludgeBomb,
					52,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					66,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Hail,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PoisonTail,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
					45,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.DracoMeteor,
					Move.ScaleShot,
					Move.FlipTurn,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.WaterGun,
					Move.Smokescreen,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Acid,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					42,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Toxic,
					Move.Waterfall,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.ShadowBall,
					Move.Hail,
					Move.Facade,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.Venoshock,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Toxic,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					28,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.Outrage,
					Move.IronTail,
					Move.Bounce,
					Move.WaterPulse,
					Move.DragonPulse,
					Move.DracoMeteor,
					Move.GunkShot,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SludgeBomb,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Twister,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Twister,
					Move.DragonTail,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PoisonTail,
					23,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ShockWave,
					Move.AquaTail,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					53,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonTail,
					59,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.WaterGun,
					Move.Smokescreen,
					Move.FeintAttack,
					Move.Twister,
					Move.DragonTail,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Acid,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					42,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.ShadowBall,
					Move.Hail,
					Move.Facade,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.Venoshock,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Toxic,
					32,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SludgeBomb,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Twister,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PoisonTail,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					53,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonTail,
					59,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.WaterGun,
					Move.Smokescreen,
					Move.Twister,
					Move.DragonTail,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Acid,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					42,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.ShadowBall,
					Move.Hail,
					Move.Facade,
					Move.SecretPower,
					Move.Dive,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.Venoshock,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Toxic,
					32,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.Outrage,
					Move.IronTail,
					Move.Bounce,
					Move.ShockWave,
					Move.WaterPulse,
					Move.AquaTail,
					Move.DragonPulse,
					Move.DracoMeteor,
					Move.GunkShot,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SludgeBomb,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Twister,
					67,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					19,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PoisonTail,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					53,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonTail,
					59,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.WaterGun,
					Move.Smokescreen,
					Move.Twister,
					Move.DragonTail,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Acid,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					42,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.ShadowBall,
					Move.Hail,
					Move.Facade,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.Venoshock,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Toxic,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SludgeBomb,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Twister,
					67,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PoisonTail,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					53,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonTail,
					59,
				),
			].flat(),
			[
				{
					ability: Ability.PoisonPoint,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.PoisonTouch,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Adaptability,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Dragalge,
					PokemonFormBits.Default,
					{
						frontDefault: 'ae5eb4d9.png',
						frontShiny: 'ce44084e.png',
					},
					[Type.Poison, Type.Dragon],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Clauncher,
	50,
	225,
	Color.Blue,
	[EggGroup.Water1, EggGroup.Water3],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	15,
	GrowthRate.Slow,
	Shape.Armor,
	{
		[Language.JaHrkt]: ['ウデッポウ'],
		[Language.Roomaji]: ['Udeppou'],
		[Language.Ko]: ['완철포'],
		[Language.ZhHant]: ['鐵臂槍蝦'],
		[Language.Fr]: ['Flingouste'],
		[Language.De]: ['Scampisto'],
		[Language.Es]: ['Clauncher'],
		[Language.It]: ['Clauncher'],
		[Language.En]: ['Clauncher'],
		[Language.Ja]: ['ウデッポウ'],
		[Language.ZhHans]: ['铁臂枪虾'],
	},
	{
		[Language.JaHrkt]: ['みずでっぽうポケモン'],
		[Language.Ko]: ['물대포포켓몬'],
		[Language.ZhHant]: ['水槍寶可夢'],
		[Language.Fr]: ['Pokémon Lance à Eau'],
		[Language.De]: ['Aquapistolen-Pokémon'],
		[Language.Es]: ['Pokémon Proyectagua'],
		[Language.It]: ['Pokémon Zampillo'],
		[Language.En]: ['Water Gun Pokémon'],
		[Language.Ja]: ['みずでっぽうポケモン'],
		[Language.ZhHans]: ['水枪宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'おおきな　ハサミから　あっしゅくした\nみずを　ピストルのように　うちだし\nとんでいる　えものを　うちおとす。',
			'たいないガスの　ばくはつで　みずを\nピストルのように　はっしゃする。\nしきんきょりなら　いわを　くだく。',
			'ハサミは　ときどき　もげることもあり\nさいせいするまでは　コソコソくらす。\nハサミのなかみは　とてもおいしいよ。',
			'みぎの　ハサミから　みずを　ふきだし\nいどう。　バランスが　わるいので\nまっすぐ　およぐのは　へたくそ。',
			'ハサミは　たたかいで　とれても\nさいせいされる。　ハサミの　なかみは\nガラルでは　ちんみとして　にんきだ。',
			'みぎうでの　ハサミの　なかに　たまる\nガスの　ばくはつで　だんがんのように\nみずを　はっしゃし　てきを　たおす。',
		],
		[Language.Ko]: [
			'커다란 집게발로\n압축한 물을 권총처럼 쏘아\n날고 있는 사냥감을 떨어뜨린다.',
			'체내 가스의 폭발로 물을\n총처럼 발사한다.\n가까운 거리에서라면 바위를 부순다.',
			'가끔 집게가 떨어지면\n재생할 때까지 몰래 숨어 다닌다.\n집게 속살은 매우 맛있다.',
			'오른쪽 집게에서 물을 뿜어내서\n이동한다. 밸런스가 나빠서\n똑바로 헤엄치는 것에 몹시 서툴다.',
			'집게발은 싸우다가 떨어져도\n재생된다. 집게 살은 가라르에서\n진미로 통하며 인기가 높다.',
			'오른팔의 집게 안에 담긴\n가스를 폭발시켜 탄환처럼\n물을 발사해서 상대를 쓰러뜨린다.',
		],
		[Language.Fr]: [
			'Sa pince projette un jet d’eau sous pression\nsuffisamment puissant pour abattre ses proies en plein\nvol.',
			'Il est capable de transformer son corps en canon\nà eau, grâce à la combustion d’un gaz interne.\nÀ bout portant, il peut réduire un rocher en miettes.',
			'Sa pince projette un jet d’eau sous pression suffisamment\npuissant pour abattre ses proies en plein vol.',
			'Il est capable de transformer son corps en canon à eau,\ngrâce à la combustion d’un gaz interne. À bout portant,\nil peut réduire un rocher en miettes.',
			'Sa pince, à la chair délicieuse, tombe parfois.\nIl se fait alors tout petit et se cache le temps\nqu’elle repousse.',
			'Il se déplace en propulsant de l’eau par sa pince\ndroite. Il n’est cependant pas très agile et est\nincapable de nager droit.',
			'S’il perd ses pinces au combat, d’autres\nrepoussent à la place. La chair qu’elles\ncontiennent est un mets très apprécié à Galar.',
			'Il concentre du gaz dans sa pince droite et\nle fait exploser pour tirer une rafale d’eau\nsur ses ennemis, comme une balle de pistolet.',
		],
		[Language.De]: [
			'Mit Salven komprimierten Wassers, die es wie\nPistolenkugeln aus seinen Scheren abfeuert,\nschießt es fliegende Beute ab.',
			'Durch die Explosion körpereigener Gase feuert es wie\neine Pistole Wassersalven ab, die aus kurzer Distanz\nselbst Felsen zerschmettern.',
			'Mit Salven komprimierten Wassers, die es wie Pistolenkugeln\naus seinen Scheren abfeuert, schießt es fliegende Beute ab.',
			'Durch die Explosion körpereigener Gase feuert es wie eine\nPistole Wassersalven ab, die aus kurzer Distanz selbst Felsen\nzerschmettern.',
			'Manchmal verliert es seine Scheren. Danach lebt\nes in Zurückgezogenheit, bis sie nachwachsen.\nDas Fleisch im Inneren der Scheren ist köstlich.',
			'Das Ungleichgewicht, das entsteht, wenn es zur\nFortbewegung Wasser aus der rechten Schere\nspritzt, hindert es daran, gerade zu schwimmen.',
			'Selbst wenn es seine Scheren im Kampf verlieren\nsollte, wachsen sie wieder nach. Das Innere seiner\nScheren ist in Galar eine beliebte Delikatesse.',
			'Scampisto erledigt seine Feinde, indem es durch\ndie Explosion von Gasen, die es in seiner rechten\nSchere speichert, Wasser wie Projektile abfeuert.',
		],
		[Language.Es]: [
			'Abate a enemigos voladores disparando agua a presión\ncon su enorme pinza como si de una pistola se tratara.',
			'Al explotar el gas que se halla en su interior, expulsa\nun chorro de agua cual pistola, que a bocajarro es\nincluso capaz de pulverizar rocas.',
			'Abate a enemigos voladores disparando agua a presión con\nsu enorme pinza como si de una pistola se tratara.',
			'Al explotar el gas que se halla en su interior, expulsa un\nchorro de agua cual pistola, que a bocajarro es incluso capaz\nde pulverizar rocas.',
			'En alguna que otra ocasión se le cae la pinza,\ny hasta que le crece de nuevo vive aislado. La\ncarne del interior de las pinzas es deliciosa.',
			'Para moverse, expulsa chorros de agua por su\npinza derecha. Tiene muy mal equilibrio, por lo\nque es incapaz de nadar en línea recta.',
			'Aunque pierda una pinza en combate, volverá\na crecerle. La carne del interior de sus pinzas es\nconsiderada un auténtico manjar en Galar.',
			'Acalla a sus enemigos con balas de agua que\ndispara haciendo explotar el gas de su pinza\nderecha.',
		],
		[Language.It]: [
			'Abbatte le prede volanti sparando un getto d’acqua\nad alta pressione dalla chela più grande, che usa come\nuna pistola.',
			'Facendo esplodere i gas corporei, emette un getto\nd’acqua ad altissima pressione che, a breve distanza,\npuò persino frantumare le rocce.',
			'Abbatte le prede volanti sparando un getto d’acqua ad alta\npressione dalla chela più grande, che usa come una pistola.',
			'Facendo esplodere i gas corporei, emette un getto d’acqua\nad altissima pressione che, a breve distanza, può persino\nfrantumare le rocce.',
			'Se capita che gli si stacchi una chela, resta\nnascosto finché non ricresce. La polpa delle sue\nchele è una vera prelibatezza.',
			'Si sposta spruzzando acqua dalla chela destra.\nHa un pessimo equilibrio e non riesce a nuotare\nseguendo una traiettoria dritta.',
			'Se le sue chele si staccano durante la lotta,\nricrescono. La polpa al loro interno\nè considerata una rara prelibatezza a Galar.',
			'Sconfigge i nemici con proiettili d’acqua che\nspara facendo esplodere il gas che accumula\nnella chela destra.',
		],
		[Language.En]: [
			'They knock down flying prey by firing\ncompressed water from their massive\nclaws like shooting a pistol.',
			'Through controlled explosions of internal gas,\nit can expel water like a pistol shot.\nAt close distances, it can shatter rock.',
			'Its claws occasionally fall off, and it keeps a low\nprofile until they grow back. The meat of its\nclaws is so delicious!',
			'It moves around by jetting water from its right\npincer. It has a poor sense of balance, so it’s\nterrible at swimming straight.',
			'Clauncher’s claws can fall off during battle, but\nthey’ll regenerate. The meat inside the claws is\npopular as a delicacy in Galar.',
			'By detonating gas that accumulates in its right\nclaw, this Pokémon launches water like a bullet.\nThis is how Clauncher defeats its enemies.',
		],
		[Language.Ja]: [
			'大きな　ハサミから　圧縮した　水を\nピストルのように　撃ち出し\n飛んでいる　獲物を　撃ち落とす。',
			'体内ガスの　爆発で\n水を　ピストルのように　発射する。\n至近距離なら　岩を　砕く。',
			'ハサミは　時々　もげることもあり\n再生するまでは　コソコソ暮らす。\nハサミの中身は　とても美味しいよ。',
			'右の　ハサミから　水を　噴き出し\n移動。　バランスが　悪いので\nまっすぐ　泳ぐのは　下手くそ。',
			'ハサミは　戦いで　取れても\n再生される。　ハサミの　中身は\nガラルでは　珍味として　人気だ。',
			'右腕の　ハサミの　中に　溜まる\nガスの　爆発で　弾丸のように\n水を　発射し　敵を　倒す。',
		],
		[Language.ZhHant]: [
			'鉗子時常會脫落，\n在重新長出前會偷偷摸摸地生活。\n鉗子裡面的肉非常美味。',
			'從右邊的鉗子噴出水來移動。\n因為無法取得平衡，\n所以不擅長直線游動。',
			'鉗子就算在戰鬥中脫落，也會\n重新長出來。鉗子裡面的肉在\n伽勒爾是很有人氣的珍奇美食。',
			'右臂的鉗子能夠累積氣體，\n並且利用氣體爆炸噴射出\n像子彈般的水來打倒敵人。',
		],
		[Language.ZhHans]: [
			'钳子时常会掉落，\n在再生之前，会悄悄地生活。\n钳子里面的肉非常美味哦。',
			'从右侧的钳子里喷出水来移动。\n因为平衡性很差，\n所以不擅长直线游泳。',
			'钳子就算在战斗中掉落\n也还会再长出来。钳子里的肉是\n在伽勒尔广受欢迎的珍奇美食。',
			'通过引爆积蓄在右臂钳子中的\n气体，像发射子弹般\n将水喷射出去，击倒敌人。',
		],
	},
	[
		[
			Variety.Clauncher,
			66,
			5,
			83,
			[Type.Water],
			{
				frontDefault: '7ce517cf.png',
				frontShiny: '7e443e7b.png',
				backDefault: 'b5210d1e.png',
				backShiny: 'c1c44418.png',
			},
			{
				[Stat.Hp]: {baseStat: 50},
				[Stat.Attack]: {baseStat: 53},
				[Stat.Defense]: {baseStat: 62},
				[Stat.SpecialAttack]: {baseStat: 58, effort: 1},
				[Stat.SpecialDefense]: {baseStat: 63},
				[Stat.Speed]: {baseStat: 44},
			},
			{},
			[
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Endure,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.HelpingHand,
					Move.UTurn,
					Move.FlashCannon,
					Move.Venoshock,
					Move.SmackDown,
					Move.SludgeWave,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.HydroPump,
					Move.Blizzard,
					Move.Thief,
					Move.MudSlap,
					Move.WeatherBall,
					Move.MudShot,
					Move.DarkPulse,
					Move.Liquidation,
					Move.TeraBlast,
					Move.Pounce,
					Move.ChillingWater,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.WaterGun,
					Move.Splash,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.BubbleBeam,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Crabhammer,
					55,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					10,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IcyWind,
					Move.WaterPulse,
					Move.DragonPulse,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					50,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.MuddyWater,
					Move.AuraSphere,
					Move.FlipTurn,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					45,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AuraSphere,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.AquaTail,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AquaJet,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HoneClaws,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.Entrainment,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ViceGrip,
					5,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.IcyWind,
					Move.Endure,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.HelpingHand,
					Move.MuddyWater,
					Move.UTurn,
					Move.AuraSphere,
					Move.DragonPulse,
					Move.FlashCannon,
					Move.Venoshock,
					Move.SludgeWave,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.WaterGun,
					Move.Splash,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.BubbleBeam,
					Move.AquaTail,
					Move.Entrainment,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Crabhammer,
					55,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronTail,
					Move.Dive,
					Move.Bounce,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					10,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SludgeBomb,
					Move.Attract,
					Move.Round,
					Move.Scald,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					50,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					45,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AuraSphere,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AquaJet,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HoneClaws,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.TerrainPulse,
					Move.FlipTurn,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ViceGrip,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					25,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.UTurn,
					Move.FlashCannon,
					Move.Venoshock,
					Move.SmackDown,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.WaterGun,
					Move.Splash,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BubbleBeam,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Crabhammer,
					30,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Crabhammer,
					Move.AquaJet,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.IronTail,
					Move.HelpingHand,
					Move.Bounce,
					Move.WaterPulse,
					Move.AquaTail,
					Move.DragonPulse,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Endure,
					Move.HelpingHand,
					Move.Entrainment,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterSport,
					7,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AquaJet,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					39,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ViceGrip,
					9,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					25,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.UTurn,
					Move.FlashCannon,
					Move.Venoshock,
					Move.SmackDown,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.WaterGun,
					Move.Splash,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BubbleBeam,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Crabhammer,
					30,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Crabhammer,
					Move.Endure,
					Move.HelpingHand,
					Move.AquaJet,
					Move.Entrainment,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterSport,
					7,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					34,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AquaJet,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					39,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ViceGrip,
					9,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					25,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.SecretPower,
					Move.Dive,
					Move.UTurn,
					Move.FlashCannon,
					Move.Venoshock,
					Move.SmackDown,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Cut,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.WaterGun,
					Move.Splash,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BubbleBeam,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Crabhammer,
					30,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Crabhammer,
					Move.Endure,
					Move.HelpingHand,
					Move.AquaJet,
					Move.Entrainment,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.IronTail,
					Move.HelpingHand,
					Move.Bounce,
					Move.WaterPulse,
					Move.AquaTail,
					Move.DragonPulse,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WaterSport,
					7,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					34,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AquaJet,
					43,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ViceGrip,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					25,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Cut,
					Move.Surf,
					Move.IceBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.Facade,
					Move.UTurn,
					Move.FlashCannon,
					Move.Venoshock,
					Move.SmackDown,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.WaterGun,
					Move.Splash,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BubbleBeam,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Crabhammer,
					30,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Crabhammer,
					Move.Endure,
					Move.HelpingHand,
					Move.AquaJet,
					Move.Entrainment,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WaterSport,
					7,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AquaJet,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					39,
				),
			].flat(),
			[
				{
					ability: Ability.MegaLauncher,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.Clauncher,
					PokemonFormBits.Default,
					{
						frontDefault: '7ce517cf.png',
						frontShiny: '7e443e7b.png',
						backDefault: 'b5210d1e.png',
						backShiny: 'c1c44418.png',
					},
					[Type.Water],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Clawitzer,
	50,
	55,
	Color.Blue,
	[EggGroup.Water1, EggGroup.Water3],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	15,
	GrowthRate.Slow,
	Shape.Squiggle,
	{
		[Language.JaHrkt]: ['ブロスター'],
		[Language.Roomaji]: ['Bloster'],
		[Language.Ko]: ['블로스터'],
		[Language.ZhHant]: ['鋼炮臂蝦'],
		[Language.Fr]: ['Gamblast'],
		[Language.De]: ['Wummer'],
		[Language.Es]: ['Clawitzer'],
		[Language.It]: ['Clawitzer'],
		[Language.En]: ['Clawitzer'],
		[Language.Ja]: ['ブロスター'],
		[Language.ZhHans]: ['钢炮臂虾'],
	},
	{
		[Language.JaHrkt]: ['ランチャーポケモン'],
		[Language.Ko]: ['런처포켓몬'],
		[Language.ZhHant]: ['發射器寶可夢'],
		[Language.Fr]: ['Pokémon Blaster'],
		[Language.De]: ['Aquawummen-Pokémon'],
		[Language.Es]: ['Pokémon Lanzachorro'],
		[Language.It]: ['Pokémon Acqualancio'],
		[Language.En]: ['Howitzer Pokémon'],
		[Language.Ja]: ['ランチャーポケモン'],
		[Language.ZhHans]: ['发射器宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'みずの　ほうだんを　はっしゃする\nきょだいな　ハサミを　もつ。\nタンカーの　せんたいを　うちぬくぞ。',
			'ハサミの　うしろの　ノズルから\nみずを　ふきだす　すいしんりょくで\n６０ノットの　スピードで　すすむ。',
			'とりこんだ　みずを　あっしゅくして\nうちだす。　ぶあつい　てっぱんに\nあなを　あけるほどの　いりょくだ。',
			'みぎうでの　みは　よくしまっている。\nもげた　ハサミは　しょくざい　として\nかいがいに　ゆしゅつ　される。',
			'きょだいな　ハサミの　しょっかくで\nえものの　いばしょを　かんちして\nみずの　ほうだんを　はっしゃする。',
			'みぎうでは　かいすいの　ほうだんを\nはっしゃする　たいほう。　タンカーを\nしずめてしまうほどの　いりょくだ。',
		],
		[Language.Ko]: [
			'물 포탄을 발사하는\n거대한 집게발을 지녔다.\n유조선의 선체를 뚫어 버린다.',
			'집게 뒤의 노즐에서\n물을 뿜어내는 추진력으로\n60노트의 스피드로 나아간다.',
			'빨아들인 물을 압축해 쏜다.\n두꺼운 철판에\n구멍을 뚫을 정도로 위력적이다.',
			'오른팔의 속살은 꽉 차 있다.\n떨어진 집게는 식재료로써\n해외에 수출된다.',
			'거대한 집게의 더듬이로\n먹이가 있는 곳을 감지해\n물 폭탄을 발사한다.',
			'오른팔은 해수 포탄을\n발사하는 대포다. 유조선을\n가라앉게 할 정도의 위력이다.',
		],
		[Language.Fr]: [
			'Son énorme pince projette de véritables obus d’eau\ncapables de transpercer la coque d’un pétrolier.',
			'La force de propulsion générée par l’expulsion de\nl’eau via la tuyère située à l’arrière de sa pince peut\nlui conférer une vitesse de 60 nœuds.',
			'Son énorme pince projette de véritables obus d’eau capables\nde transpercer la coque d’un pétrolier.',
			'La force de propulsion générée par l’expulsion de l’eau\nvia la tuyère située à l’arrière de sa pince peut lui conférer\nune vitesse de 60 nœuds.',
			'Il aspire de l’eau et la projette sous pression\npour attaquer. Le jet est si puissant qu’il perce\nmême d’épaisses plaques d’acier.',
			'La chair de sa pince droite est très ferme.\nLes pinces tombées sont vendues à l’étranger\ncomme ingrédients de cuisine.',
			'Il projette des obus d’eau sur ses ennemis après\nles avoir localisés grâce aux antennes situées sur\nson énorme pince.',
			'Sa pince droite est un canon pouvant projeter\ndes obus d’eau assez puissants pour couler\nun navire-citerne.',
		],
		[Language.De]: [
			'Aus seinen gewaltigen Scheren feuert es\nmächtige Wassergeschosse ab, die selbst\nden Rumpf eines Tankschiffes durchdringen.',
			'Indem es über die Düsen am hinteren Ende seiner\nScheren Wasser absondert, kann es sich mit einer\nGeschwindigkeit von 60 Knoten fortbewegen.',
			'Aus seinen gewaltigen Scheren feuert es mächtige\nWassergeschosse ab, die selbst den Rumpf eines\nTankschiffes durchdringen.',
			'Indem es über die Düsen am hinteren Ende seiner Scheren\nWasser absondert, kann es sich mit einer Geschwindigkeit\nvon 60 Knoten fortbewegen.',
			'Es saugt Wasser auf und feuert dieses mit\nhohem Druck als Strahl ab. Dieser ist so stark,\ndass er dicke Eisenplatten durchlöchern kann.',
			'Das Fleisch in seiner rechten Schere ist sehr\nfest. Wenn sie abfällt, wird sie aufgesammelt\nund zum Verzehr ins Ausland exportiert.',
			'Mit den Antennen an seiner gigantischen Schere\nerfasst es, wo sich seine Beute aufhält, und feuert\ndann Wassergeschosse auf sie ab.',
			'Mit seiner rechten Schere, die ihm als Kanone\ndient, feuert es Geschosse aus Meerwasser ab,\ndie selbst Tankschiffe versenken können.',
		],
		[Language.Es]: [
			'Posee una enorme pinza que dispara bolas de agua\nque podrían atravesar incluso el casco de un petrolero.',
			'El chorro de agua que dispara la tobera situada en la\nparte trasera de su pinza le permite avanzar a una\nvelocidad de 60 nudos.',
			'Posee una enorme pinza que dispara bolas de agua que\npodrían atravesar incluso el casco de un petrolero.',
			'El chorro de agua que dispara la tobera situada en la parte\ntrasera de su pinza le permite avanzar a una velocidad de\n60 nudos.',
			'Comprime el agua que traga y la convierte en\nproyectiles de tal potencia que atraviesan\nincluso gruesas placas de metal.',
			'La pinza de su extremidad derecha es muy\nrobusta. Cuando se les caen, se recogen para\nexportarlas como ingrediente culinario.',
			'Las antenas de su enorme pinza le permiten\ndetectar la posición de sus presas para luego\nacribillarlas a cañonazos con bolas de agua.',
			'Con el cañón de su brazo derecho dispara\nproyectiles de agua marina con tanta potencia\nque son capaces de hundir un petrolero.',
		],
		[Language.It]: [
			'Ha un’enorme chela che spara proiettili d’acqua\nin grado di sfondare lo scafo di un transatlantico.',
			'Espellendo acqua da un foro dietro la chela riesce\na muoversi alla velocità di 60 nodi.',
			'Ha un’enorme chela che spara proiettili d’acqua in grado\ndi sfondare lo scafo di un transatlantico.',
			'Espellendo acqua da un foro dietro la chela riesce a muoversi\nalla velocità di 60 nodi.',
			'Assorbe acqua che comprime e rilascia in un\ngetto con una pressione tale da perforare\nanche spesse lastre d’acciaio.',
			'La polpa della chela destra è molto soda.\nQuelle che si staccano vengono esportate come\nprodotti alimentari.',
			'Individua la preda con le antenne della\nsua enorme chela e la attacca sparando\nproiettili d’acqua.',
			'L’arto destro è una sorta di cannone da cui\nspara proiettili d’acqua marina tanto potenti\nda affondare una petroliera.',
		],
		[Language.En]: [
			'Their enormous claws launch cannonballs of\nwater powerful enough to pierce tanker hulls.',
			'By expelling water from the nozzle in the back\nof its claw, it can move at a speed of 60 knots.',
			'It compresses the water it has sucked up and\nthen projects it with enough power to punch a\nhole right through a thick sheet of iron.',
			'Its right arm is packed with meat. When its\npincer falls off, it’s exported to be used as a\ncooking ingredient.',
			'After using the feelers on its oversized claw to\ndetect the location of prey, Clawitzer launches\na cannonball of water at its target.',
			'Clawitzer’s right arm is a cannon that launches\nprojectiles made of seawater. Shots from a\nClawitzer’s cannon arm can sink a tanker.',
		],
		[Language.Ja]: [
			'水の　砲弾を　発射する\n巨大な　腕を　持つ。\nタンカーの　船体を　撃ち抜くぞ。',
			'ハサミの　後ろの　ノズルから\n水を　噴き出す　推進力で\n６０ノットの　スピードで　進む。',
			'取り込んだ　水を　圧縮して\n撃ちだす。　分厚い　鉄板に\n穴を　開けるほどの　威力だ。',
			'右腕の　身は　よく締まっている。\nもげた　ハサミは　食材　として\n海外に　輸出　される。',
			'巨大な　ハサミの　触角で\n獲物の　居場所を　感知して\n水の　砲弾を　発射する。',
			'右腕は　海水の　砲弾を\n発射する　大砲。　タンカーを\n沈めてしまうほどの　威力だ。',
		],
		[Language.ZhHant]: [
			'會將吸入體內的水\n壓縮之後發射出去，威力足以\n在厚厚的鐵板上打穿一個洞。',
			'右臂的肉非常緊實飽滿。\n脫落下來的鉗子會被\n當成食材外銷到海外。',
			'能夠利用巨大鉗子的\n觸角探測獵物的位置，\n然後發射水砲彈。',
			'右臂是能夠發射海水\n砲彈的大砲。威力之強，\n甚至能夠擊沉油輪。',
		],
		[Language.ZhHans]: [
			'压缩吸入的水，然后射出去。\n那威力连很厚的铁板都能\n打穿一个洞。',
			'右臂非常紧实饱满。\n掉落下来的钳子作为食材\n被销往海外。',
			'通过巨大钳子的触角\n感知猎物的位置，\n然后对其发射水炮弹。',
			'右臂是能够喷射\n海水炮弹的大炮。\n威力大到足以击沉油轮。',
		],
	},
	[
		[
			Variety.Clawitzer,
			100,
			13,
			353,
			[Type.Water],
			{
				frontDefault: '77e392ec.png',
				frontShiny: 'ea6d1214.png',
			},
			{
				[Stat.Hp]: {baseStat: 71},
				[Stat.Attack]: {baseStat: 73},
				[Stat.Defense]: {baseStat: 88},
				[Stat.SpecialAttack]: {baseStat: 120, effort: 2},
				[Stat.SpecialDefense]: {baseStat: 89},
				[Stat.Speed]: {baseStat: 59},
			},
			{},
			[
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.HyperBeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.SleepTalk,
					Move.RainDance,
					Move.ShadowBall,
					Move.Facade,
					Move.UTurn,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.Venoshock,
					Move.SmackDown,
					Move.SludgeWave,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.HydroPump,
					Move.Blizzard,
					Move.Thief,
					Move.ScaryFace,
					Move.MudSlap,
					Move.WeatherBall,
					Move.MudShot,
					Move.TeraBlast,
					Move.Pounce,
					Move.ChillingWater,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.WaterGun,
					Move.Splash,
					Move.DarkPulse,
					Move.DragonPulse,
					Move.HealPulse,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Crabhammer,
					63,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IcyWind,
					Move.HelpingHand,
					Move.WaterPulse,
					Move.DragonPulse,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Endure,
					Move.MuddyWater,
					Move.FlipTurn,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					56,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					49,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AuraSphere,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.AuraSphere,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AquaJet,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HoneClaws,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					20,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.Liquidation,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ViceGrip,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.HyperBeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.IcyWind,
					Move.Endure,
					Move.SleepTalk,
					Move.RainDance,
					Move.ShadowBall,
					Move.Facade,
					Move.HelpingHand,
					Move.MuddyWater,
					Move.UTurn,
					Move.AuraSphere,
					Move.DarkPulse,
					Move.DragonPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.Venoshock,
					Move.SludgeWave,
					Move.Liquidation,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.WaterGun,
					Move.Splash,
					Move.Flail,
					Move.DarkPulse,
					Move.DragonPulse,
					Move.HealPulse,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Crabhammer,
					63,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronTail,
					Move.Dive,
					Move.Bounce,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Round,
					Move.Scald,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					56,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					49,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AuraSphere,
					42,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AquaJet,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HoneClaws,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.TerrainPulse,
					Move.FlipTurn,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ViceGrip,
					Move.WaterGun,
					Move.Splash,
					Move.DarkPulse,
					Move.DragonPulse,
					Move.HealPulse,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ViceGrip,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					25,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.HyperBeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.ShadowBall,
					Move.Facade,
					Move.UTurn,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.Venoshock,
					Move.SmackDown,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BubbleBeam,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Crabhammer,
					30,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.IronTail,
					Move.HelpingHand,
					Move.Bounce,
					Move.WaterPulse,
					Move.DragonPulse,
					Move.LaserFocus,
					Move.Liquidation,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					57,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterSport,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterSport,
					7,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					34,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AuraSphere,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AuraSphere,
					1,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Tutor,
					Move.AquaTail,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AquaJet,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					42,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ViceGrip,
					Move.WaterGun,
					Move.Splash,
					Move.WaterSport,
					Move.AuraSphere,
					Move.DarkPulse,
					Move.DragonPulse,
					Move.HealPulse,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ViceGrip,
					9,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					25,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.HyperBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.ShadowBall,
					Move.Facade,
					Move.UTurn,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.Venoshock,
					Move.SmackDown,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BubbleBeam,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Crabhammer,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					57,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterSport,
					7,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					34,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AuraSphere,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AquaJet,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ViceGrip,
					9,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					25,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Surf,
					Move.IceBeam,
					Move.HyperBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.ShadowBall,
					Move.Facade,
					Move.SecretPower,
					Move.Dive,
					Move.UTurn,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.Venoshock,
					Move.SmackDown,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Cut,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.WaterGun,
					Move.Splash,
					Move.AuraSphere,
					Move.DarkPulse,
					Move.DragonPulse,
					Move.HealPulse,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BubbleBeam,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Crabhammer,
					30,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.IronTail,
					Move.HelpingHand,
					Move.Bounce,
					Move.WaterPulse,
					Move.AquaTail,
					Move.DragonPulse,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					53,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WaterSport,
					7,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AuraSphere,
					67,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DarkPulse,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					63,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AquaJet,
					47,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ViceGrip,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					25,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Cut,
					Move.Surf,
					Move.IceBeam,
					Move.HyperBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Waterfall,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.ShadowBall,
					Move.Facade,
					Move.UTurn,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.Venoshock,
					Move.SmackDown,
					Move.SludgeWave,
					Move.Round,
					Move.Scald,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.WaterGun,
					Move.Splash,
					Move.AuraSphere,
					Move.DarkPulse,
					Move.DragonPulse,
					Move.HealPulse,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BubbleBeam,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Crabhammer,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					53,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WaterSport,
					7,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AuraSphere,
					67,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DarkPulse,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					63,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AquaJet,
					47,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					42,
				),
			].flat(),
			[
				{
					ability: Ability.MegaLauncher,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.Clawitzer,
					PokemonFormBits.Default,
					{
						frontDefault: '77e392ec.png',
						frontShiny: 'ea6d1214.png',
					},
					[Type.Water],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Helioptile,
	50,
	190,
	Color.Yellow,
	[EggGroup.Monster, EggGroup.Dragon],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['エリキテル'],
		[Language.Roomaji]: ['Erikiteru'],
		[Language.Ko]: ['목도리키텔'],
		[Language.ZhHant]: ['傘電蜥'],
		[Language.Fr]: ['Galvaran'],
		[Language.De]: ['Eguana'],
		[Language.Es]: ['Helioptile'],
		[Language.It]: ['Helioptile'],
		[Language.En]: ['Helioptile'],
		[Language.Ja]: ['エリキテル'],
		[Language.ZhHans]: ['伞电蜥'],
	},
	{
		[Language.JaHrkt]: ['はつでんポケモン'],
		[Language.Ko]: ['발전포켓몬'],
		[Language.ZhHant]: ['發電寶可夢'],
		[Language.Fr]: ['Pokémon Générateur'],
		[Language.De]: ['Generatoren-Pokémon'],
		[Language.Es]: ['Pokémon Generador'],
		[Language.It]: ['Pokémon Generatore'],
		[Language.En]: ['Generator Pokémon'],
		[Language.Ja]: ['はつでんポケモン'],
		[Language.ZhHans]: ['发电宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'さばくで　せいかつする。たいようの\nひかりを　あびて　はつでんすれば\nエサを　たべなくても　へいきなのだ。',
			'あたまの　りょうわきの　ひだには\nたいようの　ひかりを　あびると\nはつでんする　さいぼうが　あるのだ。',
			'あたまの　ひだを　ひろげ　たいようの\nひかりで　はつでんすると　パワフルな\nでんきわざを　だせるようになる。',
			'たいようはつでんの　しくみを　もつ。\nはつでんを　じゃま　されると\nストレスで　よわってしまう。',
		],
		[Language.Ko]: [
			'사막에서 생활한다. 태양의\n빛을 쬐고 발전하면\n먹이를 먹지 않아도 괜찮다.',
			'머리의 양측 주름에는\n태양의 빛을 쐬면\n발전하는 세포가 있다.',
			'머리에 있는 주름을 펼쳐서\n태양의 빛으로 발전하면 파워풀한\n전기 기술을 쓸 수 있게 된다.',
			'태양광 발전 구조를 가졌다.\n발전을 방해하면\n스트레스를 받아서 약해진다.',
		],
		[Language.Fr]: [
			'Ce Pokémon vit dans le désert.\nIl n’a pas besoin de se nourrir, car il est capable\nd’absorber l’énergie du soleil.',
			'Les plis de peau de chaque côté de sa tête sont\ndotés de cellules produisant de l’électricité quand\nelles sont exposées à la lumière du soleil.',
			'Ce Pokémon vit dans le désert. Il n’a pas besoin de se nourrir,\ncar il est capable d’absorber l’énergie du soleil.',
			'Les plis de peau de chaque côté de sa tête sont dotés\nde cellules produisant de l’électricité quand elles sont\nexposées à la lumière du soleil.',
			'Il absorbe les rayons du soleil en dépliant la peau\nde sa tête pour produire l’électricité nécessaire\nà ses puissantes capacités Électrik.',
			'Il peut générer de l’électricité grâce au soleil.\nSi on le dérange en pleine production d’énergie,\ncela le stresse et l’affaiblit.',
		],
		[Language.De]: [
			'Es ist in der Wüste zu Hause und wandelt\ndie Energie der Sonne in Körperkraft um,\nwodurch es auch ohne Nahrung auskommt.',
			'Die Zellen der Hautlappen, die sich beidseitig an\nseinem Kopf befinden, erzeugen Strom, wenn sie\nvon Sonnenstrahlen beschienen werden.',
			'Es ist in der Wüste zu Hause und wandelt die Energie der\nSonne in Körperkraft um, wodurch es auch ohne Nahrung\nauskommt.',
			'Die Zellen der Hautlappen, die sich beidseitig an seinem Kopf\nbefinden, erzeugen Strom, wenn sie von Sonnenstrahlen\nbeschienen werden.',
			'Es breitet die Hautlappen an seinem Kopf aus,\num mithilfe des Sonnenlichts Strom zu erzeugen\nund mächtige Elektro-Attacken einzusetzen.',
			'Es kann aus Sonnenlicht Elektrizität erzeugen.\nUnterbricht man es jedoch bei diesem Prozess,\nverliert es vor lauter Stress all seine Kraft.',
		],
		[Language.Es]: [
			'Habita en los desiertos y, cuando toma el sol, acumula\nenergía, lo que le permite vivir sin la necesidad de\ningerir alimentos.',
			'Bajo los pliegues situados a ambos lados de la cabeza\nresiden células que, al exponerse a la luz del sol, son\ncapaces de generar electricidad.',
			'Habita en los desiertos y, cuando toma el sol, acumula\nenergía, lo que le permite vivir sin la necesidad de ingerir\nalimentos.',
			'Extiende los pliegues de la cabeza para absorber\nla luz del sol y convertirla en electricidad, con la\nque realiza potentes ataques de tipo Eléctrico.',
			'Es capaz de generar electricidad a partir de la\nluz del sol. Si lo interrumpen en pleno proceso,\nse pone nervioso y pierde las fuerzas.',
		],
		[Language.It]: [
			'Vive nei deserti. Può produrre energia elettrica\nsfruttando la luce solare e, grazie a essa, può\nsopravvivere anche senza mangiare.',
			'Le pieghe ai due lati della testa contengono cellule\nin grado di convertire la luce solare in energia\nelettrica.',
			'Vive nei deserti. Può produrre energia elettrica sfruttando\nla luce solare e, grazie a essa, può sopravvivere anche\nsenza mangiare.',
			'Le pieghe ai due lati della testa contengono cellule in grado\ndi convertire la luce solare in energia elettrica.',
			'Distende le pieghe sulla testa per raccogliere la\nluce solare e produrre energia elettrica che\nusa per sferrare potenti mosse di tipo Elettro.',
			'Possiede un organo con cui genera energia\nelettrica fotovoltaica. Se viene disturbato mentre\nla produce, si stressa e si indebolisce.',
		],
		[Language.En]: [
			'They make their home in deserts. They can\ngenerate their energy from basking in the sun,\nso eating food is not a requirement.',
			'The frills on either side of its head have cells\nthat generate electricity when exposed to sunlight.',
			'When spread, the frills on its head act like solar\npanels, generating the power behind this\nPokémon’s electric moves.',
			'The sun powers this Pokémon’s electricity\ngeneration. Interruption of that process\nstresses Helioptile to the point of weakness.',
		],
		[Language.Ja]: [
			'砂漠で　生活する。\n太陽の　光を　浴びて　発電すれば\nエサを　食べなくても　平気なのだ。',
			'頭の　両わきの　ひだには\n太陽の　光を　浴びると\n発電する　細胞が　あるのだ。',
			'頭の　ひだを　広げ　太陽の\n光で　発電すると　パワフルな\n電気技を　出せるようになる。',
			'太陽発電の　仕組みを　もつ。\n発電を　じゃま　されると\nストレスで　弱ってしまう。',
		],
		[Language.ZhHant]: [
			'當牠張開頭部的褶邊\n用太陽光發電，就能使出\n威力強大的電屬性招式。',
			'擁有太陽能發電的結構。\n如果有人打擾牠發電，\n牠就會因心理壓力而衰弱。',
		],
		[Language.ZhHans]: [
			'当它张开头部的褶边\n用太阳光发电，就能使出\n威力强大的电属性招式。',
			'拥有太阳能发电的结构。\n如果有人打扰它发电，\n它就会因心理压力而衰弱。',
		],
	},
	[
		[
			Variety.Helioptile,
			58,
			5,
			60,
			[Type.Electric, Type.Normal],
			{
				frontDefault: '30fcf2d5.png',
				frontShiny: 'f6bcdb1f.png',
				backDefault: 'e5c4089e.png',
				backShiny: '730050c9.png',
			},
			{
				[Stat.Hp]: {baseStat: 44},
				[Stat.Attack]: {baseStat: 38},
				[Stat.Defense]: {baseStat: 33},
				[Stat.SpecialAttack]: {baseStat: 61},
				[Stat.SpecialDefense]: {baseStat: 43},
				[Stat.Speed]: {baseStat: 70, effort: 1},
			},
			{},
			[
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Pound,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Dig,
					Move.Agility,
					Move.LightScreen,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.RockTomb,
					Move.UTurn,
					Move.DarkPulse,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Round,
					Move.VoltSwitch,
					Move.Bulldoze,
					Move.WildCharge,
					Move.ElectricTerrain,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ThunderShock,
					8,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Thunderbolt,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Thunder,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					12,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Swift,
					Move.Endure,
					Move.ElectroBall,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Glare,
					Move.DragonTail,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronTail,
					Move.Electroweb,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Charge,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Egg,
					Move.DragonRush,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.VoltSwitch,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ParabolicCharge,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Electrify,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ScaleShot,
					Move.RisingVoltage,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Pound,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					22,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.LightScreen,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.RockTomb,
					Move.UTurn,
					Move.DarkPulse,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Round,
					Move.VoltSwitch,
					Move.Bulldoze,
					Move.DragonTail,
					Move.WildCharge,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ThunderShock,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Thunderbolt,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					31,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.PsychUp,
					Move.ChargeBeam,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Agility,
					Move.Glare,
					Move.ElectricTerrain,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					17,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.AllySwitch,
					Move.Electroweb,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Charge,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Egg,
					Move.Camouflage,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.SignalBeam,
					Move.ShockWave,
					Move.MagnetRise,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.VoltSwitch,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ParabolicCharge,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Electrify,
					45,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.TailWhip,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					22,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Toxic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.PsychUp,
					Move.Facade,
					Move.RockTomb,
					Move.UTurn,
					Move.DarkPulse,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.LowSweep,
					Move.Round,
					Move.VoltSwitch,
					Move.Bulldoze,
					Move.DragonTail,
					Move.WildCharge,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ThunderShock,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Thunderbolt,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					31,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Agility,
					Move.Glare,
					Move.Camouflage,
					Move.ElectricTerrain,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					17,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Charge,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.VoltSwitch,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ParabolicCharge,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Electrify,
					45,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.TailWhip,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					22,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Flash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.PsychUp,
					Move.Facade,
					Move.SecretPower,
					Move.RockTomb,
					Move.UTurn,
					Move.DarkPulse,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.LowSweep,
					Move.Round,
					Move.VoltSwitch,
					Move.Bulldoze,
					Move.DragonTail,
					Move.WildCharge,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ThunderShock,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Thunderbolt,
					49,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					31,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Agility,
					Move.Glare,
					Move.Camouflage,
					Move.ElectricTerrain,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					17,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.SignalBeam,
					Move.ShockWave,
					Move.MagnetRise,
					Move.Electroweb,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Charge,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.VoltSwitch,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ParabolicCharge,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Electrify,
					45,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.TailWhip,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					22,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Surf,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Flash,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.PsychUp,
					Move.Facade,
					Move.RockTomb,
					Move.UTurn,
					Move.DarkPulse,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.LowSweep,
					Move.Round,
					Move.VoltSwitch,
					Move.Bulldoze,
					Move.DragonTail,
					Move.WildCharge,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ThunderShock,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Thunderbolt,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					31,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Agility,
					Move.Glare,
					Move.Camouflage,
					Move.ElectricTerrain,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MudSlap,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Charge,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.VoltSwitch,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bulldoze,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ParabolicCharge,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Electrify,
					45,
				),
			].flat(),
			[
				{
					ability: Ability.DrySkin,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.SandVeil,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.SolarPower,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Helioptile,
					PokemonFormBits.Default,
					{
						frontDefault: '30fcf2d5.png',
						frontShiny: 'f6bcdb1f.png',
						backDefault: 'e5c4089e.png',
						backShiny: '730050c9.png',
					},
					[Type.Electric, Type.Normal],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Heliolisk,
	50,
	75,
	Color.Yellow,
	[EggGroup.Monster, EggGroup.Dragon],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['エレザード'],
		[Language.Roomaji]: ['Elezard'],
		[Language.Ko]: ['일레도리자드'],
		[Language.ZhHant]: ['光電傘蜥'],
		[Language.Fr]: ['Iguolta'],
		[Language.De]: ['Elezard'],
		[Language.Es]: ['Heliolisk'],
		[Language.It]: ['Heliolisk'],
		[Language.En]: ['Heliolisk'],
		[Language.Ja]: ['エレザード'],
		[Language.ZhHans]: ['光电伞蜥'],
	},
	{
		[Language.JaHrkt]: ['はつでんポケモン'],
		[Language.Ko]: ['발전포켓몬'],
		[Language.ZhHant]: ['發電寶可夢'],
		[Language.Fr]: ['Pokémon Générateur'],
		[Language.De]: ['Generatoren-Pokémon'],
		[Language.Es]: ['Pokémon Generador'],
		[Language.It]: ['Pokémon Generatore'],
		[Language.En]: ['Generator Pokémon'],
		[Language.Ja]: ['はつでんポケモン'],
		[Language.ZhHans]: ['发电宝可梦'],
	},
	{
		[Language.Fr]: [
			'L’électricité que produit un seul Iguolta en agitant\nsa collerette suffit à alimenter un immeuble entier.',
			'Il augmente sa puissance motrice en stimulant les\nmuscles de ses pattes avec des décharges\nélectriques. Il peut ainsi parcourir 100 m en 5 s.',
			'Il augmente sa puissance motrice en stimulant les muscles\nde ses pattes avec des décharges électriques. Il peut ainsi\nparcourir 100 m en 5 s.',
			'Il était révéré dans un royaume des sables\naujourd’hui disparu. Il est arrivé à Galar\ndans une cargaison de pierres précieuses.',
			'Lorsqu’il déploie sa collerette pour emmagasiner\nla lumière du soleil, il génère à lui seul assez\nd’électricité pour alimenter une grande ville.',
		],
		[Language.JaHrkt]: [
			'エリマキを　ひろげて　はつでんする。\nエレザード　１ぴきで　こうそうビルで\nひつような　でんきを　つくれるのだ。',
			'でんきで　きんにくを　しげきすると\n１００メートルを　５びょうで　はしる\nきゃくりょくに　パワーアップする。',
			'かつて　ほろびた　さばくの　くにで\nだいじに　されていた。　ざいほうと\nともに　ガラルちほうへ　やってきた。',
			'えりまきを　ひろげて　たいようこうを\nあびると　だいとかいで　つかわれる\nでんきを　１ぴきで　はつでんする。',
		],
		[Language.Ko]: [
			'목의 깃을 펼쳐 발전한다.\n일레도리자드 1마리로 고층 빌딩에\n필요한 전기를 만들어 낼 수 있다.',
			'전기로 근육을 자극하면\n100m를 5초 만에 달리는\n다릿심으로 파워가 올라간다.',
			'과거에 멸망한 사막 나라에서\n소중하게 여겼었다. 보물과 함께\n가라르지방에 오게 됐다.',
			'깃을 펼쳐 태양광을 받으면\n대도시에서 사용할 수 있는\n전기를 혼자서 발전한다.',
		],
		[Language.De]: [
			'Die Strommenge, die ein Elezard mit ausgebreiteten\nHautlappen durch Umwandlung von Sonnenstrahlen\nerzeugt, genügt zur Versorgung eines Wolkenkratzers.',
			'Es stimuliert seine Beinmuskulatur mit Strom,\nwodurch es ihm gelingt, 100 m in fünf Sekunden\nzurückzulegen.',
			'Die Strommenge, die ein Elezard mit ausgebreiteten\nHautlappen durch Umwandlung von Sonnenstrahlen erzeugt,\ngenügt zur Versorgung eines Wolkenkratzers.',
			'Es stimuliert seine Beinmuskulatur mit Strom, wodurch es ihm\ngelingt, 100 m in fünf Sekunden zurückzulegen.',
			'Es wurde in einem Wüstenreich, das vor langer\nZeit unterging, sehr respektiert. Zusammen mit\ndessen Schätzen gelangte es in die Galar-Region.',
			'Stellt es seine kragenartigen Hautlappen auf und\nabsorbiert damit Sonnenlicht, kann ein Elezard\ngenug Strom für eine Großstadt produzieren.',
		],
		[Language.Es]: [
			'Extiende su gorguera y genera energía eléctrica\nsuficiente para cubrir el consumo de electricidad de\nun rascacielos entero.',
			'Si estimula sus músculos a base de electricidad, sus\npiernas alcanzan una potencia tal que puede recorrer\n100 metros en apenas cinco segundos.',
			'Extiende su gorguera y genera energía eléctrica suficiente\npara cubrir el consumo de electricidad de un rascacielos\nentero.',
			'Si estimula sus músculos a base de electricidad, sus piernas\nalcanzan una potencia tal que puede recorrer 100 metros en\napenas cinco segundos.',
			'Venerado por una antigua civilización del\ndesierto, ahora desaparecida, llegó a Galar\njunto a sus tesoros y reliquias.',
			'Al extender su gorguera y exponerse a la luz\nsolar, genera la energía eléctrica suficiente para\ncubrir el consumo de una metrópoli entera.',
		],
		[Language.It]: [
			'Può produrre energia elettrica aprendo il collare. Un\nsolo Pokémon di questa specie sarebbe in grado di\nilluminare un intero grattacielo.',
			'Stimolando i suoi muscoli con l’elettricità riesce\na percorrere 100 m in 5 secondi.',
			'Può produrre energia elettrica aprendo il collare. Un solo\nPokémon di questa specie sarebbe in grado di illuminare\nun intero grattacielo.',
			'Stimolando i suoi muscoli con l’elettricità riesce a percorrere\n100 m in 5 secondi.',
			'Un tempo era tenuto in grande considerazione\nin un paese desertico ormai scomparso. È giunto\na Galar in casse contenenti tesori.',
			'L’energia prodotta da un Heliolisk quando apre\nil suo collare in un luogo soleggiato è sufficiente\na soddisfare il fabbisogno di una metropoli.',
		],
		[Language.En]: [
			'They flare their frills and generate energy.\nA single Heliolisk can generate sufficient\nelectricity to power a skyscraper.',
			'It stimulates its muscles with electricity,\nboosting the strength in its legs and enabling\nit to run 100 yards in five seconds.',
			'A now-vanished desert culture treasured these\nPokémon. Appropriately, when Heliolisk came to\nthe Galar region, treasure came with them.',
			'One Heliolisk basking in the sun with its frill\noutspread is all it would take to produce enough\nelectricity to power a city.',
		],
		[Language.Ja]: [
			'エリマキを　広げて　発電する。\nエレザード　１匹で　高層ビルで\n必要な　電気を　作れるのだ。',
			'電気で　筋肉を　刺激すると\n１００メートルを　５秒で　走る\n脚力に　パワーアップする。',
			'かつて　滅びた　砂漠の　国で\n大事に　されていた。　財宝と\nともに　ガラル地方へ　やってきた。',
			'襟巻を　広げて　太陽光を\n浴びると　大都会で　使われる\n電気を　１匹で　発電する。',
		],
		[Language.ZhHant]: [
			'在如今已滅亡的沙漠之國\n曾經是人們珍視的對象。\n和財寶一起來到了伽勒爾地區。',
			'如果展開頸傘沐浴陽光，\n單憑１隻光電傘蜥就能\n製造出大城市所需的電力。',
		],
		[Language.ZhHans]: [
			'在如今已灭亡的沙漠之国\n曾经是人们珍视的对象。\n和财宝一起来到了伽勒尔地区。',
			'如果展开颈伞沐浴阳光，\n单凭１只光电伞蜥就能\n制造出大城市所需的电力。',
		],
	},
	[
		[
			Variety.Heliolisk,
			168,
			10,
			210,
			[Type.Electric, Type.Normal],
			{
				frontDefault: 'dd761495.png',
				frontShiny: '8b6657a9.png',
			},
			{
				[Stat.Hp]: {baseStat: 62},
				[Stat.Attack]: {baseStat: 55},
				[Stat.Defense]: {baseStat: 52},
				[Stat.SpecialAttack]: {baseStat: 109, effort: 1},
				[Stat.SpecialDefense]: {baseStat: 94},
				[Stat.Speed]: {baseStat: 109, effort: 1},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Pound,
					Move.TailWhip,
					Move.ThunderShock,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.MudSlap,
					Move.Discharge,
					Move.VoltSwitch,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.MegaPunch,
					Move.MegaKick,
					Move.SolarBeam,
					Move.Agility,
					Move.Swift,
					Move.Endure,
					Move.SunnyDay,
					Move.WeatherBall,
					Move.ElectroBall,
					Move.EerieImpulse,
					Move.ElectricTerrain,
					Move.BreakingSwipe,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.Snore,
					Move.IronTail,
					Move.HyperVoice,
					Move.DragonPulse,
					Move.Electroweb,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Dig,
					Move.LightScreen,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.RockTomb,
					Move.UTurn,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Round,
					Move.VoltSwitch,
					Move.Bulldoze,
					Move.WildCharge,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Thunder,
					Move.QuickAttack,
					Move.Charge,
					Move.ParabolicCharge,
					Move.Electrify,
					Move.EerieImpulse,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ScaleShot,
					Move.RisingVoltage,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.Snore,
					Move.IronTail,
					Move.HyperVoice,
					Move.DragonPulse,
					Move.AllySwitch,
					Move.Electroweb,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.LightScreen,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.RockTomb,
					Move.UTurn,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Round,
					Move.VoltSwitch,
					Move.Bulldoze,
					Move.WildCharge,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Thunder,
					Move.QuickAttack,
					Move.Charge,
					Move.ParabolicCharge,
					Move.Electrify,
					Move.EerieImpulse,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.PsychUp,
					Move.ChargeBeam,
					Move.DragonTail,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.SignalBeam,
					Move.ShockWave,
					Move.MagnetRise,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.RazorWind,
					Move.Thunder,
					Move.QuickAttack,
					Move.Charge,
					Move.ParabolicCharge,
					Move.Electrify,
					Move.EerieImpulse,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Toxic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.PsychUp,
					Move.Facade,
					Move.RockTomb,
					Move.UTurn,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.LowSweep,
					Move.Round,
					Move.VoltSwitch,
					Move.Bulldoze,
					Move.DragonTail,
					Move.WildCharge,
					Move.Confide,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.Snore,
					Move.IronTail,
					Move.HyperVoice,
					Move.SignalBeam,
					Move.ShockWave,
					Move.MagnetRise,
					Move.DragonPulse,
					Move.Electroweb,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.RazorWind,
					Move.Thunder,
					Move.QuickAttack,
					Move.Charge,
					Move.ParabolicCharge,
					Move.Electrify,
					Move.EerieImpulse,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Flash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.PsychUp,
					Move.Facade,
					Move.SecretPower,
					Move.RockTomb,
					Move.UTurn,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.LowSweep,
					Move.Round,
					Move.VoltSwitch,
					Move.Bulldoze,
					Move.DragonTail,
					Move.WildCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.RazorWind,
					Move.Thunder,
					Move.QuickAttack,
					Move.Charge,
					Move.ParabolicCharge,
					Move.Electrify,
					Move.EerieImpulse,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Surf,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Flash,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.PsychUp,
					Move.Facade,
					Move.RockTomb,
					Move.UTurn,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.LowSweep,
					Move.Round,
					Move.VoltSwitch,
					Move.Bulldoze,
					Move.DragonTail,
					Move.WildCharge,
					Move.Confide,
				),
			].flat(),
			[
				{
					ability: Ability.DrySkin,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.SandVeil,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.SolarPower,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Heliolisk,
					PokemonFormBits.Default,
					{
						frontDefault: 'dd761495.png',
						frontShiny: '8b6657a9.png',
					},
					[Type.Electric, Type.Normal],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Tyrunt,
	50,
	45,
	Color.Brown,
	[EggGroup.Monster, EggGroup.Dragon],
	1,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	30,
	GrowthRate.Medium,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['チゴラス'],
		[Language.Roomaji]: ['Chigoras'],
		[Language.Ko]: ['티고라스'],
		[Language.ZhHant]: ['寶寶暴龍'],
		[Language.Fr]: ['Ptyranidur'],
		[Language.De]: ['Balgoras'],
		[Language.Es]: ['Tyrunt'],
		[Language.It]: ['Tyrunt'],
		[Language.En]: ['Tyrunt'],
		[Language.Ja]: ['チゴラス'],
		[Language.ZhHans]: ['宝宝暴龙'],
	},
	{
		[Language.JaHrkt]: ['ようくんポケモン'],
		[Language.Ko]: ['유군포켓몬'],
		[Language.ZhHant]: ['幼君寶可夢'],
		[Language.Fr]: ['Pokémon Prince'],
		[Language.De]: ['Kronprinz-Pokémon'],
		[Language.Es]: ['Pokémon Heredero'],
		[Language.It]: ['Pokémon Principino'],
		[Language.En]: ['Royal Heir Pokémon'],
		[Language.Ja]: ['ようくんポケモン'],
		[Language.ZhHans]: ['幼君宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'かせきから　ふっかつした　ポケモン。\nきにいらない　ことが　あると\nかんしゃくを　おこして　おおあばれ。',
			'じどうしゃを　バリバリと　かじって\nこわす　おおあごの　はかいりょく。\n１おくねんまえに　せいそくしていた。',
			'おおアゴは　すさまじい　はかいりょく。\nふくげんさせても　とうじと　おなじ\nすがたでは　ないという　せつもある。',
			'あまえんぼうで　わがまま。　チゴラスは\nじゃれているつもりでも　あいては\nおおけがでは　すまないことも　ある。',
			'よみがえった　こだいの　ポケモン。\nきしょうは　あらく　みがって。\nおおあごで　なんでも　かみくだく。',
			'わがままだが　あまえんぼう。\nじゃれてるだけで　トレーナーに\nおおけがを　おわせてしまう。',
		],
		[Language.Ko]: [
			'화석에서 부활한 포켓몬이다.\n마음에 들지 않는 일이 있으면\n짜증을 내며 난동을 부린다.',
			'큰 턱은 자동차를 아드득아드득 갉아서\n부서뜨리는 파괴력을 가졌다\n1억 년 전에 서식하고 있었다.',
			'큰 턱은 자동차를 아드득아드득 갉아서\n부서뜨리는 파괴력을 가졌다.\n1억 년 전에 서식하고 있었다.',
			'큰 턱은 무시무시한 파괴력을\n지녔다. 복원시켜도 당시와\n같은 모습은 아니라는 설도 있다.',
			'응석받이에 제멋대로다. 티고라스는\n장난으로 한 일이라도 상대는\n큰 부상으로 끝나지 않을 때도 있다.',
			'되살아난 고대의 포켓몬이다.\n거칠고 제멋대로인 기질을 지녔다.\n큰 턱으로 뭐든지 깨물어 부순다.',
			'제멋대로지만 응석꾸러기다.\n장난만 쳐도 트레이너에게\n큰 상처를 입히고 만다.',
		],
		[Language.Fr]: [
			'Ramené à la vie à partir d’un fossile, ce Pokémon très\ncapricieux devient violent à la moindre contrariété.',
			'Ses énormes mâchoires ont tant de puissance qu’elles\npeuvent compresser une voiture sans problème.\nCe Pokémon vivait il y a 100 millions d’années.',
			'Ses énormes mâchoires ont tant de puissance qu’elles peuvent\ncompresser une voiture sans problème. Ce Pokémon vivait\nil y a 100 millions d’années.',
			'Sa mâchoire géante est d’une puissance\nredoutable. Le Pokémon reconstitué serait\nlégèrement différent de son modèle antique.',
			'Il est un peu égoïste et aime être le centre\nd’attention. Il arrive que ses partenaires de jeu\nfinissent avec de graves blessures.',
			'Ce Pokémon ancien a été ranimé à partir\nd’un fossile. Égoïste et violent, il peut détruire\nn’importe quoi avec son énorme mâchoire.',
			'Capricieux, il veut toujours être le centre\nde l’attention. Il peut gravement blesser\nson Dresseur en essayant de jouer avec lui.',
		],
		[Language.De]: [
			'Dieses Pokémon wurde aus einem Fossil neu belebt.\nMissfällt ihm etwas, rastet es vollkommen aus.',
			'Mit seinem gewaltigen Kiefer kann dieses Pokémon,\ndas vor 100 Millionen Jahren lebte, ein Auto so leicht\nzermalmen, als wäre es ein reifer Apfel.',
			'Mit seinem gewaltigen Kiefer kann dieses Pokémon, das vor\n100 Millionen Jahren lebte, ein Auto so leicht zermalmen,\nals wäre es ein reifer Apfel.',
			'Sein riesiger Kiefer birgt zerstörerische Kräfte.\nEs heißt, zurückverwandelte Balgoras seien\nnicht identisch mit den ursprünglichen Pokémon.',
			'Es ist verwöhnt und trotzig. Wer es mit ihm zu\ntun hat, muss eventuell mit mehr als schweren\nWunden rechnen, selbst wenn es nur spielen will.',
			'Ein wiederbelebtes Pokémon aus der Urzeit.\nEs ist gewalttätig sowie egoistisch und zerbeißt\nalles mit seinem riesigen Kiefer.',
			'Es ist eigennützig und verzogen. Selbst wenn\nBalgoras nur spielen will, verletzt es dabei seinen\nTrainer manchmal schwer.',
		],
		[Language.Es]: [
			'Pokémon recreado a partir de fósiles. Cuando sucede\nalgo que no es de su agrado, se enfurece y se vuelve\nviolento.',
			'Su gran mandíbula posee una potencia tan atroz que\nsería capaz de destruir a bocados un coche. Ya vivía\nhace la friolera de 100 millones de años.',
			'Pokémon recreado a partir de fósiles. Cuando sucede algo\nque no es de su agrado, se enfurece y se vuelve violento.',
			'Su gran mandíbula posee una potencia tan atroz que sería\ncapaz de destruir a bocados un coche. Ya vivía hace la friolera\nde 100 millones de años.',
			'Puede ejercer una enorme presión con su gran\nmandíbula. Se cree que esta especie regenerada\na partir de un fósil difiere de la de tiempo ha.',
			'Un tanto egoísta y malcriado. Aunque solo esté\nbromeando, a veces puede causar graves\nheridas a sus compañeros de juegos.',
			'Pokémon prehistórico recreado a partir de un\nfósil. De carácter violento y egoísta, sus enormes\nmandíbulas pueden triturar cualquier cosa.',
			'Un Pokémon un tanto egoísta y malcriado. Puede\nocasionar graves lesiones a su Entrenador incluso\njugando.',
		],
		[Language.It]: [
			'Pokémon risvegliatosi da un fossile.\nSe viene disturbato, si infuria e provoca disastri.',
			'Questo Pokémon visse 100 milioni di anni fa.\nGrazie alle fauci tremendamente forti, potrebbe\nmasticare un’automobile senza sforzo.',
			'Pokémon risvegliatosi da un fossile. Se viene disturbato,\nsi infuria e provoca disastri.',
			'Questo Pokémon visse 100 milioni di anni fa. Grazie alle fauci\ntremendamente forti, potrebbe masticare un’automobile\nsenza sforzo.',
			'La sua mandibola ha un’enorme forza\ndistruttrice. Secondo alcuni il suo aspetto\noriginale è un po’ diverso da quello rigenerato.',
			'È capriccioso e ama farsi coccolare.\nAnche se non lo fa di proposito, può ferire\ngravemente il suo compagno di giochi.',
			'Un antico Pokémon rigenerato da un fossile.\nHa un’indole violenta ed egoista. Con la sua\nenorme mandibola fa a pezzi qualsiasi cosa.',
			'È capriccioso e ama farsi coccolare.\nQuando gioca con il suo Allenatore,\nrischia di ferirlo gravemente.',
		],
		[Language.En]: [
			'This Pokémon was restored from a fossil.\nIf something happens that it doesn’t like,\nit throws a tantrum and runs wild.',
			'Its immense jaws have enough destructive\nforce that it can chew up an automobile.\nIt lived 100 million years ago.',
			'Its large jaw has incredible destructive power.\nSome theories suggest that its restored form is\ndifferent from its form of long ago.',
			'Tyrunt is spoiled and selfish. It may just be\ntrying to frolic, but sometimes the ones it’s\ntrying to frolic with are gravely injured.',
			'This is an ancient Pokémon, revived in modern\ntimes. It has a violent disposition, and it’ll tear\napart anything it gets between its hefty jaws.',
			'This Pokémon is selfish and likes to be pampered.\nIt can also inflict grievous wounds on its Trainer\njust by playing around.',
		],
		[Language.Ja]: [
			'化石から　復活した　ポケモン。\n気に入らない　ことが　あると\nかんしゃくを　起こして　大暴れ。',
			'自動車を　バリバリと　かじって\n壊す　おおあごの　破壊力。\n１億年前に　生息していた。',
			'大アゴは　凄まじい　破壊力。\n復元させても　当時と　同じ\n姿では　ないという　説もある。',
			'甘えんぼうで　わがまま。　チゴラスは\nじゃれているつもりでも　相手は\n大怪我では　済まないことも　ある。',
			'蘇った　古代の　ポケモン。\n気性は　荒く　身勝手。\n大顎で　なんでも　かみ砕く。',
			'わがままだが　甘えん坊。\nじゃれてるだけで　トレーナーに\n大けがを　負わせてしまう。',
		],
		[Language.ZhHant]: [
			'大顎有著非常驚人的破壞力。\n也有一種說法是，即使將牠復原，\n也無法重現牠原本的樣子。',
			'愛撒嬌又任性。有時候\n即使寶寶暴龍只是想鬧著玩，\n對手也會受到重創。',
			'復活的古代寶可夢。\n性情粗暴又任性。\n能用大顎咬碎任何東西。',
			'任性且愛撒嬌。\n即使牠只是鬧著玩，\n也會讓訓練家受到重傷。',
		],
		[Language.ZhHans]: [
			'大颚有着非常惊人的破坏力。\n有说法，即使复原，\n也没法恢复到原本的样子。',
			'爱撒娇又任性。有时候，\n即使宝宝暴龙只打算逗着玩，\n对方也会严重受伤。',
			'复活而来的古代宝可梦。\n性格既粗野又任性，\n能用大颚咬碎任何东西。',
			'又任性又爱撒娇。\n即使它只是闹着玩，\n也会让训练家受重伤。',
		],
	},
	[
		[
			Variety.Tyrunt,
			72,
			8,
			260,
			[Type.Rock, Type.Dragon],
			{
				frontDefault: '0ce36039.png',
				frontShiny: 'fc00c336.png',
			},
			{
				[Stat.Hp]: {baseStat: 58},
				[Stat.Attack]: {baseStat: 89, effort: 1},
				[Stat.Defense]: {baseStat: 77},
				[Stat.SpecialAttack]: {baseStat: 45},
				[Stat.SpecialDefense]: {baseStat: 45},
				[Stat.Speed]: {baseStat: 48},
			},
			{},
			[
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HornDrill,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.ScaryFace,
					Move.Endure,
					Move.Charm,
					Move.Crunch,
					Move.RockBlast,
					Move.CloseCombat,
					Move.Assurance,
					Move.PlayRough,
					Move.PsychicFangs,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Thrash,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Roar,
					4,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Egg,
					Move.RockThrow,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					44,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Earthquake,
					Move.Dig,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.DragonClaw,
					Move.DragonDance,
					Move.DarkPulse,
					Move.ThunderFang,
					Move.IceFang,
					Move.FireFang,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.RockSlide,
					28,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.IronDefense,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.StealthRock,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Curse,
					Move.PoisonFang,
					Move.RockPolish,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					8,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonClaw,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonTail,
					20,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ScaleShot,
					Move.MeteorBeam,
					Move.LashOut,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HornDrill,
					49,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Thrash,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Roar,
					6,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.AerialAce,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					44,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.DragonClaw,
					Move.RockPolish,
					Move.DarkPulse,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					12,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.IronDefense,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.DracoMeteor,
					Move.IronHead,
					Move.StealthRock,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Curse,
					Move.PoisonFang,
					Move.DragonDance,
					Move.RockPolish,
					Move.ThunderFang,
					Move.IceFang,
					Move.FireFang,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Tutor,
					Move.Block,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonClaw,
					37,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonTail,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HornDrill,
					49,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Thrash,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					17,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Roar,
					6,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.RockPolish,
					Move.DarkPulse,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					12,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Curse,
					Move.PoisonFang,
					Move.DragonDance,
					Move.RockPolish,
					Move.ThunderFang,
					Move.IceFang,
					Move.FireFang,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					34,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonClaw,
					37,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonTail,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HornDrill,
					49,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Thrash,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					17,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Roar,
					6,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.SecretPower,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.RockPolish,
					Move.DarkPulse,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Strength,
					Move.RockSmash,
					Move.HoneClaws,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					44,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					12,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.IronDefense,
					Move.Block,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.DracoMeteor,
					Move.IronHead,
					Move.StealthRock,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Curse,
					Move.PoisonFang,
					Move.DragonDance,
					Move.RockPolish,
					Move.ThunderFang,
					Move.IceFang,
					Move.FireFang,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					34,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonClaw,
					37,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonTail,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HornDrill,
					49,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Thrash,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Roar,
					6,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Strength,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.RockSmash,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.RockPolish,
					Move.DarkPulse,
					Move.StoneEdge,
					Move.HoneClaws,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					12,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Curse,
					Move.PoisonFang,
					Move.DragonDance,
					Move.RockPolish,
					Move.ThunderFang,
					Move.IceFang,
					Move.FireFang,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonClaw,
					37,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonTail,
					30,
				),
			].flat(),
			[
				{
					ability: Ability.StrongJaw,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Sturdy,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Tyrunt,
					PokemonFormBits.Default,
					{
						frontDefault: '0ce36039.png',
						frontShiny: 'fc00c336.png',
					},
					[Type.Rock, Type.Dragon],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Tyrantrum,
	50,
	45,
	Color.Red,
	[EggGroup.Monster, EggGroup.Dragon],
	1,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	30,
	GrowthRate.Medium,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['ガチゴラス'],
		[Language.Roomaji]: ['Gachigoras'],
		[Language.Ko]: ['견고라스'],
		[Language.ZhHant]: ['怪顎龍'],
		[Language.Fr]: ['Rexillius'],
		[Language.De]: ['Monargoras'],
		[Language.Es]: ['Tyrantrum'],
		[Language.It]: ['Tyrantrum'],
		[Language.En]: ['Tyrantrum'],
		[Language.Ja]: ['ガチゴラス'],
		[Language.ZhHans]: ['怪颚龙'],
	},
	{
		[Language.JaHrkt]: ['ぼうくんポケモン'],
		[Language.Ko]: ['폭군포켓몬'],
		[Language.ZhHant]: ['暴君寶可夢'],
		[Language.Fr]: ['Pokémon Tyran'],
		[Language.De]: ['Tyrannen-Pokémon'],
		[Language.Es]: ['Pokémon Tirano'],
		[Language.It]: ['Pokémon Tiranno'],
		[Language.En]: ['Despot Pokémon'],
		[Language.Ja]: ['ぼうくんポケモン'],
		[Language.ZhHans]: ['暴君宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'ぶあつい　てっぱんを　かみのように\nかみちぎる　おおあごで　こだいの\nせかいでは　むてきを　ほこった。',
			'１おくねんまえの　せかいでは\nむてきを　ほこり　おうさまのように\nふるまっていた　ポケモンだ。',
			'かんぜんな　ふくげんは　ふかのうで\nじつは　ぜんしんに　うもうの　ような\nけが　あるのではという　せつがある。',
			'こだいの　おうじゃ。　おおアゴの\nちからは　すさまじく　じどうしゃも\nかんたんに　かみちぎってしまう。',
			'やく１おくねんまえの　ポケモン。\nきょうぼうだが　どうどうとした\nふるまいは　おうじゃの　ふうかく。',
			'おおあごは　ひとかみするだけで\nじどうしゃも　こなごなに　する。\nこだいの　せかいの　おうじゃ。',
		],
		[Language.Ko]: [
			'두꺼운 철판을 종잇장처럼\n물어뜯는 커다란 턱 덕분에\n고대 세계에서는 무적이었다.',
			'1억 년 전 세계에서는\n무적을 뽐내며 왕처럼\n행동하던 포켓몬이다.',
			'완전한 복원은 불가능해서\n사실은 전신에 깃털 같은\n털이 있을 것이라는 설도 있다.',
			'고대의 왕. 큰 턱은\n힘이 엄청나서 자동차도\n간단하게 물어뜯어 버린다.',
			'약 1억 년 전의 포켓몬이다.\n난폭하지만 당당하게 행동하는 모습은\n마치 왕의 품격을 지닌 듯하다.',
			'큰 턱은 살짝 물기만 해도\n자동차를 산산조각 낸다.\n고대 세계의 왕이다.',
		],
		[Language.Fr]: [
			'Dans les temps anciens, aucun Pokémon ne pouvait\nrivaliser avec lui. Ses puissantes mâchoires peuvent\nréduire une épaisse plaque de métal en confettis.',
			'Il y a 100 millions d’années, ce Pokémon régnait en\nmaître absolu. Personne ne pouvait se mesurer à lui.',
			'La reconstitution de Pokémon est un art\nimparfait. D’aucuns pensent même qu’il était en\nfait couvert d’une robe semblable à un plumage.',
			'Il régnait sur le monde en maître incontesté.\nSa mâchoire est si puissante qu’il n’a aucun\nmal à croquer une voiture.',
			'Ce Pokémon a vécu il y a 100 millions d’années.\nIl est très violent, mais sa contenance noble lui\ndonne des airs de royauté.',
			'Ce Pokémon peut réduire une voiture en miettes\nd’un seul coup de mâchoire. Il était considéré\ncomme le roi du monde préhistorique.',
		],
		[Language.De]: [
			'Aufgrund der Zerstörungskraft seines Kiefers,\nder Stahl zerreißen kann, als wäre es Papier,\ngalt es in seiner Zeit als unbesiegbar.',
			'Vor 100 Millionen Jahren gab es niemanden, der sich\nmit ihm hätte messen können, weshalb sich dieses\nPokémon wie ein König verhielt.',
			'Aufgrund der Zerstörungskraft seines Kiefers, der Stahl\nzerreißen kann, als wäre es Papier, galt es in seiner Zeit\nals unbesiegbar.',
			'Vor 100 Millionen Jahren gab es niemanden, der sich mit ihm\nhätte messen können, weshalb sich dieses Pokémon wie ein\nKönig verhielt.',
			'Es kann nicht originalgetreu aus Fossilien\nzurückverwandelt werden. Theorien zufolge\numgab seinen Körper einst eine Art Federkleid.',
			'Ein urzeitlicher Regent. Mit seinem extrem\nstarken Kiefer kann Monargoras selbst Autos\nspielend leicht durchbeißen.',
			'Es lebte vor 100 Millionen Jahren. Sein brutales,\naber imposantes Verhalten verleiht ihm eine\nkönigliche Ausstrahlung.',
			'Ein Biss seines starken Kiefers reicht, um ein Auto\nzu zermalmen. Dieses Pokémon war der Regent\nder Urzeit.',
		],
		[Language.Es]: [
			'En el mundo antiguo en el que habitaba no tenía\nrivales gracias a sus mandíbulas, con las que podría\ndespedazar con facilidad gruesas placas de acero.',
			'Hace 100 millones de años, este Pokémon se\ncomportaba como un rey, sin nadie que osase\nhacerle frente.',
			'En el mundo antiguo en el que habitaba no tenía rivales\ngracias a sus mandíbulas, con las que podría despedazar\ncon facilidad gruesas placas de acero.',
			'Hace 100 millones de años, este Pokémon se comportaba\ncomo un rey, sin nadie que osase hacerle frente.',
			'Según algunas teorías, este Pokémon no es una\nrecreación exacta del de épocas pasadas, ya\nque debería estar recubierto de plumas.',
			'Antaño era considerado un rey indiscutible. El\nbrutal poder de su mandíbula le permite triturar\nun coche con suma facilidad.',
			'Este Pokémon vivió hace cien millones de años.\nA pesar de su ferocidad, posee una firmeza y una\npresencia dignas de un rey.',
			'Puede hacer trizas un coche de un solo mordisco\ngracias a sus potentes mandíbulas. Antaño era\nconsiderado un rey.',
		],
		[Language.It]: [
			'Grazie alle enormi fauci, che gli permettevano di\nmasticare una lastra di metallo come se fosse carta,\nera il più forte dei Pokémon preistorici.',
			'Nell’era preistorica era il fiero re incontrastato\ndi tutti i Pokémon.',
			'Grazie alle enormi fauci, che gli permettevano di masticare\nuna lastra di metallo come se fosse carta, era il più forte\ndei Pokémon preistorici.',
			'Nell’era preistorica era il fiero re incontrastato di tutti\ni Pokémon.',
			'Sembra che non si riesca a rigenerarlo alla\nperfezione. Secondo alcune teorie il suo corpo\nera ricoperto da un manto simile a un piumaggio.',
			'Regnava incontrastato nell’era preistorica.\nLa sua enorme mandibola è così potente che\npuò masticare facilmente anche un’automobile.',
			'Questo Pokémon è esistito 100 milioni d’anni fa.\nÈ molto feroce, ma il suo atteggiamento solenne\nrivela una personalità degna di un re.',
			'Grazie alla sua mandibola può ridurre in frantumi\nun’auto con un morso solo. Regnava incontrastato\nnell’era preistorica.',
		],
		[Language.En]: [
			'Thanks to its gargantuan jaws, which could shred\nthick metal plates as if they were paper, it was\ninvincible in the ancient world it once inhabited.',
			'Nothing could stop this Pokémon\n100 million years ago,\nso it behaved like a king.',
			'Complete restoration is impossible, allowing\nroom for theories that its entire body was\nonce covered in a feather-like coat.',
			'The king of the ancient world, it can easily\ncrunch a car with the devastating strength\nof its enormous jaws.',
			'This Pokémon is from about 100,000,000\nyears ago. It has the presence of a king, vicious\nbut magnificent.',
			'A single bite of Tyrantrum’s massive jaws will\ndemolish a car. This Pokémon was the king of the\nancient world.',
		],
		[Language.Ja]: [
			'分厚い　鉄板を　紙のように\nかみちぎる　おおあごで　古代の\n世界では　無敵を　誇った。',
			'１億年前の　世界では\n無敵を　ほこり　王様のように\nふるまっていた　ポケモン。',
			'完全な　復元は　不可能で\n実は　全身に　羽毛の　ような\n毛が　あるのではという　説がある。',
			'古代の　王者。　大アゴの\n力は　凄まじく　自動車も\n簡単に　噛みちぎってしまう。',
			'約１億年前の　ポケモン。\n凶暴だが　堂々とした　ふるまいは\n王者の　風格。',
			'大顎は　ひと噛みするだけで\n自動車も　粉々に　する。\n古代の　世界の　王者。',
		],
		[Language.ZhHant]: [
			'要完全復原牠是不可能的。\n有人說牠全身上下\n其實覆滿了羽毛般的體毛。',
			'古代的王者。\n大顎的力量非常驚人，\n連汽車也能輕易咬碎。',
			'大約１億年前的寶可夢。\n雖然凶暴，但威風堂堂，\n有王者的風範。',
			'只要牠的大顎一咬，\n就連汽車也會被粉碎。\n是古代世界的王者。',
		],
		[Language.ZhHans]: [
			'有说法，要完全复原是不可能的，\n实际上它全身都是羽毛一样的毛发。',
			'是古代的王者。\n大颚的力量很惊人，\n连汽车也能轻易咬碎。',
			'大约１亿年前的宝可梦。\n虽然凶暴，堂堂正正的\n举止却略显王者之风。',
			'如果被它的大颚咬到，\n连汽车都会变得粉碎。\n是古代世界的王者。',
		],
	},
	[
		[
			Variety.Tyrantrum,
			182,
			25,
			2700,
			[Type.Rock, Type.Dragon],
			{
				frontDefault: '9b216f80.png',
				frontShiny: 'aebbb085.png',
				backDefault: '2ca0920e.png',
				backShiny: '8a1dba2a.png',
			},
			{
				[Stat.Hp]: {baseStat: 82},
				[Stat.Attack]: {baseStat: 121, effort: 2},
				[Stat.Defense]: {baseStat: 119},
				[Stat.SpecialAttack]: {baseStat: 69},
				[Stat.SpecialDefense]: {baseStat: 59},
				[Stat.Speed]: {baseStat: 71},
			},
			{},
			[
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HornDrill,
					54,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.ScaryFace,
					Move.Endure,
					Move.Charm,
					Move.Crunch,
					Move.DragonDance,
					Move.RockBlast,
					Move.CloseCombat,
					Move.Assurance,
					Move.ThunderFang,
					Move.IceFang,
					Move.FireFang,
					Move.PlayRough,
					Move.HighHorsepower,
					Move.PsychicFangs,
					Move.BreakingSwipe,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Thrash,
					42,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					16,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Roar,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.DragonClaw,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					48,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.RockSlide,
					28,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.IronDefense,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.StealthRock,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonClaw,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.GigaImpact,
					60,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HeadSmash,
					66,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonTail,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ScaleShot,
					Move.MeteorBeam,
					Move.LashOut,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Stomp,
					Move.RockSlide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HornDrill,
					53,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
					Move.Roar,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Thrash,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Roar,
					6,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.AerialAce,
					Move.RockPolish,
					Move.DragonTail,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.DragonClaw,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					47,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					12,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RockSlide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.IronDefense,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.DracoMeteor,
					Move.IronHead,
					Move.StealthRock,
					Move.StompingTantrum,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Tutor,
					Move.Block,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonClaw,
					37,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.GigaImpact,
					68,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HeadSmash,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HeadSmash,
					58,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonTail,
					30,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Stomp,
					Move.Tackle,
					Move.TailWhip,
					Move.Roar,
					Move.RockSlide,
					Move.HeadSmash,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HornDrill,
					53,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Thrash,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					17,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Roar,
					6,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.RockPolish,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					47,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RockSlide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					34,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonClaw,
					37,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.GigaImpact,
					68,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HeadSmash,
					58,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonTail,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HornDrill,
					53,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
					Move.HeadSmash,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Thrash,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					17,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Roar,
					6,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.SecretPower,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.RockPolish,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Strength,
					Move.RockSmash,
					Move.HoneClaws,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					47,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RockSlide,
					68,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.IronDefense,
					Move.Block,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.DracoMeteor,
					Move.IronHead,
					Move.StealthRock,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					34,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonClaw,
					37,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.GigaImpact,
					75,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HeadSmash,
					58,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonTail,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HornDrill,
					53,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
					Move.HeadSmash,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Thrash,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Roar,
					6,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.HyperBeam,
					Move.Strength,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.RockSmash,
					Move.Facade,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.DragonClaw,
					Move.RockPolish,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.HoneClaws,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					47,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RockSlide,
					68,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonClaw,
					37,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.GigaImpact,
					75,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HeadSmash,
					58,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonTail,
					30,
				),
			].flat(),
			[
				{
					ability: Ability.StrongJaw,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.RockHead,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Tyrantrum,
					PokemonFormBits.Default,
					{
						frontDefault: '9b216f80.png',
						frontShiny: 'aebbb085.png',
						backDefault: '2ca0920e.png',
						backShiny: '8a1dba2a.png',
					},
					[Type.Rock, Type.Dragon],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Amaura,
	50,
	45,
	Color.Blue,
	[EggGroup.Monster],
	1,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	30,
	GrowthRate.Medium,
	Shape.Quadruped,
	{
		[Language.JaHrkt]: ['アマルス'],
		[Language.Roomaji]: ['Amarus'],
		[Language.Ko]: ['아마루스'],
		[Language.ZhHant]: ['冰雪龍'],
		[Language.Fr]: ['Amagara'],
		[Language.De]: ['Amarino'],
		[Language.Es]: ['Amaura'],
		[Language.It]: ['Amaura'],
		[Language.En]: ['Amaura'],
		[Language.Ja]: ['アマルス'],
		[Language.ZhHans]: ['冰雪龙'],
	},
	{
		[Language.JaHrkt]: ['ツンドラポケモン'],
		[Language.Ko]: ['툰드라포켓몬'],
		[Language.ZhHant]: ['凍原寶可夢'],
		[Language.Fr]: ['Pokémon Toundra'],
		[Language.De]: ['Tundra-Pokémon'],
		[Language.Es]: ['Pokémon Tundra'],
		[Language.It]: ['Pokémon Tundra'],
		[Language.En]: ['Tundra Pokémon'],
		[Language.Ja]: ['ツンドラポケモン'],
		[Language.ZhHans]: ['冻原宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'１おくねんまえから　こおりづけに\nなっていた　からだの　いちぶから\nふっかつした　こだいの　ポケモン。',
			'おっとりした　せいかくの　ポケモン。\nガチゴラスなど　きょうぼうな　てきの\nいない　さむい　とちに　すんでいた。',
			'こだいの　さむいとちに　すんでいた。\nアマルスが　いななくとき　よぞらに\nオーロラが　あらわれる　という。',
			'ふくげんに　せいこうしたが　いまの\nかんきょうは　あつすぎて　ながいきは\nできないと　かんがえられている。',
			'かせきから　ふくげんが　せいこう。\nてきの　すくない　さむいとちで\nむれを　つくり　くらしていた。',
			'ぜつめつした　こだいの　ポケモン。\nこおりづけの　じょうたいで\nはっけんされることも　あるぞ。',
		],
		[Language.Ko]: [
			'1억 년 전부터 빙하로\n뒤덮여 있던 몸의 일부에서\n부활한 고대의 포켓몬이다.',
			'의젓한 성격의 포켓몬이다.\n견고라스 등 흉포한 적이\n없는 추운 땅에 살고 있었다.',
			'고대에 차가운 토지에서 살았다.\n아마루스가 울면 밤하늘에\n오로라가 나타난다고 한다.',
			'복원에 성공했지만 오늘날의\n환경은 너무 더워서 오래 살지는\n못할 것으로 여겨지고 있다.',
			'화석으로부터 복원에 성공했다.\n적이 적은 추운 땅에서\n무리 지어 살았다.',
			'멸종한 고대의 포켓몬이다.\n얼어붙은 상태로\n발견되기도 한다.',
		],
		[Language.Fr]: [
			'Pokémon ancien, ramené à la vie après la découverte\nd’une partie de son corps conservée dans la glace\npendant 100 millions d’années.',
			'Ce Pokémon placide vivait dans des contrées\nau climat froid, loin de la menace d’un violent\nprédateur comme Rexillius.',
			'Ce Pokémon placide vivait dans des contrées au climat froid,\nloin de la menace d’un violent prédateur comme Rexillius.',
			'Amagara vivait jadis dans les terres glacées.\nOn dit que lorsqu’il pousse un cri, une aurore\nboréale nimbe le ciel nocturne.',
			'Il a été reconstitué, mais son corps n’est pas\nadapté aux températures actuelles, ce qui\naffecte probablement son espérance de vie.',
			'Ce Pokémon a été ressuscité à partir d’un fossile.\nJadis, il vivait en meute dans des terres froides,\noù peu de ses prédateurs résidaient.',
			'Un Pokémon ancien qui s’est éteint. On trouve\nparfois des spécimens conservés dans la glace.',
		],
		[Language.De]: [
			'Dieses antike Pokémon wurde aus Teilen seines\nKörpers neu belebt, die 100 Millionen\nJahre lang im ewigen Eis geschlummert hatten.',
			'Dieses eher ruhige Pokémon lebte in einem kalten\nLand, in dem es keine brutalen Gegner wie\nMonargoras zu fürchten hatte.',
			'Dieses antike Pokémon wurde aus Teilen seines Körpers\nneu belebt, die 100 Millionen Jahre lang im ewigen Eis\ngeschlummert hatten.',
			'Dieses eher ruhige Pokémon lebte in einem kalten Land,\nin dem es keine brutalen Gegner wie Monargoras zu fürchten\nhatte.',
			'Vor Urzeiten lebte es in kalten Gebieten. Es\nheißt, wenn Amarino seine Stimme erklingen\nlässt, erscheinen Polarlichter.',
			'Es konnte aus einem Fossil zurückverwandelt\nwerden, aber seine Lebenserwartung ist niedrig,\nda das heutige Klima zu heiß für es ist.',
			'Amarino wurde erfolgreich aus einem Fossil\nreanimiert. Einst lebte es gruppenweise in kalten\nGebieten, wo nur wenige Feinde lauerten.',
			'Ein ausgestorbenes Pokémon aus der Urzeit.\nManchmal werden im Eis erhalten gebliebene\nExemplare entdeckt.',
		],
		[Language.Es]: [
			'Pokémon que ha sido regenerado a partir de un trozo\nde su antiguo cuerpo, que quedó congelado hace\nunos 100 millones de años.',
			'Un Pokémon de carácter sosegado. Habitaba en\nlugares fríos donde no existían depredadores tan\nferoces como Tyrantrum.',
			'Pokémon que ha sido regenerado a partir de un trozo de\nsu antiguo cuerpo, que quedó congelado hace unos 100\nmillones de años.',
			'Un Pokémon de carácter sosegado. Habitaba en lugares fríos\ndonde no existían depredadores tan feroces como Tyrantrum.',
			'Vivía en zonas gélidas en épocas pasadas y,\nsegún dicen, el sonido que emite provoca la\naparición de auroras boreales nocturnas.',
			'Aunque se ha regenerado con éxito, las cálidas\ntemperaturas actuales no le son propicias y\nafectan a su esperanza de vida.',
			'Este Pokémon ha sido regenerado a partir de\nun fósil. Habitaba en manadas en lugares fríos\ndonde los depredadores escaseaban.',
			'Un Pokémon prehistórico extinto. Se han hallado\nalgunos ejemplares conservados bajo el hielo.',
		],
		[Language.It]: [
			'Pokémon preistorico riportato in vita dopo più di\n100 milioni di anni grazie a parti del suo corpo\nrinvenute nel ghiaccio.',
			'Pokémon dal carattere tranquillo.\nAbitava in terre fredde, in cui non doveva temere\nla presenza di terribili predatori come i Tyrantrum.',
			'Pokémon preistorico riportato in vita dopo più di 100 milioni\ndi anni grazie a parti del suo corpo rinvenute nel ghiaccio.',
			'Pokémon dal carattere tranquillo. Abitava in terre fredde,\nin cui non doveva temere la presenza di terribili predatori\ncome i Tyrantrum.',
			'In passato abitava nelle terre più fredde.\nSi dice che quando emette il suo verso, nel cielo\nnotturno compaia l’aurora boreale.',
			'È stato rigenerato con successo, ma si pensa\nche il clima attuale sia troppo caldo e che la sua\nsperanza di vita non sia molto elevata.',
			'È stato rigenerato da un fossile.\nViveva in gruppo in regioni fredde, dove\ni predatori scarseggiavano.',
			'Pokémon dell’antichità ormai estinto. A volte\nne vengono scoperti esemplari conservatisi\nall’interno di blocchi di ghiaccio.',
		],
		[Language.En]: [
			'This ancient Pokémon was restored\nfrom part of its body that had been\nfrozen in ice for over 100 million years.',
			'This calm Pokémon lived in a cold land where\nthere were no violent predators like Tyrantrum.',
			'It lived in cold areas in ancient times. It’s said\nthat when Amaura whinnies, auroras appear in\nthe night sky.',
			'Amaura was restored successfully, but it’s not\nexpected to live long because of the heat of the\ncurrent environment.',
			'This Pokémon was successfully restored from a\nfossil. In the past, it lived with others of its kind\nin cold lands where there were fewer predators.',
			'Amaura is an ancient Pokémon that has gone\nextinct. Specimens of this species can sometimes\nbe found frozen in ice.',
		],
		[Language.Ja]: [
			'１億年前から　氷漬けに　なっていた\n体の　一部から　復活した\n古代の　ポケモン。',
			'おっとりした　性格の　ポケモン。\nガチゴラスなど　凶暴な　敵の　いない\n寒い　土地に　住んでいた。',
			'古代の　寒い土地に　棲んでいた。\nアマルスが　いななくとき　夜空に\nオーロラが　現れる　という。',
			'復元に　成功したが　今の\n環境は　暑過ぎて　長生きは\nできないと　考えられている。',
			'化石から　復元が　成功。\n敵の　少ない　寒い土地で\n群れを　つくり　暮らしていた。',
			'全滅した　古代の　ポケモン。\n氷漬けの　状態で\n発見されることも　あるぞ。',
		],
		[Language.ZhHant]: [
			'曾經棲息在古代的寒冷地帶。\n據說當冰雪龍發出鳴叫時，\n夜空中就會出現極光。',
			'雖然從化石中復原成功，\n但因為現代的環境太熱了，\n被認為無法長久生存。',
			'從化石復原成功的\n寶可夢。曾經群居在\n天敵不多的寒冷地區。',
			'已經滅絕的古代寶可夢。\n有時候還會以冰封狀態\n被發現喔。',
		],
		[Language.ZhHans]: [
			'曾栖息在古代寒冷的土地上。\n据说，冰雪龙鸣叫的时候，\n夜空中会出现极光。',
			'虽然复原成功了，\n但由于现在的环境过热，\n被认为无法长期生存。',
			'从化石中成功复原。\n曾经在没什么天敌的\n寒冷地区群居。',
			'已经灭绝的古代宝可梦。\n有时候它还会以冰封的\n状态被发现喔。',
		],
	},
	[
		[
			Variety.Amaura,
			72,
			13,
			252,
			[Type.Rock, Type.Ice],
			{
				frontDefault: '11dad524.png',
				frontShiny: '76220a95.png',
			},
			{
				[Stat.Hp]: {baseStat: 77, effort: 1},
				[Stat.Attack]: {baseStat: 59},
				[Stat.Defense]: {baseStat: 50},
				[Stat.SpecialAttack]: {baseStat: 67},
				[Stat.SpecialDefense]: {baseStat: 63},
				[Stat.Speed]: {baseStat: 46},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.Endure,
					Move.Encore,
					Move.WeatherBall,
					Move.MudShot,
					Move.RockBlast,
					Move.Avalanche,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.TakeDown,
					Move.RockThrow,
					Move.AuroraVeil,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.PowderSnow,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Mist,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.IceBeam,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.Hail,
					Move.Facade,
					Move.RockTomb,
					Move.CalmMind,
					Move.DarkPulse,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					52,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AuroraBeam,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HyperBeam,
					56,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					44,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Haze,
					Move.MirrorCoat,
					Move.Discharge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IcyWind,
					Move.Outrage,
					Move.IronTail,
					Move.HyperVoice,
					Move.IronDefense,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.StealthRock,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Encore,
					4,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					8,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Hail,
					48,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.NaturePower,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Round,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FreezeDry,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.MeteorBeam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.PowderSnow,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.PsychUp,
					Move.NaturePower,
					Move.RockPolish,
					Move.ChargeBeam,
					Move.EchoedVoice,
					Move.FrostBreath,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Mist,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.IceBeam,
					50,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.Hail,
					Move.Facade,
					Move.RockTomb,
					Move.CalmMind,
					Move.DarkPulse,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					65,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AuroraBeam,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HyperBeam,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					10,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Barrier,
					Move.MagnetRise,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					47,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Haze,
					Move.MirrorCoat,
					Move.Discharge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.Outrage,
					Move.IronTail,
					Move.HyperVoice,
					Move.IronDefense,
					Move.MagnetRise,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.StealthRock,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Encore,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Hail,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NaturePower,
					41,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.WaterPulse,
					Move.AquaTail,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Round,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.PowderSnow,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Toxic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.RockTomb,
					Move.CalmMind,
					Move.RockPolish,
					Move.DarkPulse,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.ChargeBeam,
					Move.Round,
					Move.EchoedVoice,
					Move.Bulldoze,
					Move.FrostBreath,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Mist,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.IceBeam,
					50,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					65,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AuroraBeam,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HyperBeam,
					57,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					10,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Barrier,
					Move.Haze,
					Move.MirrorCoat,
					Move.MagnetRise,
					Move.Discharge,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					47,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Encore,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Hail,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NaturePower,
					41,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					34,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Round,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.PowderSnow,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Toxic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.RockTomb,
					Move.CalmMind,
					Move.RockPolish,
					Move.DarkPulse,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.ChargeBeam,
					Move.Round,
					Move.EchoedVoice,
					Move.Bulldoze,
					Move.FrostBreath,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Mist,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.IceBeam,
					50,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					65,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AuroraBeam,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HyperBeam,
					57,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					10,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Barrier,
					Move.Haze,
					Move.MirrorCoat,
					Move.MagnetRise,
					Move.Discharge,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					47,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flash,
					Move.RockSmash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.Outrage,
					Move.IronTail,
					Move.HyperVoice,
					Move.IronDefense,
					Move.WaterPulse,
					Move.MagnetRise,
					Move.AquaTail,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.StealthRock,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Encore,
					44,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Hail,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NaturePower,
					41,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					34,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Round,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.PowderSnow,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Toxic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Flash,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.PsychUp,
					Move.RockSmash,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.RockTomb,
					Move.CalmMind,
					Move.RockPolish,
					Move.DarkPulse,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.ChargeBeam,
					Move.Round,
					Move.EchoedVoice,
					Move.Bulldoze,
					Move.FrostBreath,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Mist,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.IceBeam,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					65,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AuroraBeam,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HyperBeam,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					10,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Barrier,
					Move.Haze,
					Move.MirrorCoat,
					Move.MagnetRise,
					Move.Discharge,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					47,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Encore,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Hail,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NaturePower,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Round,
					30,
				),
			].flat(),
			[
				{
					ability: Ability.Refrigerate,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.SnowWarning,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Amaura,
					PokemonFormBits.Default,
					{
						frontDefault: '11dad524.png',
						frontShiny: '76220a95.png',
					},
					[Type.Rock, Type.Ice],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Aurorus,
	50,
	45,
	Color.Blue,
	[EggGroup.Monster],
	1,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	30,
	GrowthRate.Medium,
	Shape.Quadruped,
	{
		[Language.JaHrkt]: ['アマルルガ'],
		[Language.Roomaji]: ['Amaruruga'],
		[Language.Ko]: ['아마루르가'],
		[Language.ZhHant]: ['冰雪巨龍'],
		[Language.Fr]: ['Dragmara'],
		[Language.De]: ['Amagarga'],
		[Language.Es]: ['Aurorus'],
		[Language.It]: ['Aurorus'],
		[Language.En]: ['Aurorus'],
		[Language.Ja]: ['アマルルガ'],
		[Language.ZhHans]: ['冰雪巨龙'],
	},
	{
		[Language.JaHrkt]: ['ツンドラポケモン'],
		[Language.Ko]: ['툰드라포켓몬'],
		[Language.ZhHant]: ['凍原寶可夢'],
		[Language.Fr]: ['Pokémon Toundra'],
		[Language.De]: ['Tundra-Pokémon'],
		[Language.Es]: ['Pokémon Tundra'],
		[Language.It]: ['Pokémon Tundra'],
		[Language.En]: ['Tundra Pokémon'],
		[Language.Ja]: ['ツンドラポケモン'],
		[Language.ZhHans]: ['冻原宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'マイナス１５０どの　れいきを\nひしがたの　けっしょうから　だして\nてきを　つつみ　こおりづけにする。',
			'ひしがたの　けっしょうで　こおりの\nかべを　しゅんかんてきに　つくり\nてきの　こうげきを　ふせぐのだ。',
			'ひょうざんの　なかに　とうじのままの\nすがたで　こおりづけに　なった\nアマルルガが　みつかり　ニュースに。',
			'からだの　ひょうめんの　おんどは\nマイナス　１５０ど。　ふだんは\nとてもおとなしく　やさしいポケモン。',
			'かせきから　ふくげん　された。\nアマルルガが　ほえると　よぞらに\nオーロラが　あらわれると　いう。',
			'はげしい　いかりに　かられると\nもうれつな　れいきを　ふきだして\nあたりいちめんを　こおりづけにする。',
		],
		[Language.Ko]: [
			'마이너스 150도의 냉기를\n마름모꼴의 결정에서 내뿜어\n적을 감싸 얼어붙게 한다.',
			'마름모꼴의 결정으로\n얼음벽을 순간적으로 만들어\n적의 공격을 막는다.',
			'빙산 안에 당시의 모습 그대로\n얼어붙은 아마루르가가\n발견되어 화제를 모았다.',
			'몸의 표면 온도는 영하 150도다.\n평소에는 매우 얌전하고\n상냥한 포켓몬이다.',
			'화석에서 복원됐다.\n아마루르가가 울부짖으면 밤하늘에\n오로라가 나타난다고 한다.',
			'격렬한 분노에 사로잡히면\n맹렬하게 냉기를 뿜어내\n주변을 모두 얼어붙게 한다.',
		],
		[Language.Fr]: [
			'Les cristaux qui parsèment son corps lui permettent\nde piéger ses ennemis dans la glace en émettant\nde l’air refroidi à -150 °C.',
			'En utilisant ses cristaux, il peut créer en un instant\nun mur de glace pour se protéger des attaques\nennemies.',
			'Les cristaux qui parsèment son corps lui permettent de piéger\nses ennemis dans la glace en émettant de l’air refroidi\nà -150 °C.',
			'En utilisant ses cristaux, il peut créer en un instant un mur\nde glace pour se protéger des attaques ennemies.',
			'Un Dragmara a été retrouvé dans un glacier,\nen parfait état de conservation, ce qui a fait\nla une des actualités.',
			'La température de la surface de son corps\nest de -150 °C. Ce Pokémon est généralement\ntrès calme et très doux.',
			'Ce Pokémon a été ressuscité à partir d’un fossile.\nOn raconte qu’une aurore boréale apparaît dans\nle ciel nocturne quand il hurle à la lune.',
			'Lorsqu’il se laisse emporter par sa rage,\nil relâche des bourrasques glacées\nqui gèlent tout ce qui l’entoure.',
		],
		[Language.De]: [
			'Mit der -150 °C kalten Luft, die den\ndiamantförmigen Kristallen auf seinem\nKörper entströmt, friert es Gegner ein.',
			'Es nutzt seine diamantförmigen Kristalle, um im Nu\neine Wand aus Eis zur Abwehr gegnerischer Angriffe\nzu erschaffen.',
			'Mit der -150 °C kalten Luft, die den diamantförmigen Kristallen\nauf seinem Körper entströmt, friert es Gegner ein.',
			'Es nutzt seine diamantförmigen Kristalle, um im Nu eine Wand\naus Eis zur Abwehr gegnerischer Angriffe zu erschaffen.',
			'Kürzlich sorgte der Fund eines in einem Eisberg\neingeschlossenen, perfekt konservierten\nAmagargas aus der Urzeit für Schlagzeilen.',
			'Die Oberfläche seines Körpers ist -150 °C kalt.\nFür gewöhnlich ist es ein sehr besonnenes und\nsanftmütiges Pokémon.',
			'Es wurde aus einem Fossil zurückverwandelt.\nWenn es seinen Ruf erschallen lässt, sollen\nPolarlichter am Nachthimmel erscheinen.',
			'Wenn es von wildem Zorn erfüllt ist, entströmt\nihm gewaltige Kälte, die seine ganze Umgebung\neinfriert.',
		],
		[Language.Es]: [
			'Expulsa un gas gélido a temperaturas inferiores a los\n-150 ºC a través de sus cristales romboides y congela\nasí a su enemigo.',
			'Gracias a sus cristales con forma de rombo, puede\ncrear al momento una barrera de hielo para bloquear\nel ataque de su enemigo.',
			'Expulsa un gas gélido a temperaturas inferiores a los -150 °C\na través de sus cristales romboides y congela así a su\nenemigo.',
			'Gracias a sus cristales con forma de rombo, puede crear al\nmomento una barrera de hielo para bloquear el ataque de su\nenemigo.',
			'El descubrimiento de un Aurorus en perfecto\nestado de conservación en el interior de un\niceberg se convirtió en noticia.',
			'La superficie de su cuerpo se mantiene a una\ntemperatura de -150 ºC. Por lo general, es un\nPokémon muy dócil y afable.',
			'Fue regenerado a partir de un fósil. Dicen que el\nrugido de Aurorus hace aparecer la aurora boreal\nen el cielo nocturno.',
			'Cuando se deja llevar por la ira, emite un vaho\nextremadamente gélido que lo congela todo a\nsu alrededor.',
		],
		[Language.It]: [
			'Emette aria gelida a -150 °C dai cristalli romboidali che\nha sul corpo congelando i nemici.',
			'Si difende dagli attacchi dei nemici creando in pochi\nistanti un muro di ghiaccio grazie ai cristalli romboidali\ndel suo corpo.',
			'Emette aria gelida a -150 °C dai cristalli romboidali che ha\nsul corpo congelando i nemici.',
			'Si difende dagli attacchi dei nemici creando in pochi istanti\nun muro di ghiaccio grazie ai cristalli romboidali del suo corpo.',
			'Di recente ha fatto notizia il ritrovamento di\nun esemplare in perfetto stato di conservazione\nintrappolato in un iceberg.',
			'La superficie del suo corpo ha una temperatura\ndi -150 °C. È un Pokémon generalmente molto\ntranquillo e docile.',
			'È stato rigenerato da un fossile. Si dice che\nquando Aurorus ulula, nel cielo notturno\ncompaia l’aurora boreale.',
			'Quando è in preda all’ira emette un getto\nviolento di aria gelida che congela tutto ciò\nche lo circonda.',
		],
		[Language.En]: [
			'The diamond-shaped crystals on its body\nexpel air as cold as -240 degrees Fahrenheit,\nsurrounding its enemies and encasing them in ice.',
			'Using its diamond-shaped crystals,\nit can instantly create a wall of\nice to block an opponent’s attack.',
			'An Aurorus was found frozen solid within a\nglacier, just as it appeared long ago, which\nbecame quite a big event in the news.',
			'This usually quiet and kindly Pokémon has a\nsurface temperature of around\n–240 degrees Fahrenheit.',
			'Aurorus was restored from a fossil. It’s said that\nwhen this Pokémon howls, auroras appear in the\nnight sky.',
			'When gripped by rage, Aurorus will emanate\nfreezing air, covering everything around it in ice.',
		],
		[Language.Ja]: [
			'マイナス１５０度の　冷気を\nひし形の　結晶から　出して\n敵を　包み　氷漬けにする。',
			'ひし形の　結晶で\n氷の　壁を　瞬間的に　作り\n敵の　攻撃を　防ぐのだ。',
			'氷山の　中に　当時のままの\n姿で　氷漬けに　なった\nアマルルガが　見つかり　ニュースに。',
			'身体の　表面の　温度は\nマイナス　１５０度。　普段は\nとても大人しく　やさしいポケモン。',
			'化石から　復元された。\nアマルルガが　吠えると　夜空に\nオーロラが　現れると　いう。',
			'激しい　怒りに　かられると\n猛烈な　冷気を　噴き出して\nあたり一面を　氷漬けにする。',
		],
		[Language.ZhHant]: [
			'有人在冰山裡發現了結凍的冰雪巨龍，\n牠仍然保持著當時的模樣。\n這件事被新聞報了出來。',
			'身體表面的溫度是\n零下１５０度。平常是\n非常穩重溫和的寶可夢。',
			'從化石復原的寶可夢。\n據說當冰雪巨龍吼叫時，\n夜空中就會出現極光。',
			'當牠大大地被激怒時，\n就會噴出猛烈的冰氣\n讓周圍一帶全被冰封。',
		],
		[Language.ZhHans]: [
			'报道里说，在冰山中发现了\n被冻住的冰雪巨龙，\n仍保持着当时的样子。',
			'身体表面的温度是零下１５０度。\n平常是非常稳重温和的宝可梦。',
			'从化石复原而来。\n据说当冰雪巨龙吼叫时，\n夜空中就会出现极光。',
			'当它被激怒时，\n就会喷出猛烈的冷气，\n把周围都冰封起来。',
		],
	},
	[
		[
			Variety.Aurorus,
			104,
			27,
			2250,
			[Type.Rock, Type.Ice],
			{
				frontDefault: 'e742ba05.png',
				frontShiny: '85a9864c.png',
			},
			{
				[Stat.Hp]: {baseStat: 123, effort: 2},
				[Stat.Attack]: {baseStat: 77},
				[Stat.Defense]: {baseStat: 72},
				[Stat.SpecialAttack]: {baseStat: 99},
				[Stat.SpecialDefense]: {baseStat: 92},
				[Stat.Speed]: {baseStat: 58},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.Endure,
					Move.Encore,
					Move.WeatherBall,
					Move.IcicleSpear,
					Move.MudShot,
					Move.RockBlast,
					Move.Avalanche,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.PowderSnow,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Mist,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.IceBeam,
					42,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Earthquake,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.Hail,
					Move.Facade,
					Move.RockTomb,
					Move.CalmMind,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					60,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AuroraBeam,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HyperBeam,
					66,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					48,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IcyWind,
					Move.Outrage,
					Move.IronTail,
					Move.HyperVoice,
					Move.IronDefense,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.StealthRock,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					12,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Encore,
					Move.AncientPower,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Hail,
					54,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.NaturePower,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Round,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FreezeDry,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.MeteorBeam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.PowderSnow,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.PsychUp,
					Move.NaturePower,
					Move.RockPolish,
					Move.ChargeBeam,
					Move.EchoedVoice,
					Move.FrostBreath,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Mist,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.IceBeam,
					56,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Earthquake,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.Hail,
					Move.Facade,
					Move.RockTomb,
					Move.CalmMind,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					74,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AuroraBeam,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HyperBeam,
					63,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ThunderWave,
					Move.RockThrow,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					50,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.Outrage,
					Move.IronTail,
					Move.HyperVoice,
					Move.IronDefense,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.StealthRock,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Encore,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Hail,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NaturePower,
					43,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.WaterPulse,
					Move.MagnetRise,
					Move.AquaTail,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Round,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FreezeDry,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FreezeDry,
					1,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.ThunderWave,
					Move.RockThrow,
					Move.PowderSnow,
					Move.FreezeDry,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Earthquake,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.RockTomb,
					Move.CalmMind,
					Move.RockPolish,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.ChargeBeam,
					Move.Round,
					Move.EchoedVoice,
					Move.Bulldoze,
					Move.FrostBreath,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Mist,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.IceBeam,
					56,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					74,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AuroraBeam,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HyperBeam,
					63,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					50,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Encore,
					46,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Hail,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NaturePower,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					34,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Round,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FreezeDry,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.PowderSnow,
					Move.FreezeDry,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Earthquake,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.RockTomb,
					Move.CalmMind,
					Move.RockPolish,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.ChargeBeam,
					Move.Round,
					Move.EchoedVoice,
					Move.Bulldoze,
					Move.FrostBreath,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Mist,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.IceBeam,
					56,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					74,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AuroraBeam,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HyperBeam,
					63,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					50,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flash,
					Move.RockSmash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.Outrage,
					Move.IronTail,
					Move.HyperVoice,
					Move.IronDefense,
					Move.WaterPulse,
					Move.MagnetRise,
					Move.AquaTail,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.StealthRock,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Encore,
					46,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Hail,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NaturePower,
					43,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					34,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Round,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FreezeDry,
					77,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Growl,
					Move.PowderSnow,
					Move.FreezeDry,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Earthquake,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Flash,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.PsychUp,
					Move.RockSmash,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.RockTomb,
					Move.CalmMind,
					Move.RockPolish,
					Move.DarkPulse,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.ChargeBeam,
					Move.Round,
					Move.EchoedVoice,
					Move.Bulldoze,
					Move.FrostBreath,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Mist,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.IceBeam,
					56,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					74,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AuroraBeam,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HyperBeam,
					63,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Encore,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Hail,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NaturePower,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Round,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FreezeDry,
					77,
				),
			].flat(),
			[
				{
					ability: Ability.Refrigerate,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.SnowWarning,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Aurorus,
					PokemonFormBits.Default,
					{
						frontDefault: 'e742ba05.png',
						frontShiny: '85a9864c.png',
					},
					[Type.Rock, Type.Ice],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Sylveon,
	50,
	45,
	Color.Pink,
	[EggGroup.Ground],
	1,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	35,
	GrowthRate.Medium,
	Shape.Quadruped,
	{
		[Language.JaHrkt]: ['ニンフィア'],
		[Language.Roomaji]: ['Nymphia'],
		[Language.Ko]: ['님피아'],
		[Language.ZhHant]: ['仙子伊布'],
		[Language.Fr]: ['Nymphali'],
		[Language.De]: ['Feelinara'],
		[Language.Es]: ['Sylveon'],
		[Language.It]: ['Sylveon'],
		[Language.En]: ['Sylveon'],
		[Language.Ja]: ['ニンフィア'],
		[Language.ZhHans]: ['仙子伊布'],
	},
	{
		[Language.JaHrkt]: ['むすびつきポケモン'],
		[Language.Ko]: ['연결포켓몬'],
		[Language.ZhHant]: ['連結寶可夢'],
		[Language.Fr]: ['Pokémon Attachant'],
		[Language.De]: ['Bindungs-Pokémon'],
		[Language.Es]: ['Pokémon Vínculo'],
		[Language.It]: ['Pokémon Legame'],
		[Language.En]: ['Intertwining Pokémon'],
		[Language.Ja]: ['むすびつきポケモン'],
		[Language.ZhHans]: ['连结宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'リボンのような　しょっかくから\nきもちを　やわらげる　はどうを\nおくりこみ　たたかいを　やめさせる。',
			'だいすきな　トレーナーの　うでに\nリボンのような　しょっかくを\nまきつけて　いっしょに　あるく。',
			'リボンの　ような　しょっかく　から\nてきいを　そぐ　はどうを　はなち\nえものを　ゆだんさせ　おそう。',
			'えものを　みつけると　リボンじょうの\nしょっかくを　ゆらし　ゆだん　させ\nスキが　できると　とびかかる。',
			'ひとたび　たたかいとなれば　じぶんの\nなんばいもある　ドラゴンポケモンにも\nいっさいひるまず　とびかかっていく。',
			'トレーナーの　うでに　リボンじょうの\nしょっかくを　まきつけてくる。\nふれると　きもちが　わかる　からだ。',
			'リボンのような　しょっかくから\nてきいを　けす　はどうを　はっして\nあらそいを　やめさせる。',
			'おそろしい　ドラゴンポケモンを\nうつくしい　ニンフィアが　たいじする\nどうわが　ガラルちほうに　のこる。',
		],
		[Language.Ko]: [
			'리본 모양의 더듬이에서\n마음을 온화하게 하는 파동을\n보내 싸움을 그만두게 한다.',
			'좋아하는 트레이너의 팔에\n리본 모양의 더듬이를\n감고 함께 걷는다.',
			'리본 같은 더듬이로부터\n적의를 없애는 파동을 내보내\n먹이를 방심하게 하고 덮친다.',
			'먹이를 발견하면 리본 모양의\n더듬이를 흔들어 방심하게 하고\n틈이 만들어지면 덤벼든다.',
			'한번 싸움이 나면 자신보다\n몇 배나 큰 드래곤포켓몬에게도\n전혀 기죽지 않고 덤벼든다.',
			'트레이너의 팔에 리본 모양의\n더듬이를 휘감는다.\n닿으면 기분을 알 수 있기 때문이다.',
			'리본 모양의 더듬이로부터\n적의를 없애는 파동을 내보내\n싸움을 그만두게 한다.',
			'무서운 드래곤포켓몬을\n아름다운 님피아가 퇴치하는\n동화가 가라르지방에 남아 있다.',
		],
		[Language.Fr]: [
			'Pour arrêter le combat, il émet des ondes apaisantes\navec ses rubans.',
			'Il enroule ses rubans sensoriels autour du bras de\nson Dresseur adoré et chemine paisiblement à\nses côtés.',
			'Il enroule ses rubans sensoriels autour du bras de son\nDresseur adoré et chemine paisiblement à ses côtés.',
			'Grâce à ses antennes semblables à des rubans,\nil peut émettre des ondes neutralisant l’hostilité\net ainsi endormir la méfiance de ses proies.',
			'Lorsqu’il trouve une proie, il agite ses antennes\nen forme de rubans pour la distraire. Ensuite,\nil passe à l’attaque.',
			'Une fois le combat entamé, il n’hésite pas\nune seconde, même contre un Pokémon\nde type Dragon dix fois plus gros que lui.',
			'Enrouler l’une de ses antennes en forme\nde ruban autour du bras de son Dresseur\nlui permet de connaître ses sentiments.',
			'Grâce à ses antennes semblables à des rubans,\nil peut émettre des ondes neutralisant l’hostilité\net ainsi mettre fin aux querelles.',
			'Un conte de Galar relate la victoire d’un beau\nNymphali sur un terrible Pokémon Dragon.',
		],
		[Language.De]: [
			'Seinen bandförmigen Fühlern lässt\nes beruhigende Wellen entströmen,\ndie das Ende von Kämpfen herbeiführen.',
			'Es umwickelt den Arm seines geliebten Trainers mit\nseinen bandförmigen Fühlern und geht so mit ihm\nspazieren.',
			'Seinen bandförmigen Fühlern lässt es beruhigende Wellen\nentströmen, die das Ende von Kämpfen herbeiführen.',
			'Es umwickelt den Arm seines geliebten Trainers mit seinen\nbandförmigen Fühlern und geht so mit ihm spazieren.',
			'Seinen bandförmigen Fühlern lässt es\nberuhigende Wellen entströmen, um\nseine Beute in Sicherheit zu wiegen.',
			'Hat es Beute entdeckt, wedelt es mit seinen\nbandförmigen Fühlern, um diese abzulenken.\nBei Erfolg stürzt es sich auf sie.',
			'Kommt es zum Kampf, stürzt es sich furchtlos\nins Gefecht, selbst wenn sein Gegner ein\nvielfach größeres Drachen-Pokémon ist.',
			'Feelinara umwickelt den Arm seines Trainers mit\nseinen bandförmigen Fühlern, da es so spüren\nkann, wie es ihm geht.',
			'Mit seinen bandförmigen Fühlern sendet es\nWellen aus, die feindselige Gefühle verklingen\nlassen. So legt es Streitereien bei.',
			'Ein in der Galar-Region überliefertes Märchen\nerzählt von einem bildhübschen Feelinara, das\nein grässliches Drachen-Pokémon bezwingt.',
		],
		[Language.Es]: [
			'A través de sus apéndices sensitivos con forma de\ncinta, emite unas ondas tranquilizadoras mediante las\ncuales detiene los combates.',
			'Enrolla sus apéndices sensoriales con forma de cinta\nen los brazos de su querido Entrenador cuando\ncaminan juntos.',
			'A través de sus apéndices sensitivos con forma de cinta,\nemite unas ondas tranquilizadoras mediante las cuales\ndetiene los combates.',
			'Enrolla sus apéndices sensoriales con forma de cinta en los\nbrazos de su querido Entrenador cuando caminan juntos.',
			'Con sus apéndices sensoriales con forma de\ncinta, puede emitir ondas que neutralizan la\nhostilidad y hacen bajar la guardia a su presa.',
			'Al detectar a una presa, agita sus apéndices\nsensoriales con forma de cinta para distraerla y,\ncuando lo consigue, se abalanza sobre ella.',
			'Cuando se enfrasca en un combate lo da todo\nsin titubear un segundo, aunque se enfrente a\nun Pokémon de tipo Dragón más grande que él.',
			'Al rodear el brazo de su Entrenador con los\napéndices sensoriales en forma de cintas, es\ncapaz de comprender sus sentimientos.',
			'Con sus apéndices sensoriales en forma de cinta,\npuede emitir ondas que neutralizan la hostilidad\ny detener así cualquier contienda.',
			'En un cuento infantil de Galar se narra la victoria\nde un Sylveon de extraordinaria belleza sobre un\ntemible Pokémon de tipo Dragón.',
		],
		[Language.It]: [
			'Le sue antenne simili a fiocchetti emettono onde dagli\neffetti rilassanti, grazie alle quali fa cessare le lotte.',
			'Se si affeziona particolarmente al suo Allenatore, lo\naccompagna circondandogli amorevolmente il braccio\ncon le sue antenne a forma di fiocchetto.',
			'Le sue antenne simili a fiocchetti emettono onde dagli effetti\nrilassanti, grazie alle quali fa cessare le lotte.',
			'Le sue antenne simili a fiocchetti emettono onde\nche neutralizzano l’aggressività, riuscendo così\na far abbassare la guardia alle sue prede.',
			'Individuata una preda, agita le sue antenne\nsimili a fiocchetti per deconcentrarla e poi\nattacca approfittando della sua distrazione.',
			'Nella lotta, parte all’attacco senza esitare\nun istante, anche quando si trova di fronte\nimponenti Pokémon di tipo Drago.',
			'Avvolge le sue antenne simili a fiocchetti intorno\nal braccio dell’Allenatore per comprendere i suoi\nsentimenti.',
			'Fa cessare le lotte grazie alle antenne simili\na fiocchetti, che emettono onde in grado di\nplacare le ostilità.',
			'Una favola di Galar narra di un Sylveon di rara\nbellezza che sconfisse uno spaventoso Pokémon\ndi tipo Drago.',
		],
		[Language.En]: [
			'It sends a soothing aura from its\nribbonlike feelers to calm fights.',
			'It wraps its ribbonlike feelers around\nthe arm of its beloved Trainer\nand walks with him or her.',
			'Its ribbonlike feelers give off an aura that\nweakens hostility in its prey, causing them\nto let down their guard. Then it attacks.',
			'When this Pokémon sights its prey, it swirls its\nribbonlike feelers as a distraction. A moment\nlater, it pounces.',
			'Once a fight breaks out, it will unflinchingly\ncharge at dragon Pokémon that are many times\nlarger than itself.',
			'Sylveon wraps its ribbonlike feelers around its\nTrainer’s arm because this touch enables it to\nread its Trainer’s feelings.',
			'By releasing enmity-erasing waves from its\nribbonlike feelers, Sylveon stops any conflict.',
			'There’s a Galarian fairy tale that describes\na beautiful Sylveon vanquishing a dreadful\ndragon Pokémon.',
			'It emits a soothing aura from its ribbon-shaped organs. It wraps\nthese appendages around quarrelers to instantly restore calm to\nthe situation.',
		],
		[Language.Ja]: [
			'リボンのような　触覚から\n気持ちを　和らげる　波動を　送りこみ\n戦いを　やめさせる。',
			'大好きな　トレーナーの　腕に\nリボンのような　触覚を　巻きつけて\n一緒に　歩く。',
			'リボンの　ような　触角　から\n敵意を　削ぐ　波動を　放ち\n獲物を　油断させ　襲う。',
			'獲物を　見つけると　リボン状の\n触角を　揺らし　油断　させ\nスキが　できると　飛びかかる。',
			'ひとたび　戦いとなれば　自分の\n何倍もある　ドラゴンポケモンにも\nいっさい怯まず　飛びかかっていく。',
			'トレーナーの　腕に　リボン状の\n触角を　巻きつけてくる。\n触れると　気持ちが　わかる　からだ。',
			'リボンのような　触角から\n敵意を　消す　波動を　発して\n争いを　やめさせる。',
			'恐ろしい　ドラゴンポケモンを\n美しい　ニンフィアが　退治する\n童話が　ガラル地方に　残る。',
		],
		[Language.ZhHant]: [
			'從有如蝴蝶結的觸角裡\n釋放出削弱敵意的波動，\n令獵物大意後襲擊對方。',
			'發現獵物後，就會搖晃\n蝴蝶結形狀的觸角讓對方大意，\n一旦有機可乘就會猛撲過去。',
			'一旦進入戰鬥狀態，\n即便對手是比自己大幾倍的龍寶可夢，\n也會毫不畏懼地飛撲過去。',
			'會用緞帶般的觸角纏住\n訓練家的手臂，因為牠可以\n透過觸碰來得知對方的心情。',
			'會從蝴蝶結般的觸角裡\n釋放能夠消除敵意的波動，\n藉此平息紛爭。',
			'伽勒爾地區的童話中有著\n美麗的仙子伊布擊退了\n可怕的龍寶可夢的故事。',
		],
		[Language.ZhHans]: [
			'从蝴蝶结那样的触角里\n释放出削弱敌意的波动，\n令猎物大意后袭击对方。',
			'发现猎物后，就会摇晃\n蝴蝶结状的触角让对方大意，\n一旦出现可趁之机就会猛扑过去。',
			'一旦进入战斗状态，\n即使面对比自己大几倍的龙宝可梦，\n也会毫不畏惧地飞扑过去。',
			'会用缎带般的触角缠住训练家的手臂。\n因为只要触碰后就能知道对方的心情。',
			'会从蝴蝶结般的触角里\n释放能够消除敌意的波动，\n借此平息纷争。',
			'伽勒尔地区的童话中有着\n美丽的仙子伊布击退了\n可怕的龙宝可梦的故事。',
		],
	},
	[
		[
			Variety.Sylveon,
			184,
			10,
			235,
			[Type.Fairy],
			{
				frontDefault: '1ba3ba4d.png',
				frontShiny: '842524cb.png',
			},
			{
				[Stat.Hp]: {baseStat: 95},
				[Stat.Attack]: {baseStat: 65},
				[Stat.Defense]: {baseStat: 65},
				[Stat.SpecialAttack]: {baseStat: 110},
				[Stat.SpecialDefense]: {baseStat: 130, effort: 2},
				[Stat.Speed]: {baseStat: 60},
			},
			{},
			[
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SandAttack,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
					Move.HelpingHand,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.Swift,
					Move.Endure,
					Move.Charm,
					Move.BatonPass,
					Move.WeatherBall,
					Move.FakeTears,
					Move.MagicalLeaf,
					Move.StoredPower,
					Move.DrainingKiss,
					Move.MistyTerrain,
					Move.PlayRough,
					Move.MistyExplosion,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.TakeDown,
					Move.DoubleEdge,
					Move.Bite,
					Move.Growl,
					Move.Charm,
					Move.BatonPass,
					Move.Covet,
					Move.Copycat,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.DoubleEdge,
					Move.Roar,
					Move.Psychic,
					Move.Curse,
					Move.DisarmingVoice,
					Move.TeraBlast,
					Move.Trailblaze,
					Move.AlluringVoice,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Dig,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Facade,
					Move.CalmMind,
					Move.GigaImpact,
					Move.Psyshock,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					10,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Swift,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					45,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HelpingHand,
					Move.SkillSwap,
					Move.HyperVoice,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LastResort,
					55,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					35,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					50,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BabyDollEyes,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.PayDay,
					Move.BodySlam,
					Move.HyperBeam,
					Move.Dig,
					Move.LightScreen,
					Move.Reflect,
					Move.FocusEnergy,
					Move.Swift,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Endure,
					Move.Charm,
					Move.SleepTalk,
					Move.BatonPass,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.HelpingHand,
					Move.SkillSwap,
					Move.HyperVoice,
					Move.WeatherBall,
					Move.FakeTears,
					Move.MagicalLeaf,
					Move.CalmMind,
					Move.GigaImpact,
					Move.Psyshock,
					Move.StoredPower,
					Move.DrainingKiss,
					Move.MistyTerrain,
					Move.PlayRough,
					Move.MysticalFire,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SandAttack,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TakeDown,
					Move.DoubleEdge,
					Move.TailWhip,
					Move.Bite,
					Move.Growl,
					Move.Charm,
					Move.BatonPass,
					Move.HelpingHand,
					Move.Covet,
					Move.Copycat,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					10,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Swift,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronTail,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Safeguard,
					Move.Round,
					Move.Retaliate,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					45,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LastResort,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DisarmingVoice,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					35,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					50,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BabyDollEyes,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.MistyExplosion,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SandAttack,
					5,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
					Move.HelpingHand,
					Move.DisarmingVoice,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Facade,
					Move.CalmMind,
					Move.GigaImpact,
					Move.Psyshock,
					Move.Round,
					Move.WorkUp,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Swift,
					17,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronTail,
					Move.HelpingHand,
					Move.SkillSwap,
					Move.HyperVoice,
					Move.Telekinesis,
					Move.LaserFocus,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HealBell,
					Move.MagicCoat,
					Move.Covet,
					Move.LastResort,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LastResort,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					29,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					37,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BabyDollEyes,
					9,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SandAttack,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
					Move.HelpingHand,
					Move.DisarmingVoice,
					Move.FairyWind,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Toxic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Facade,
					Move.CalmMind,
					Move.GigaImpact,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.WorkUp,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					33,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Swift,
					17,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LastResort,
					41,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					29,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					37,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BabyDollEyes,
					9,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Flash,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SandAttack,
					5,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
					Move.HelpingHand,
					Move.DisarmingVoice,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Facade,
					Move.SecretPower,
					Move.CalmMind,
					Move.GigaImpact,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.Retaliate,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					33,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Swift,
					17,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HealBell,
					Move.IronTail,
					Move.HelpingHand,
					Move.MagicCoat,
					Move.SkillSwap,
					Move.HyperVoice,
					Move.Covet,
					Move.LastResort,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					45,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LastResort,
					41,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					29,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					9,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					37,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.HyperBeam,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Facade,
					Move.CalmMind,
					Move.GigaImpact,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.Retaliate,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SandAttack,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
					Move.HelpingHand,
					Move.DisarmingVoice,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.QuickAttack,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					33,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Swift,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LastResort,
					41,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					29,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					37,
				),
			].flat(),
			[
				{
					ability: Ability.CuteCharm,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Pixilate,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Sylveon,
					PokemonFormBits.Default,
					{
						frontDefault: '1ba3ba4d.png',
						frontShiny: '842524cb.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Hawlucha,
	50,
	100,
	Color.Green,
	[EggGroup.Flying, EggGroup.Humanshape],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Humanoid,
	{
		[Language.JaHrkt]: ['ルチャブル'],
		[Language.Roomaji]: ['Luchabull'],
		[Language.Ko]: ['루차불'],
		[Language.ZhHant]: ['摔角鷹人'],
		[Language.Fr]: ['Brutalibré'],
		[Language.De]: ['Resladero'],
		[Language.Es]: ['Hawlucha'],
		[Language.It]: ['Hawlucha'],
		[Language.En]: ['Hawlucha'],
		[Language.Ja]: ['ルチャブル'],
		[Language.ZhHans]: ['摔角鹰人'],
	},
	{
		[Language.JaHrkt]: ['レスリングポケモン'],
		[Language.Ko]: ['레슬링포켓몬'],
		[Language.ZhHant]: ['摔角寶可夢'],
		[Language.Fr]: ['Pokémon Catcheur'],
		[Language.De]: ['Wrestling-Pokémon'],
		[Language.Es]: ['Pokémon Lucha Libre'],
		[Language.It]: ['Pokémon Lottalibera'],
		[Language.En]: ['Wrestling Pokémon'],
		[Language.Ja]: ['レスリングポケモン'],
		[Language.ZhHans]: ['摔角宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'たいかくは　こがらだが　カイリキーや\nハリテヤマなど　おおきな　ポケモンと\nごかくに　たたかう　テクニシャン。',
			'つばさを　つかい　くうちゅうで\nしせいを　コントロール。ふせぎにくい\nずじょうから　こうげきを　しかける。',
			'すばやいわざで　あいてを　あっとう。\nひっさつわざを　はなつ　アピールが\nながすぎて　ピンチにおちいることも。',
			'かろやかな　ジャンプで　あいての\nしかくに　まわりつつ　たたかう。\nかれいな　かんせつわざも　とくい。',
			'みがるさを　いかした　せんぽうで\nあいての　たいりょくを　うばってから\nかれいな　おおわざを　きめる。',
			'とどめの　おおわざを　だす　まえは\nかならず　ポーズを　きめる。　その\nすきに　はんげきされる　こともある。',
		],
		[Language.Ko]: [
			'체격은 작지만 괴력몬이나\n하리뭉 등의 커다란 포켓몬과\n막상막하로 싸우는 테크니션이다.',
			'날개를 사용해 공중에서\n자세를 컨트롤한다. 막기 어려운\n머리 위에서부터 공격해온다.',
			'빠른 기술로 상대를 압도한다.\n필살기를 쓰기 위한 어필이\n너무 길어서 위기에 처하기도 한다.',
			'경쾌한 점프로 상대의\n사각을 돌며 싸운다.\n화려한 관절 기술도 특기다.',
			'경쾌한 몸놀림을 활용한 전법으로\n상대의 체력을 빼앗은 뒤\n화려한 큰 기술을 먹인다.',
			'끝을 내는 결정적인 기술을 쓰기 전에\n반드시 포즈를 취한다.\n그 틈에 반격당하기도 한다.',
		],
		[Language.Fr]: [
			'Malgré sa petite taille, son intelligence lui permet\nd’affronter sans trembler de grands Pokémon tels que\nles Mackogneur ou les Hariyama.',
			'Il utilise ses ailes pour contrôler avec précision sa\nposture en vol. Ses attaques aériennes sont difficiles\nà parer.',
			'Malgré sa petite taille, son intelligence lui permet d’affronter\nsans trembler de grands Pokémon tels que les Mackogneur\nou les Hariyama.',
			'Il utilise ses ailes pour contrôler avec précision sa posture\nen vol. Ses attaques aériennes sont difficiles à parer.',
			'Il terrasse ses adversaires grâce à sa vitesse,\nmais se pavane tant avant de lancer sa botte\nsecrète qu’il se retrouve parfois en difficulté.',
			'Il combat ses adversaires en sautillant pour\nse retrouver dans leur angle mort. Il maîtrise\nde formidables techniques de clés articulaires.',
			'Il utilise des tactiques basées sur son agilité\npour fatiguer son adversaire, et termine\nle combat par une magnifique frappe décisive.',
			'Il prend toujours la pose avant de donner le coup\nde grâce à son adversaire. Certains en profitent\npour contre-attaquer.',
		],
		[Language.De]: [
			'Ungeachtet seines kleinen Wuchses, erweist es sich,\ndank seiner Kampftechnik, gegenüber größeren\nGegnern wie Machomei oder Hariyama als ebenbürtig.',
			'Es nutzt seine Flügel, um sich am Himmel in Position\nzu halten. Gegen seine Angriffe aus der Luft kann man\nsich nur schwer zur Wehr setzen.',
			'Ungeachtet seines kleinen Wuchses, erweist es sich, dank\nseiner Kampftechnik, gegenüber größeren Gegnern wie\nMachomei oder Hariyama als ebenbürtig.',
			'Es nutzt seine Flügel, um sich am Himmel in Position zu halten.\nGegen seine Angriffe aus der Luft kann man sich nur schwer\nzur Wehr setzen.',
			'Es dominiert seine Gegner mit flinken Attacken.\nOft wird es ihm aber zum Verhängnis, dass es\nseine Spezialtechniken zu lange in Szene setzt.',
			'Im Kampf manövriert es sich mit gewandten\nSprüngen aus dem Blickfeld seines Gegners.\nEs beherrscht auch prachtvolle Hebeltechniken.',
			'Durch flinke Angriffsmanöver raubt es seinen\nGegnern ihre Kraft, um sie dann mit prachtvollen\nSpezialtechniken niederzuringen.',
			'Bevor es seinem Gegner mit einer Spezialtechnik\nein Ende setzt, posiert es stets. Diesen Moment\nnutzt so mancher für einen Gegenangriff.',
		],
		[Language.Es]: [
			'A pesar de ser un Pokémon de pequeña estatura,\nsu pericia en el combate le permite plantar cara a\nPokémon como Machamp o Hariyama.',
			'Controla su posición en el aire con las alas. Lanza\nataques desde gran altura que resultan difíciles de\nevitar.',
			'A pesar de ser un Pokémon de pequeña estatura, su pericia\nen el combate le permite plantar cara a Pokémon como\nMachamp o Hariyama.',
			'Controla su posición en el aire con las alas. Lanza ataques\ndesde gran altura que resultan difíciles de evitar.',
			'Deja atónito al rival con sus rápidos ataques,\npero se luce tanto antes de dar el golpe\ndefinitivo que a veces sale mal parado.',
			'Con sus ágiles saltos y su juego de piernas,\npermanece siempre en el punto ciego del rival.\nEs un experto en llaves inmovilizadoras.',
			'Se vale de su agilidad para minar las fuerzas del\nrival y, una vez extenuado, remata el combate\nejecutando una técnica formidable.',
			'Siempre se exhibe con alguna pose justo antes\nde propinar el golpe de gracia, momento que\nalgunos rivales aprovechan para contraatacar.',
		],
		[Language.It]: [
			'Nonostante le piccole dimensioni, è in grado di\ntenere testa a Pokémon ben più grandi come\nMachamp o Hariyama.',
			'Grazie alle sue ali riesce a controllare con la massima\nprecisione i movimenti in aria e attacca dall’alto,\nin posizione di vantaggio rispetto ai nemici.',
			'Nonostante le piccole dimensioni, è in grado di tenere testa\na Pokémon ben più grandi come Machamp o Hariyama.',
			'Grazie alle sue ali riesce a controllare con la massima\nprecisione i movimenti in aria e attacca dall’alto, in posizione\ndi vantaggio rispetto ai nemici.',
			'Prevale sul nemico grazie alla sua rapidità, ma a\nvolte per mettersi in mostra aspetta troppo a\nlanciare l’attacco finale e si trova in difficoltà.',
			'Durante la lotta, si porta con agili salti negli\nangoli ciechi della visuale dell’avversario.\nÈ in grado di eseguire magnifiche leve articolari.',
			'Sfrutta la sua agilità per indebolire l’avversario,\ne conclude la lotta dandogli il colpo di grazia\ncon una mossa grandiosa.',
			'Assume sempre una posa speciale prima di\nsferrare il colpo finale. A volte i nemici\napprofittano di questo istante per contrattaccare.',
		],
		[Language.En]: [
			'Although its body is small, its proficient\nfighting skills enable it to keep up with\nbig bruisers like Machamp and Hariyama.',
			'With its wings, it controls its position in the air.\nIt likes to attack from above, a maneuver that\nis difficult to defend against.',
			'It overwhelms opponents with quick moves, but\nsometimes it showboats for too long when it’s\nusing a special move and gets itself into a pinch.',
			'In combat, Hawlucha leaps nimbly about, taking\nadvantage of its opponents’ blind spots. It’s\nalso skilled at using superb submission holds.',
			'It drives its opponents to exhaustion with its agile\nmaneuvers, then ends the fight with a flashy\nfinishing move.',
			'It always strikes a pose before going for its\nfinishing move. Sometimes opponents take\nadvantage of that time to counterattack.',
		],
		[Language.Ja]: [
			'体格は　小柄だが　カイリキーや\nハリテヤマなど　大きな　ポケモンと\n互角に　戦う　テクニシャン。',
			'翼を　使い　空中で　姿勢を\nコントロール。防ぎにくい　頭上から\n攻撃を　仕掛ける。',
			'素早い技で　相手を　圧倒。\n必殺技を　放つ　アピールが\n長すぎて　ピンチに陥ることも。',
			'軽やかな　ジャンプで　相手の\n死角に　まわりつつ　戦う。\n華麗な　関節技も　得意。',
			'身軽さを　活かした　戦法で\n相手の　体力を　奪ってから\n華麗な　大技を　決める。',
			'とどめの　大技を　出す　前は\nかならず　ポーズを　決める。　その\n隙に　反撃される　こともある。',
		],
		[Language.ZhHant]: [
			'用速度快的招式壓倒對手。\n由於使出必殺技時的前置動作太長，\n有時會因此陷入危機。',
			'會用輕盈的跳躍\n跳到對手的死角來戰鬥。\n也很擅長華麗的關節技。',
			'利用發揮輕盈體型優勢的戰法，\n在消耗了對手的體力之後\n使用華麗的絕招分出勝負。',
			'在使出致命的絕招之前\n一定要先擺出華麗的姿勢。\n有時也會在這一刻遭到反擊。',
		],
		[Language.ZhHans]: [
			'用速度快的招式压倒对手。\n使出必杀技时的展示时间过长，\n有时候会陷入危机。',
			'会用轻巧的跳跃\n跳到对手的死角来战斗。\n也很擅长华丽的关节招式。',
			'利用发挥轻盈体型优势的战法，\n在消耗了对手的体力之后\n使用华丽的绝招分出胜负。',
			'在使出致命的绝招之前\n一定要先摆出华丽的姿势。\n有时也会在这一刻遭到反击。',
		],
	},
	[
		[
			Variety.Hawlucha,
			175,
			8,
			215,
			[Type.Fighting, Type.Flying],
			{
				frontDefault: 'f1985693.png',
				frontShiny: '8b16e8be.png',
				backDefault: 'a577a762.png',
				backShiny: '580180a5.png',
			},
			{
				[Stat.Hp]: {baseStat: 78},
				[Stat.Attack]: {baseStat: 92, effort: 2},
				[Stat.Defense]: {baseStat: 75},
				[Stat.SpecialAttack]: {baseStat: 74},
				[Stat.SpecialDefense]: {baseStat: 63},
				[Stat.Speed]: {baseStat: 118},
			},
			{
				[Version.X]: {
					[Item.KingsRock]: 5,
				},
				[Version.Y]: {
					[Item.KingsRock]: 5,
				},
				[Version.OmegaRuby]: {
					[Item.KingsRock]: 5,
				},
				[Version.AlphaSapphire]: {
					[Item.KingsRock]: 5,
				},
				[Version.Sun]: {
					[Item.KingsRock]: 5,
				},
				[Version.Moon]: {
					[Item.KingsRock]: 5,
				},
				[Version.UltraSun]: {
					[Item.KingsRock]: 5,
				},
				[Version.UltraMoon]: {
					[Item.KingsRock]: 5,
				},
			},
			[
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.FocusPunch,
					Move.HelpingHand,
					Move.Endeavor,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.IronHead,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Dig,
					Move.Agility,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.SleepTalk,
					Move.BatonPass,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.UTurn,
					Move.Fling,
					Move.PoisonJab,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Acrobatics,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					4,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.HoneClaws,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.HyperBeam,
					Move.Thief,
					Move.Uproar,
					Move.FeatherDance,
					Move.Lunge,
					Move.TeraBlast,
					Move.Trailblaze,
					Move.UpperHand,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Swift,
					Move.Reversal,
					Move.Endure,
					Move.Encore,
					Move.CloseCombat,
					Move.BraveBird,
					Move.BodyPress,
					Move.Coaching,
					Move.DualWingbeat,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HighJumpKick,
					48,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SkyAttack,
					56,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Detect,
					8,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.MeanLook,
					Move.CrossChop,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Encore,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Taunt,
					32,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BrickBreak,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					52,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FeatherDance,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					36,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Feint,
					Move.Defog,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Entrainment,
					Move.QuickGuard,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FlyingPress,
					44,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.ThroatChop,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.MegaPunch,
					Move.FirePunch,
					Move.ThunderPunch,
					Move.SwordsDance,
					Move.Fly,
					Move.MegaKick,
					Move.LowKick,
					Move.Dig,
					Move.Agility,
					Move.Swift,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Reversal,
					Move.Protect,
					Move.Endure,
					Move.FalseSwipe,
					Move.SleepTalk,
					Move.BatonPass,
					Move.Encore,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.Taunt,
					Move.HelpingHand,
					Move.Revenge,
					Move.BrickBreak,
					Move.RockTomb,
					Move.BulkUp,
					Move.UTurn,
					Move.CloseCombat,
					Move.Assurance,
					Move.Fling,
					Move.PoisonJab,
					Move.XScissor,
					Move.DrainPunch,
					Move.FocusBlast,
					Move.BraveBird,
					Move.GigaImpact,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Acrobatics,
					Move.ThroatChop,
					Move.BodyPress,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					4,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.HoneClaws,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Submission,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HighJumpKick,
					48,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SkyAttack,
					56,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.Superpower,
					Move.Bounce,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Detect,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SteelWing,
					Move.Attract,
					Move.Payback,
					Move.Round,
					Move.AllySwitch,
					Move.Retaliate,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.MeanLook,
					Move.CrossChop,
					Move.Feint,
					Move.Defog,
					Move.Entrainment,
					Move.QuickGuard,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Encore,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Taunt,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					52,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FeatherDance,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.WorkUp,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FlyingPress,
					44,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Coaching,
					Move.DualWingbeat,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.KarateChop,
					4,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.Snore,
					Move.FocusPunch,
					Move.HelpingHand,
					Move.Superpower,
					Move.Endeavor,
					Move.Bounce,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.Defog,
					Move.IronHead,
					Move.AllySwitch,
					Move.LaserFocus,
					Move.ThroatChop,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					60,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.UTurn,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Round,
					Move.Acrobatics,
					Move.WorkUp,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					8,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.HoneClaws,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.Roost,
					Move.SkyDrop,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Agility,
					Move.BatonPass,
					Move.Feint,
					Move.Entrainment,
					Move.QuickGuard,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HighJumpKick,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SkyAttack,
					48,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.SkyAttack,
					Move.Tailwind,
					Move.LastResort,
					Move.DualChop,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Detect,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Encore,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FeatherDance,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.MudSport,
					Move.MeFirst,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Fling,
					24,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SkyDrop,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FlyingPress,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.KarateChop,
					4,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					60,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.Roost,
					Move.UTurn,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Round,
					Move.SkyDrop,
					Move.Acrobatics,
					Move.WorkUp,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Detect,
					Move.HoneClaws,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Agility,
					Move.BatonPass,
					Move.MudSport,
					Move.MeFirst,
					Move.Entrainment,
					Move.QuickGuard,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HighJumpKick,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SkyAttack,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Encore,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FeatherDance,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					16,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					32,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Fling,
					24,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SkyDrop,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FlyingPress,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.KarateChop,
					4,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.LowKick,
					Move.SkyAttack,
					Move.Snore,
					Move.FocusPunch,
					Move.HelpingHand,
					Move.Superpower,
					Move.Endeavor,
					Move.Bounce,
					Move.Tailwind,
					Move.LastResort,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.IronHead,
					Move.DualChop,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					60,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Fly,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.SecretPower,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.Roost,
					Move.UTurn,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.LowSweep,
					Move.Round,
					Move.SkyDrop,
					Move.Acrobatics,
					Move.Retaliate,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.RockSmash,
					Move.HoneClaws,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					8,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Detect,
					Move.HoneClaws,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Agility,
					Move.BatonPass,
					Move.MudSport,
					Move.MeFirst,
					Move.Entrainment,
					Move.QuickGuard,
					Move.AllySwitch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HighJumpKick,
					44,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SkyAttack,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Encore,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					36,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FeatherDance,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					16,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					32,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					12,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Fling,
					24,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SkyDrop,
					55,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FlyingPress,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.KarateChop,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SwordsDance,
					60,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SwordsDance,
					Move.Cut,
					Move.Fly,
					Move.Strength,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.FalseSwipe,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.RockSmash,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.RockTomb,
					Move.AerialAce,
					Move.BulkUp,
					Move.Roost,
					Move.UTurn,
					Move.Payback,
					Move.Fling,
					Move.PoisonJab,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.HoneClaws,
					Move.LowSweep,
					Move.Round,
					Move.SkyDrop,
					Move.Acrobatics,
					Move.Retaliate,
					Move.Confide,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Detect,
					Move.HoneClaws,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Agility,
					Move.BatonPass,
					Move.MudSport,
					Move.MeFirst,
					Move.Entrainment,
					Move.QuickGuard,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HighJumpKick,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SkyAttack,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Encore,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Endeavor,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FeatherDance,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AerialAce,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bounce,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Fling,
					24,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SkyDrop,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FlyingPress,
					28,
				),
			].flat(),
			[
				{
					ability: Ability.Limber,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Unburden,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.MoldBreaker,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Hawlucha,
					PokemonFormBits.Default,
					{
						frontDefault: 'f1985693.png',
						frontShiny: '8b16e8be.png',
						backDefault: 'a577a762.png',
						backShiny: '580180a5.png',
					},
					[Type.Fighting, Type.Flying],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Dedenne,
	50,
	180,
	Color.Yellow,
	[EggGroup.Ground, EggGroup.Fairy],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['デデンネ'],
		[Language.Roomaji]: ['Dedenne'],
		[Language.Ko]: ['데덴네'],
		[Language.ZhHant]: ['咚咚鼠'],
		[Language.Fr]: ['Dedenne'],
		[Language.De]: ['Dedenne'],
		[Language.Es]: ['Dedenne'],
		[Language.It]: ['Dedenne'],
		[Language.En]: ['Dedenne'],
		[Language.Ja]: ['デデンネ'],
		[Language.ZhHans]: ['咚咚鼠'],
	},
	{
		[Language.JaHrkt]: ['アンテナポケモン'],
		[Language.Ko]: ['안테나포켓몬'],
		[Language.ZhHant]: ['天線寶可夢'],
		[Language.Fr]: ['Pokémon Antenne'],
		[Language.De]: ['Antennen-Pokémon'],
		[Language.Es]: ['Pokémon Antenas'],
		[Language.It]: ['Pokémon Antenna'],
		[Language.En]: ['Antenna Pokémon'],
		[Language.Ja]: ['アンテナポケモン'],
		[Language.ZhHans]: ['天线宝可梦'],
	},
	{
		[Language.ZhHant]: [
			'能用鬍鬚接收來自夥伴們\n的電波，藉此向彼此分享\n哪裡有食物或電力。',
			'會潛入人們家裡，從插座偷電。\n如果發現電費不正常，\n那就是這傢伙幹的。',
			'上面的鬍鬚是探索周遭環境\n的感應器，長在下面的鬍鬚\n是釋放電流的器官。',
			'由於發電的能力不強，\n因此會從插座或其他的\n電氣寶可夢那裡偷電。',
		],
		[Language.JaHrkt]: [
			'ヒゲが　アンテナの　やくわり。\nでんぱを　そうじゅしんして　とおくの\nなかまと　れんらくを　とりあうのだ。',
			'しっぽで　はつでんしょや　みんかの\nコンセントから　でんきを　すいとり\nヒゲから　でんげきを　うちだす。',
			'みんかに　しのびこみ　コンセントから\nでんきを　ぬすむ。　でんきだいが\nおかしいときは　こいつの　しわざ。',
			'うえの　ヒゲは　あたりを　さぐる\nセンサーで　したに　はえた　ヒゲは\nでんきを　はなつ　きかん　なのだ。',
			'なかまの　はなつ　でんぱを　ヒゲで\nキャッチ。　エサや　でんきの\nありかを　みんなで　シェアするのだ。',
			'でんきを　うみだす　ちからが\nよわいので　コンセントや　ほかの\nでんきポケモンから　ぬすむのだ。',
		],
		[Language.Ko]: [
			'수염이 안테나의 역할을 한다.\n전파를 송수신해서 멀리 떨어진\n동료와 서로 연락하는 것이다.',
			'꼬리로 발전소나 민가의\n콘센트에서 전기를 흡수하여\n수염에서 전격을 날린다.',
			'민가에 숨어들어 콘센트에서\n전기를 훔친다. 전기료가\n이상할 때는 이 녀석의 소행이다.',
			'위쪽 수염은 주변을 살피는\n센서이고 아래로 난 수염은\n전기를 발산하는 기관이다.',
			'동료가 내뿜는 전파를 수염으로\n감지한다. 먹이나 전기의 위치를\n모두와 함께 공유한다.',
			'전기를 만들어내는 힘이\n약해서 콘센트나 다른\n전류포켓몬에게 훔친다.',
		],
		[Language.Fr]: [
			'Ses moustaches lui servent d’antennes, et lui\npermettent d’envoyer et de recevoir des signaux\npour communiquer à distance avec ses congénères.',
			'Il utilise sa queue pour pomper l’énergie des centrales\nélectriques ou pour se brancher sur les prises des\nmaisons. Ses moustaches envoient des décharges.',
			'Ses moustaches lui servent d’antennes, et lui permettent\nd’envoyer et de recevoir des signaux pour communiquer\nà distance avec ses congénères.',
			'Il utilise sa queue pour pomper l’énergie des centrales\nélectriques ou pour se brancher sur les prises des maisons.\nSes moustaches envoient des décharges.',
			'Il s’introduit chez les gens pour voler l’électricité\nvia les prises de courant. On sait qui blâmer\nen cas de facture d’électricité trop élevée !',
			'Les moustaches du haut lui servent de capteurs\npour inspecter son environnement ; celles du\nbas lui permettent de décharger de l’électricité.',
			'Il capte les ondes émises par ses congénères\navec ses moustaches. Cela lui permet de savoir\noù trouver de la nourriture ou de l’électricité.',
			'Puisqu’il a du mal à générer sa propre électricité,\nil en vole aux autres Pokémon Électrik ou via\nles prises de courant.',
		],
		[Language.De]: [
			'Seine Schnurrhaare dienen ihm als Antennen. Durch\ndas Senden und Empfangen von elektrischen Wellen\nkann es mit weit entfernten Freunden kommunizieren.',
			'Mit seinem Schwanz zapft es Kraftwerke sowie\nSteckdosen in Häusern an, um Strom zu tanken,\nden es über seine Schnurrhaare wieder entlädt.',
			'Seine Schnurrhaare dienen ihm als Antennen. Durch das\nSenden und Empfangen von elektrischen Wellen kann es\nmit weit entfernten Freunden kommunizieren.',
			'Mit seinem Schwanz zapft es Kraftwerke sowie Steckdosen\nin Häusern an, um Strom zu tanken, den es über seine\nSchnurrhaare wieder entlädt.',
			'Es schleicht sich in Häuser und zapft an den\nSteckdosen Strom ab. Fällt die Stromrechnung\nmal unerwartet hoch aus, ist Dedenne schuld.',
			'Seine oberen Schnurrhaare dienen ihm als\nSensoren zum Abtasten der Umgebung. Seine\nunteren Schnurrhaare erzeugen Elektrizität.',
			'Mit den Schnurrhaaren empfangen sie elektrische\nWellen von Artgenossen. So teilen sie einander\nmit, wo Futter und Elektrizität zu finden sind.',
			'Dedenne selbst kann nur wenig Elektrizität\nerzeugen, weshalb es Strom von anderen\nElektro-Pokémon oder aus Steckdosen stiehlt.',
		],
		[Language.Es]: [
			'Sus bigotes hacen la función de antenas, por lo\nque puede enviar y recibir ondas eléctricas para\ncomunicarse a grandes distancias.',
			'Con su cola absorbe la electricidad procedente de las\ncentrales de energía o los enchufes de las casas,\npara liberarla en forma de ataque por los bigotes.',
			'Sus bigotes hacen la función de antenas, por lo que puede\nenviar y recibir ondas eléctricas para comunicarse a grandes\ndistancias.',
			'Con su cola absorbe la electricidad procedente de las\ncentrales de energía o los enchufes de las casas, para\nliberarla en forma de ataque por los bigotes.',
			'Se infiltra en los hogares para robar energía de\nlos enchufes. Si la factura de la electricidad es\ninusualmente alta, seguro que él tiene la culpa.',
			'Los bigotes superiores actúan como sensores\ndel entorno, mientras que los inferiores son\nórganos que generan electricidad.',
			'Se sirve de sus bigotes para captar las ondas que\nemiten sus compañeros, con las que se indican\ndónde encontrar sustento o electricidad.',
			'Su capacidad para producir electricidad es muy\nlimitada, de modo que tiene que robarla de las\ntomas de corriente o de otros Pokémon.',
		],
		[Language.It]: [
			'I suoi baffi fungono da antenne che trasmettono e\nricevono onde radio. Se ne serve per comunicare\ncon i suoi simili.',
			'Con la coda può assorbire energia dalle prese di\ncorrente di centrali elettriche e abitazioni per poi\nscaricarla dai baffi.',
			'I suoi baffi fungono da antenne che trasmettono e ricevono\nonde radio. Se ne serve per comunicare con i suoi simili.',
			'Con la coda può assorbire energia dalle prese di corrente\ndi centrali elettriche e abitazioni per poi scaricarla dai baffi.',
			'Si intrufola nelle case per rubare energia dalle\nprese elettriche. Se la bolletta della luce è\nstranamente alta, c’è di sicuro il suo zampino!',
			'I baffi superiori sono sensori con cui sonda\nl’ambiente circostante, mentre quelli inferiori\nsono organi che emettono elettricità.',
			'Usa i baffi per captare le onde radio emesse\ndai suoi simili. Così condivide informazioni\nsu dove trovare cibo ed elettricità.',
			'Non riuscendo a produrre molta elettricità,\nla ruba dalle prese di corrente o da\naltri Pokémon di tipo Elettro.',
		],
		[Language.En]: [
			'Its whiskers serve as antennas. By sending and\nreceiving electrical waves, it can communicate\nwith others over vast distances.',
			'It uses its tail to absorb electricity from\npower plants or from outlets in houses,\nand then it fires the electricity from its whiskers.',
			'It sneaks into people’s homes and steals\nelectricity from their outlets. When your electric\nbill seems off, it’s the handiwork of this rascal.',
			'Its upper whiskers are sensors that survey its\nsurroundings. Its lower whiskers are organs\nthat shoot electricity.',
			'A Dedenne’s whiskers pick up electrical waves\nother Dedenne send out. These Pokémon share\nlocations of food or electricity with one another.',
			'Since Dedenne can’t generate much electricity on\nits own, it steals electricity from outlets or other\nelectric Pokémon.',
		],
		[Language.Ja]: [
			'ヒゲが　アンテナの　役割。\n電波を　送受信して　遠くの　仲間と\n連絡を　取り合うのだ。',
			'尻尾で　発電所や　民家の\nコンセントから　電気を　吸い取り\nヒゲから　電撃を　撃ち出す。',
			'民家に　忍びこみ　コンセントから\n電気を　盗む。　電気代が\nおかしいときは　こいつの　仕業。',
			'上の　ヒゲは　辺りを　探る\nセンサーで　下に　生えた　ヒゲは\n電気を　放つ　器官　なのだ。',
			'仲間の　放つ　電波を　ヒゲで\nキャッチ。　エサや　電気の　ありかを\nみんなで　シェアするのだ。',
			'電気を　生みだす　力が　弱いので\nコンセントや　ほかの\n電気ポケモンから　盗むのだ。',
		],
		[Language.ZhHans]: [
			'潜入民居，从插座里偷电。\n电费很奇怪的时候，\n就是这家伙的杰作。',
			'上面的胡子是探索周边的感应器。\n下面长出的胡子是释放电的器官。',
			'用胡子来感知伙伴发出\n的电波。它们通过这种方式\n告诉彼此哪里有食物和电。',
			'由于发电的能力弱，\n会从插座或其他的\n电气宝可梦那里偷电。',
		],
	},
	[
		[
			Variety.Dedenne,
			151,
			2,
			22,
			[Type.Electric, Type.Fairy],
			{
				frontDefault: '84d27ba9.png',
				frontShiny: '2f6d8d5e.png',
				backDefault: '2e89d95a.png',
				backShiny: '93ff7db0.png',
			},
			{
				[Stat.Hp]: {baseStat: 67},
				[Stat.Attack]: {baseStat: 58},
				[Stat.Defense]: {baseStat: 57},
				[Stat.SpecialAttack]: {baseStat: 81},
				[Stat.SpecialDefense]: {baseStat: 67},
				[Stat.Speed]: {baseStat: 101, effort: 2},
			},
			{},
			[
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.ThunderPunch,
					Move.SuperFang,
					Move.Electroweb,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					5,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.HyperBeam,
					Move.Agility,
					Move.LightScreen,
					Move.Swift,
					Move.Charge,
					Move.Endeavor,
					Move.SeedBomb,
					Move.DrainingKiss,
					Move.MistyTerrain,
					Move.TeraBlast,
					Move.Trailblaze,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.ThunderShock,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Dig,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.HelpingHand,
					Move.UTurn,
					Move.Fling,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.VoltSwitch,
					Move.WildCharge,
					Move.EerieImpulse,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Thunder,
					60,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 35,
					},

					Move.Rest,
					Move.Snore,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					50,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Endure,
					Move.Charm,
					Move.ElectroBall,
					Move.PlayRough,
					Move.ElectricTerrain,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Charge,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.Covet,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.MagnetRise,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Discharge,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					55,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.VoltSwitch,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.ParabolicCharge,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					45,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Nuzzle,
					1,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.TearfulLook,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.ThunderPunch,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Dig,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Endure,
					Move.Charm,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.HelpingHand,
					Move.UTurn,
					Move.Fling,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.ElectroBall,
					Move.VoltSwitch,
					Move.Electroweb,
					Move.WildCharge,
					Move.PlayRough,
					Move.EerieImpulse,
					Move.ElectricTerrain,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.TailWhip,
					Move.Nuzzle,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ThunderShock,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Thunder,
					60,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 35,
					},

					Move.Rest,
					Move.Snore,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					50,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronTail,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Round,
					Move.Retaliate,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Charge,
					10,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Covet,
					Move.MagnetRise,
					Move.TearfulLook,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Discharge,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					55,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.VoltSwitch,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ParabolicCharge,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					45,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.RisingVoltage,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ThunderPunch,
					Move.SuperFang,
					Move.Snore,
					Move.IronTail,
					Move.HelpingHand,
					Move.Covet,
					Move.MagnetRise,
					Move.AllySwitch,
					Move.Electroweb,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TailWhip,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ThunderShock,
					7,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.UTurn,
					Move.Fling,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.Round,
					Move.VoltSwitch,
					Move.WildCharge,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Thunder,
					45,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.AerialAce,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Rest,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Snore,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					14,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Charge,
					11,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.HelpingHand,
					Move.Covet,
					Move.EerieImpulse,
					Move.TearfulLook,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Recycle,
					Move.SignalBeam,
					Move.ShockWave,
					Move.LastResort,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Egg,
					Move.NaturalGift,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Discharge,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ChargeBeam,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.VoltSwitch,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ParabolicCharge,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Nuzzle,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ThunderShock,
					7,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.Round,
					Move.VoltSwitch,
					Move.WildCharge,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Thunder,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Rest,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Snore,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					14,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Charge,
					11,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.HelpingHand,
					Move.Covet,
					Move.NaturalGift,
					Move.EerieImpulse,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Discharge,
					50,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ChargeBeam,
					34,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					39,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.VoltSwitch,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ParabolicCharge,
					17,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Nuzzle,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ThunderPunch,
					Move.SuperFang,
					Move.Snore,
					Move.IronTail,
					Move.HelpingHand,
					Move.Recycle,
					Move.SignalBeam,
					Move.Covet,
					Move.ShockWave,
					Move.LastResort,
					Move.MagnetRise,
					Move.Electroweb,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Flash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ThunderShock,
					7,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.SecretPower,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.Round,
					Move.Retaliate,
					Move.VoltSwitch,
					Move.WildCharge,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Thunder,
					45,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Rest,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Snore,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					14,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Charge,
					11,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.HelpingHand,
					Move.Covet,
					Move.NaturalGift,
					Move.EerieImpulse,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Discharge,
					50,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ChargeBeam,
					34,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					39,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.VoltSwitch,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ParabolicCharge,
					17,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Nuzzle,
					20,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.AerialAce,
					Move.UTurn,
					Move.Fling,
					Move.GigaImpact,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.Round,
					Move.Retaliate,
					Move.VoltSwitch,
					Move.WildCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.TailWhip,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ThunderShock,
					7,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ThunderWave,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Thunder,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Rest,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Snore,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Charm,
					14,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Charge,
					11,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.HelpingHand,
					Move.Covet,
					Move.NaturalGift,
					Move.EerieImpulse,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Discharge,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ChargeBeam,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Entrainment,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.VoltSwitch,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ParabolicCharge,
					17,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Nuzzle,
					20,
				),
			].flat(),
			[
				{
					ability: Ability.CheekPouch,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Pickup,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Plus,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Dedenne,
					PokemonFormBits.Default,
					{
						frontDefault: '84d27ba9.png',
						frontShiny: '2f6d8d5e.png',
						backDefault: '2e89d95a.png',
						backShiny: '93ff7db0.png',
					},
					[Type.Electric, Type.Fairy],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Carbink,
	50,
	60,
	Color.Gray,
	[EggGroup.Fairy, EggGroup.Mineral],
	-1,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	25,
	GrowthRate.Slow,
	Shape.Ball,
	{
		[Language.JaHrkt]: ['メレシー'],
		[Language.Roomaji]: ['Melecie'],
		[Language.Ko]: ['멜리시'],
		[Language.ZhHant]: ['小碎鑽'],
		[Language.Fr]: ['Strassie'],
		[Language.De]: ['Rocara'],
		[Language.Es]: ['Carbink'],
		[Language.It]: ['Carbink'],
		[Language.En]: ['Carbink'],
		[Language.Ja]: ['メレシー'],
		[Language.ZhHans]: ['小碎钻'],
	},
	{
		[Language.JaHrkt]: ['ほうせきポケモン'],
		[Language.Ko]: ['보석포켓몬'],
		[Language.ZhHant]: ['寶石寶可夢'],
		[Language.Fr]: ['Pokémon Joyau'],
		[Language.De]: ['Edelstein-Pokémon'],
		[Language.Es]: ['Pokémon Joya'],
		[Language.It]: ['Pokémon Gemma'],
		[Language.En]: ['Jewel Pokémon'],
		[Language.Ja]: ['ほうせきポケモン'],
		[Language.ZhHans]: ['宝石宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'ちかふかくの　こうおん　こうあつな\nかんきょうで　うまれた。あたまの\nいしから　エネルギーを　はなつ。',
			'うまれてから　すうおくねんの　あいだ\nちていで　ねむっていた。どうくつを\nほると　たまに　でてくる。',
			'こうおん　こうあつの　ちかふかくで\nうまれる。　ほうせきの　ぶぶんから\nビームを　はなち　みを　まもるぞ。',
			'さほど　めずらしいわけではないが\nキラキラと　かがやく　ほうせきの\nからだが　じょせいに　にんきだ。',
			'ちていの　おくふかくには　メレシーの\nむれと　その　じょおうが　くらす\nほうせきの　くにが　あるという。',
			'からだの　ほうせきが　くもらないよう\nメレシーの　むれでは　ふわふわの\nヒゲで　おたがいを　みがきあうのだ。',
			'からだに　うまっている　ほうせきから\nこうエネルギーの　ビームを　はなち\nおそいかかる　てきを　いっそうする。',
			'せかいの　どこかには　メレシーが\nたくさん　ねむる　こうみゃくがあり\nむれの　じょおうも　いるという。',
		],
		[Language.Ko]: [
			'지하 깊은 곳에 있는 고온, 고압의\n환경에서 태어났다. 머리의\n돌에서 에너지를 방출한다.',
			'태어나서 수억 년 동안\n땅속에 잠들어 있었다. 동굴을\n파면 가끔 나오곤 한다.',
			'고온 고압의 지하 깊은 곳에서\n태어난다. 보석 부분에서\n빔을 발사하여 몸을 지킨다.',
			'그다지 희귀하지는 않지만\n반짝반짝 빛나는 보석으로 된\n몸이 여성에게 인기다.',
			'땅속 깊숙한 곳에는 멜리시의\n무리와 그들의 여왕이 사는\n보석의 나라가 있다고 한다.',
			'몸에 있는 보석의 색이 바래지 않도록\n멜리시의 무리는 푹신푹신한\n수염으로 서로를 닦아준다.',
			'몸에 묻어 있는 보석에서\n강한 에너지 빔을 쏘아 덤벼드는\n적을 한꺼번에 날려버린다.',
			'세상 어딘가에는 멜리시가\n많이 잠들어 있는 광맥이 있고\n무리의 여왕도 있다고 한다.',
		],
		[Language.Fr]: [
			'Ce Pokémon vient des profondeurs de la terre,\noù la chaleur et la pression sont intenses.\nLa pierre qui orne sa tête émet de l’énergie.',
			'Il sommeille sous terre depuis son apparition, il y a\nplusieurs centaines de millions d’années.\nOn le découvre parfois en creusant des cavernes.',
			'Ce Pokémon vient des profondeurs de la terre, où la chaleur\net la pression sont intenses. La pierre qui orne sa tête émet\nde l’énergie.',
			'Il sommeille sous terre depuis son apparition, il y a\nplusieurs centaines de millions d’années. On le découvre\nparfois en creusant des cavernes.',
			'Les Strassie sont nés sous la terre, à de hautes\npressions et températures. Ils se défendent\nen lançant des lasers depuis leurs cristaux.',
			'Il ne s’agit pas d’un Pokémon particulièrement\nrare, mais son allure strass et paillettes attire\nles gens.',
			'Au plus profond de la terre se trouverait\nun royaume de pierres précieuses où vivent\nla reine des Strassie et son peuple.',
			'Pour éviter que les pierres précieuses de leur\ncorps ne ternissent, les Strassie se les polissent\nmutuellement avec leurs moustaches.',
			'Ce Pokémon élimine les ennemis qui l’attaquent\nen projetant un laser d’énergie généré par\nles pierres précieuses incrustées dans son corps.',
			'On raconte qu’il existerait quelque part dans\nle monde un filon regorgeant de Strassie,\nqui abriterait également leur reine.',
		],
		[Language.De]: [
			'Dieses Pokémon entstand aus Druck und Hitze\nin den tiefsten Erdschichten. Mithilfe des Steines\nin seinem Kopf feuert es Energiestrahlen ab.',
			'Nach seiner Geburt brachte es hunderte Millionen von\nJahren tief unter der Erde schlafend zu. Es tritt\ngelegentlich bei Höhlengrabungen zutage.',
			'Dieses Pokémon entstand aus Druck und Hitze in den tiefsten\nErdschichten. Mithilfe des Steines in seinem Kopf feuert es\nEnergiestrahlen ab.',
			'Nach seiner Geburt brachte es hunderte Millionen von\nJahren tief unter der Erde schlafend zu. Es tritt gelegentlich\nbei Höhlengrabungen zutage.',
			'Druck und Hitze tiefster Erdschichten erzeugten\ndieses Pokémon. Seine funkelnden Körperstellen\nsondern Strahlen ab, mit denen es sich schützt.',
			'Der Edelstein, der in seinem Körper steckt,\nist zwar recht gewöhnlich, aber da er schön\nfunkelt, ist das Pokémon trotzdem sehr beliebt.',
			'Tief unter der Erde gibt es angeblich ein\nKönigreich aus Diamanten, in dem Rocara\nzusammen mit ihrer Königin leben.',
			'Um zu verhindern, dass die Edelsteine an ihrem\nKörper den Glanz verlieren, polieren sich Rocara\ngegenseitig mit ihren flauschigen Bärten.',
			'Es feuert hochenergetische Strahlen aus den\nEdelsteinen ab, mit denen sein Körper besetzt\nist, und erledigt so angreifende Gegner.',
			'Es heißt, irgendwo auf der Welt gäbe es eine\nGesteinsader aus schlafenden Rocara. Dort soll\nman auch ihre Königin antreffen können.',
		],
		[Language.Es]: [
			'Nace en las profundidades subterráneas, a altas\ntemperaturas y a gran presión. Irradia energía por\nla roca que tiene en la cabeza.',
			'Lleva varios cientos de millones de años durmiendo en\nlas profundidades subterráneas, desde su nacimiento.\nAparece a veces al excavar en cuevas.',
			'Nace en las profundidades subterráneas, a altas temperaturas\ny a gran presión. Irradia energía por la roca que tiene en la\ncabeza.',
			'Lleva varios cientos de millones de años durmiendo en las\nprofundidades subterráneas, desde su nacimiento. Aparece\na veces al excavar en cuevas.',
			'Nace en las profundidades subterráneas, a altas\ntemperaturas y a gran presión. Lanza rayos por\nsus gemas a modo de defensa.',
			'Aunque no es un Pokémon especialmente raro\nde ver, el brillo de las joyas que lleva\nincrustadas lo hace muy popular.',
			'Se dice que en las profundidades subterráneas\nviven grupos enteros de Carbink con su reina\nrodeados de toda suerte de joyas.',
			'Para que las piedras preciosas que adornan sus\ncuerpos no pierdan lustre, los Carbink se las\npulen unos a otros con sus mullidos bigotes.',
			'Fulmina a sus enemigos con potentes rayos de\nenergía que dispara por las gemas que tiene\nincrustadas en el cuerpo.',
			'Se cree que en algún lugar de este mundo existe\nun filón rebosante de Carbink que viven bajo las\nórdenes de una reina.',
		],
		[Language.It]: [
			'Nato in ambienti sotterranei a elevati livelli di pressione\ne temperatura, emette energia dalla pietra che ha\nsulla testa.',
			'Dopo la nascita, dorme nelle viscere della terra per\nmilioni di anni. A volte se ne trova qualche esemplare\nscavando nelle caverne.',
			'Nato in ambienti sotterranei a elevati livelli di pressione e\ntemperatura, emette energia dalla pietra che ha sulla testa.',
			'Dopo la nascita, dorme nelle viscere della terra per milioni\ndi anni. A volte se ne trova qualche esemplare scavando\nnelle caverne.',
			'Questo Pokémon nasce sottoterra in condizioni\ndi pressione e temperatura estreme. Si difende\nemettendo raggi dalle gemme.',
			'Pur non essendo particolarmente raro, è molto\napprezzato per le scintillanti pietre preziose\ndi cui è cosparso il suo corpo.',
			'Corre voce che nelle profondità della terra\nci sia un regno fatto di pietre preziose dove\nvivono i Carbink assieme alla loro regina.',
			'Per evitare che le pietre preziose che adornano\nil loro corpo perdano lucentezza, i Carbink se le\nlucidano a vicenda con i morbidi baffi.',
			'Le gemme incastonate nel suo corpo\nemettono potenti raggi energetici con cui\nspazza via i nemici che lo attaccano.',
			'Si dice che da qualche parte nel mondo c’è\nuna miniera in cui i Carbink dormono assieme\nalla loro regina.',
		],
		[Language.En]: [
			'Born from the temperatures and pressures\ndeep underground, it fires beams from the\nstone in its head.',
			'It has slept underground for hundreds of millions\nof years since its birth. It’s occasionally found\nduring the excavation of caves.',
			'Born from the high temperatures and pressures\ndeep underground, it defends itself by firing\nbeams from the jewel part of its body.',
			'Although this Pokémon is not especially rare,\nits glittering, jewel-draped body draws\nattention from people.',
			'Some say that deep beneath the surface of the\nworld, a pack of Carbink live with their queen in\na kingdom of jewels.',
			'To keep the jewels on their bodies free of\ntarnish, packs of Carbink use their soft manes\nto polish one another’s jewels.',
			'When beset by attackers, Carbink wipes them all\nout by firing high-energy beams from the gems\nembedded in its body.',
			'It’s said that somewhere in the world, there’s\na mineral vein housing a large pack of slumbering\nCarbink. It’s also said that this pack has a queen.',
		],
		[Language.Ja]: [
			'地下深くの　高温　高圧な\n環境で　生まれた。\n頭の　石から　エネルギーを　放つ。',
			'生まれてから　数億年の間\n地底で　眠っていた。\n洞窟を　掘ると　たまに　出てくる。',
			'高温　高圧の　地下深くで\n生まれる。　宝石の　部分から\nビームを　放ち　身を　守るぞ。',
			'さほど　珍しいわけではないが\nキラキラと　輝く　宝石の\n身体が　女性に　人気だ。',
			'地底の　奥深くには　メレシーの\n群れと　その　女王が　暮らす\n宝石の　国が　あるという。',
			'身体の　宝石が　曇らないよう\nメレシーの　群れでは　ふわふわの\nヒゲで　お互いを　磨きあうのだ。',
			'体に　埋まっている　宝石から\n高エネルギーの　ビームを　放ち\n襲いかかる　敵を　一掃する。',
			'世界の　どこかには　メレシーが\nたくさん　眠る　鉱脈があり\n群れの　女王も　いるという。',
		],
		[Language.ZhHant]: [
			'出生在高溫高壓的地底深處。\n從寶石的部分釋放光束保護身體。',
			'雖然並不是很稀有，\n但閃閃發光的寶石身體\n很受女性歡迎。',
			'據說在地底的深處，\n有著小碎鑽族群和牠們的女王\n所居住的寶石王國。',
			'為了不讓身上的寶石失去光芒，\n小碎鑽的群體會用蓬鬆的鬍子\n互相打磨彼此的身體。',
			'會從嵌在身體的寶石\n發射出高能量的光線，\n將來襲的敵人一掃而盡。',
			'據說在世界的某處，有個\n沉睡著許多小碎鑽的礦床，\n群體的女王也在那裡。',
		],
		[Language.ZhHans]: [
			'出生在高温高压的地下深处。\n从宝石的部分放出光束保护身体。',
			'虽然并不是那么的稀有，\n但闪闪发光的宝石身体\n在女性中很受欢迎。',
			'据说，在地底的深处，\n有着小碎钻群体和它们的女王\n共同生活的宝石王国。',
			'为了不让身体上的宝石黯淡，\n小碎钻群体间会用蓬松的胡子\n互相打磨对方。',
			'从体内埋藏的宝石中发射出\n高能量的光线，将所有\n来袭的敌人都一扫而尽。',
			'据说在世界上的某处，有个\n沉睡着许多小碎钻的矿脉，\n它们的女王也在那里。',
		],
	},
	[
		[
			Variety.Carbink,
			100,
			3,
			57,
			[Type.Rock, Type.Fairy],
			{
				frontDefault: 'e0f168cf.png',
				frontShiny: '8f18581a.png',
				backDefault: 'a7b8c486.png',
				backShiny: 'c87e428c.png',
			},
			{
				[Stat.Hp]: {baseStat: 50},
				[Stat.Attack]: {baseStat: 50},
				[Stat.Defense]: {baseStat: 150, effort: 1},
				[Stat.SpecialAttack]: {baseStat: 50},
				[Stat.SpecialDefense]: {baseStat: 150, effort: 1},
				[Stat.Speed]: {baseStat: 50},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.DoubleEdge,
					Move.HyperBeam,
					Move.Spikes,
					Move.RainDance,
					Move.Endeavor,
					Move.RockBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.IronHead,
					Move.HeavySlam,
					Move.MistyTerrain,
					Move.TeraBlast,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.RockTomb,
					Move.CalmMind,
					Move.GyroBall,
					Move.TrickRoom,
					Move.StoneEdge,
					Move.SmackDown,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RockSlide,
					35,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Endure,
					Move.Charm,
					Move.SandTomb,
					Move.PowerGem,
					Move.BodyPress,
					Move.MeteorBeam,
					Move.MistyExplosion,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					40,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SkillSwap,
					Move.IronDefense,
					Move.Gravity,
					Move.EarthPower,
					Move.StealthRock,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RockPolish,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PowerGem,
					45,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					60,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					50,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					5,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					10,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					55,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Endure,
					Move.Charm,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.Facade,
					Move.SkillSwap,
					Move.RockTomb,
					Move.SandTomb,
					Move.IronDefense,
					Move.CalmMind,
					Move.GyroBall,
					Move.GuardSwap,
					Move.PowerGem,
					Move.EarthPower,
					Move.TrickRoom,
					Move.StoneEdge,
					Move.StealthRock,
					Move.DazzlingGleam,
					Move.StompingTantrum,
					Move.BodyPress,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.RockSlide,
					35,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.WonderRoom,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Safeguard,
					Move.Hail,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.RockPolish,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PowerGem,
					45,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					60,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					50,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					5,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					10,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					55,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.MeteorBeam,
					Move.MistyExplosion,
					Move.TerrainPulse,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Explosion,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.RockPolish,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.RockTomb,
					Move.CalmMind,
					Move.GyroBall,
					Move.TrickRoom,
					Move.StoneEdge,
					Move.SmackDown,
					Move.Round,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					60,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					8,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.SkillSwap,
					Move.IronDefense,
					Move.Gravity,
					Move.EarthPower,
					Move.StealthRock,
					Move.WonderRoom,
					Move.Telekinesis,
					Move.AllySwitch,
					Move.StompingTantrum,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					70,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					31,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.MagicCoat,
					Move.Covet,
					Move.MagnetRise,
					Move.AfterYou,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PowerGem,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					50,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.RockTomb,
					Move.CalmMind,
					Move.GyroBall,
					Move.RockPolish,
					Move.TrickRoom,
					Move.StoneEdge,
					Move.SmackDown,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					60,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PowerGem,
					46,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					50,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					5,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.RockTomb,
					Move.CalmMind,
					Move.GyroBall,
					Move.RockPolish,
					Move.TrickRoom,
					Move.StoneEdge,
					Move.SmackDown,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					60,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Flash,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					8,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.MagicCoat,
					Move.SkillSwap,
					Move.IronDefense,
					Move.Covet,
					Move.Gravity,
					Move.MagnetRise,
					Move.EarthPower,
					Move.StealthRock,
					Move.WonderRoom,
					Move.AfterYou,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					70,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PowerGem,
					46,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					49,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					21,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					27,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					12,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					50,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Flash,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.RockTomb,
					Move.CalmMind,
					Move.GyroBall,
					Move.RockPolish,
					Move.TrickRoom,
					Move.StoneEdge,
					Move.SmackDown,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					60,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					70,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PowerGem,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					50,
				),
			].flat(),
			[
				{
					ability: Ability.ClearBody,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Sturdy,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Carbink,
					PokemonFormBits.Default,
					{
						frontDefault: 'e0f168cf.png',
						frontShiny: '8f18581a.png',
						backDefault: 'a7b8c486.png',
						backShiny: 'c87e428c.png',
					},
					[Type.Rock, Type.Fairy],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Goomy,
	35,
	45,
	Color.Purple,
	[EggGroup.Dragon],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	40,
	GrowthRate.Slow,
	Shape.Squiggle,
	{
		[Language.JaHrkt]: ['ヌメラ'],
		[Language.Roomaji]: ['Numera'],
		[Language.Ko]: ['미끄메라'],
		[Language.ZhHant]: ['黏黏寶'],
		[Language.Fr]: ['Mucuscule'],
		[Language.De]: ['Viscora'],
		[Language.Es]: ['Goomy'],
		[Language.It]: ['Goomy'],
		[Language.En]: ['Goomy'],
		[Language.Ja]: ['ヌメラ'],
		[Language.ZhHans]: ['黏黏宝'],
	},
	{
		[Language.JaHrkt]: ['なんたいポケモン'],
		[Language.Ko]: ['연체포켓몬'],
		[Language.ZhHant]: ['軟體生物寶可夢'],
		[Language.Fr]: ['Pokémon Mollusque'],
		[Language.De]: ['Schneckedei-Pokémon'],
		[Language.Es]: ['Pokémon Molusco'],
		[Language.It]: ['Pokémon Mollusco'],
		[Language.En]: ['Soft Tissue Pokémon'],
		[Language.Ja]: ['なんたいポケモン'],
		[Language.ZhHans]: ['软体生物宝可梦'],
	},
	{
		[Language.It]: [
			'Il suo corpo è coperto da una membrana viscida che fa\nscivolare e devia i colpi dei nemici.',
			'È il Pokémon Drago più debole di tutti. Vive in ambienti\numidi e in ombra per evitare che il suo corpo si secchi.',
			'Il suo corpo è coperto da una membrana viscida\nche fa scivolare e devia i colpi dei nemici.',
			'È il Pokémon di tipo Drago più debole di tutti.\nLa sua pelle deve restare umida per poter\nrespirare e per questo si rifugia nell’ombra.',
			'Il suo corpo è protetto da una membrana viscida\nche pullula di batteri. Meglio lavarsi bene le mani\ndopo averlo toccato!',
			'I corni con cui sonda l’ambiente circostante sono\ncosì sensibili che, se qualcuno glieli afferra,\nil Pokémon resta pietrificato per lo shock.',
			'Il suo corpo è formato prevalentemente d’acqua\ne se si disidrata rischia di morire. Per questo\nse ne sta rintanato all’ombra.',
			'Il suo corpo è composto quasi esclusivamente\ndi acqua. Se si secca, avvizzisce. È il più debole\ndei Pokémon di tipo Drago.',
			'I suoi corni sono degli straordinari organi\nsensoriali. Riesce a sopravvivere nascondendosi\nnon appena percepisce la presenza del nemico.',
		],
		[Language.JaHrkt]: [
			'いちばん　よわい　ドラゴンポケモン。\nヌメヌメの　からだが　かわかないよう\nジメジメした　ひかげで　くらす。',
			'ヌメヌメの　ねんまくで　おおわれた\nからだは　てきの　パンチや　キックを\nヌルリと　すべらせてしまうのだ。',
			'もっとも　よわい　ドラゴンポケモン。\nひふが　かわくと　いきが　できないので\nひかげで　じーっと　しているよ。',
			'ヌメヌメの　ねんまくで　みを　まもる。\nねんまくは　ざっきんまみれ　なので\nさわったら　しっかり　てを　あらおう。',
			'ツノで　あたりの　ようすを　さぐる。\nとても　びんかんなので　にぎられると\nショックで　うごけなくなってしまう。',
			'からだの　ほとんどは　すいぶん。\nかんそうすると　しんでしまうので\nいつも　ひかげで　じっと　している。',
			'からだの　ほとんどが　すいぶん。\nかんそうすると　ひからびてしまう\nさいじゃくの　ドラゴンポケモン。',
			'ツノは　すぐれた　かんかくきかん。\nてきの　けはいを　かんじとり　すぐに\nかくれる　ことで　いきのこってきた。',
		],
		[Language.Ko]: [
			'가장 약한 드래곤포켓몬이다.\n미끌미끌한 몸이 마르지 않도록\n축축한 그늘에서 산다.',
			'미끌미끌한 점막으로 덮여 있는\n몸은 적의 펀치나 킥을\n매끄럽게 미끄러뜨린다.',
			'가장 약한 드래곤포켓몬.\n피부가 마르면 숨을 쉴 수 없어서\n그늘에서 가만히 있다.',
			'미끌미끌한 점막으로 몸을 지킨다.\n점막은 세균투성이이므로\n만지면 반드시 손을 씻자.',
			'뿔로 주변의 상황을 살핀다.\n매우 민감하여 잡으면\n쇼크로 움직일 수 없게 된다.',
			'몸의 대부분이 수분이다.\n건조해지면 죽어 버리므로\n언제나 그늘에서 가만히 있다.',
			'몸의 대부분이 수분이다.\n건조해지면 바싹 말라버리는\n가장 약한 드래곤포켓몬.',
			'뿔은 뛰어난 감각 기관이다.\n적의 기척을 느끼면 바로\n숨어들어 살아남아 왔다.',
		],
		[Language.Fr]: [
			'C’est le plus faible de tous les Pokémon Dragon.\nPour éviter que son corps ne se dessèche,\nil recherche les lieux humides et ombragés.',
			'Son corps est recouvert d’une membrane gluante,\naussi les coups des ennemis glissent sur lui sans\nlui faire le moindre mal.',
			'C’est le plus faible de tous les Pokémon Dragon. Pour éviter\nque son corps ne se dessèche, il recherche les lieux humides\net ombragés.',
			'C’est le plus faible de tous les Pokémon Dragon.\nSa peau doit rester hydratée pour respirer, c’est\npourquoi il préfère vivre tapi dans l’ombre.',
			'Son corps est recouvert d’une membrane\ngluante protectrice, mais pleine de germes.\nLavez-vous les mains si vous le touchez !',
			'Ses cornes lui permettent d’inspecter\nles alentours. Elles sont si sensibles que\ntout son corps se fige si on les pince.',
			'Son corps est majoritairement composé d’eau.\nIl meurt s’il se dessèche, aussi préfère-t-il vivre\ntapi dans l’ombre.',
			'Son corps est principalement composé d’eau.\nS’il se déshydrate, il devient tout rabougri.\nC’est le plus faible des Pokémon Dragon.',
			'Ses cornes sont des organes sensoriels qui lui\npermettent de se cacher quand il détecte des\nennemis. C’est grâce à cela qu’il vit toujours.',
		],
		[Language.De]: [
			'Dieses schwächste aller Drachen-Pokémon lebt\nan feuchten und schattigen Plätzen, um seinen\nglitschigen Körper vor dem Austrocknen zu bewahren.',
			'Sein Körper ist von einer schleimigen Schicht umhüllt,\nan der gegnerische Tritte und Schläge abgleiten, ohne\nSchaden anzurichten.',
			'Dieses schwächste aller Drachen-Pokémon lebt an feuchten\nund schattigen Plätzen, um seinen glitschigen Körper vor dem\nAustrocknen zu bewahren.',
			'Sein Körper ist von einer schleimigen Schicht umhüllt, an der\ngegnerische Tritte und Schläge abgleiten, ohne Schaden\nanzurichten.',
			'Das schwächste aller Drachen-Pokémon.\nWenn seine Haut austrocknet, erstickt es.\nDaher hält es sich bevorzugt im Schatten auf.',
			'Sein Körper ist von einer schleimigen Schutz-\nschicht umhüllt, die voller Bakterien steckt.\nNach dem Anfassen also Hände waschen!',
			'Mit seinen Fühlern tastet es die Umgebung ab.\nEs ist so empfindlich, dass es in Schockstarre\nverfällt, wenn man es in die Hand nimmt.',
			'Sein Körper besteht fast ausschließlich aus\nWasser. Trocknet es aus, stirbt es. Deshalb hält\nes sich immer bewegungslos im Schatten auf.',
			'Sein Körper besteht vorwiegend aus Wasser und\nverschrumpelt daher völlig, wenn es austrocknet.\nEs ist das schwächste aller Drachen-Pokémon.',
			'Seine Fühler sind hochentwickelte Sinnesorgane.\nDa es dank ihnen Feinde sofort spüren und sich\nverstecken kann, hat es bis heute überlebt.',
		],
		[Language.Es]: [
			'Es el Pokémon de tipo Dragón más débil. Habita en\nzonas oscuras y húmedas para evitar que su viscoso\ncuerpo se seque.',
			'La membrana mucosa que lo recubre hace resbalar\ntanto los puñetazos como las patadas de los\nenemigos que lo golpean, gracias a su viscosidad.',
			'Es el Pokémon de tipo Dragón más débil. Habita en zonas\noscuras y húmedas para evitar que su viscoso cuerpo se\nseque.',
			'La membrana mucosa que lo recubre hace resbalar tanto los\npuñetazos como las patadas de los enemigos que lo golpean,\ngracias a su viscosidad.',
			'Es el Pokémon de tipo Dragón más débil.\nNecesita mantener la piel húmeda para respirar,\ny por eso se oculta en las sombras.',
			'Una membrana viscosa lo envuelve y lo protege,\npero tiene tal cantidad de gérmenes que hay\nque lavarse bien las manos tras tocarlo.',
			'Palpa los alrededores con sus cuernos. Estos\nson tan sensibles que se queda paralizado si\nalguien se los agarra.',
			'La mayor parte de su cuerpo está compuesto\npor agua, por lo que muere si llega a secarse.\nSiempre se le encuentra inmóvil en la sombra.',
			'Su cuerpo se compone casi exclusivamente de\nagua, por lo que se debilitaría si se deshidratase.\nEs el Pokémon de tipo Dragón más débil.',
			'Sus antenas son órganos sensoriales sumamente\ndesarrollados. Poder esconderse nada más\ndetectar enemigos le ha permitido sobrevivir.',
		],
		[Language.En]: [
			'The weakest Dragon-type Pokémon,\nit lives in damp, shady places, so its\nbody doesn’t dry out.',
			'It’s covered in a slimy membrane that makes\nany punches or kicks slide off it harmlessly.',
			'The weakest of all Dragon-type Pokémon,\nit’s unable to breathe if its skin dries out,\nso it sticks to shady places.',
			'Its source of protection is its slimy, germ-laden\nmucous membrane. Anyone who touches it\nneeds some thorough hand-washing.',
			'It uses its horns to check out its surroundings.\nThey’re very sensitive, so if you grab them, it\nwill feel a strong shock and be unable to move.',
			'Its body is mostly water. If it dries out, it will\ndie, so it’s always sitting with perfect stillness\nin the shade.',
			'Because most of its body is water, it will dry up if\nthe weather becomes too arid. It’s considered\nthe weakest dragon Pokémon.',
			'Their horns are powerful sensors. As soon as\nGoomy pick up any sign of enemies, they go into\nhiding. This is how they’ve survived.',
			"Goomy hides away in the shade of trees, where it's nice and\nhumid. If the slime coating its body dries out, the Pokémon\ninstantly becomes lethargic.",
		],
		[Language.Ja]: [
			'一番　弱い　ドラゴンポケモン。\nヌメヌメの　体が　乾かないよう\nジメジメした　日陰で　暮らす。',
			'ヌメヌメの　粘膜で　覆われた　体は\n敵の　パンチや　キックを\nヌルリと　滑らせてしまうのだ。',
			'最も　弱い　ドラゴンポケモン。\n皮膚が　乾くと　息が　できないので\n日陰で　じーっと　しているよ。',
			'ヌメヌメの　粘膜で　身を　守る。\n粘膜は　雑菌まみれ　なので\n触ったら　しっかり　手を　洗おう。',
			'ツノで　あたりの　様子を　探る。\nとても　敏感なので　握られると\nショックで　動けなくなってしまう。',
			'身体の　ほとんどは　水分。\n乾燥すると　死んでしまうので\nいつも　日陰で　じっと　している。',
			'体の　ほとんどが　水分。\n乾燥すると　干からびてしまう\n最弱の　ドラゴンポケモン。',
			'ツノは　優れた　感覚器官。\n敵の　気配を　感じ取り　すぐに\n隠れる　ことで　生き残ってきた。',
		],
		[Language.ZhHant]: [
			'最弱小的龍屬性寶可夢。\n皮膚一旦乾燥就會無法呼吸，\n因此總是靜靜地呆在遮蔭下哦。',
			'用滑膩膩的黏膜保護身體。\n因為黏膜上佈滿各種細菌，\n接觸後要好好地洗手哦。',
			'會用角探查周圍的狀況。\n角非常敏感，一旦被握住，\n牠就會驚嚇到無法動彈。',
			'身體絕大部分是水分，\n一旦乾燥就會死亡，\n所以總是靜靜待在陰暗處。',
			'身體幾乎都是水分。\n只要環境乾燥身體就會變乾，\n是最弱的龍寶可夢。',
			'牠的觸角是優秀的感覺器官。\n只要感覺到有敵人就會立刻\n躲起來，以此存活到了現在。',
		],
		[Language.ZhHans]: [
			'最弱小的龙属性宝可梦。\n皮肤干燥的话就会无法呼吸，\n因此一直静静地呆在背阴处哦。',
			'用滑腻腻的粘膜保护身体。\n因为粘膜上尽是各种细菌，\n接触后要好好地洗手哦。',
			'用角探索周围的情况。\n非常敏感，所以只要被握住，\n就会因震惊而无法动弹。',
			'身体几乎都是水分。\n如果干燥就会死亡，\n所以一直都静静地呆在背阴处。',
			'身体几乎都是水分。\n只要环境干燥身体就会变干，\n是最弱的龙宝可梦。',
			'它的触角是优秀的感觉器官。\n只要感觉到有敌人就会立刻\n藏起来，以此存活到了现在。',
		],
	},
	[
		[
			Variety.Goomy,
			60,
			3,
			28,
			[Type.Dragon],
			{
				frontDefault: '139a0cc9.png',
				frontShiny: '9f297e5c.png',
				backDefault: '3d3196ef.png',
				backShiny: '2b128347.png',
			},
			{
				[Stat.Hp]: {baseStat: 45},
				[Stat.Attack]: {baseStat: 50},
				[Stat.Defense]: {baseStat: 35},
				[Stat.SpecialAttack]: {baseStat: 55},
				[Stat.SpecialDefense]: {baseStat: 75, effort: 1},
				[Stat.Speed]: {baseStat: 40},
			},
			{
				[Version.Sun]: {
					[Item.ShedShell]: 5,
				},
				[Version.Moon]: {
					[Item.ShedShell]: 5,
				},
				[Version.UltraSun]: {
					[Item.ShedShell]: 5,
				},
				[Version.UltraMoon]: {
					[Item.ShedShell]: 5,
				},
			},
			[
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					45,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.MuddyWater,
					Move.MudShot,
					Move.SkitterSmack,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.Charm,
					Move.TeraBlast,
					Move.ChillingWater,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.Counter,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Curse,
					Move.Protect,
					Move.SludgeBomb,
					Move.Endure,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.DracoMeteor,
					Move.SludgeWave,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					41,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Outrage,
					Move.WaterPulse,
					Move.DragonPulse,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DragonBreath,
					10,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					50,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					35,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.LifeDew,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Absorb,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					45,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.Thunderbolt,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Outrage,
					Move.Endure,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.MuddyWater,
					Move.MudShot,
					Move.DragonPulse,
					Move.SludgeWave,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WaterGun,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Counter,
					Move.LifeDew,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.Snore,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					41,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.IronTail,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonBreath,
					10,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					50,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.DracoMeteor,
					Move.SkitterSmack,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					32,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Counter,
					Move.Curse,
					Move.Endure,
					Move.IronTail,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.SludgeWave,
					Move.Round,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.AcidArmor,
					Move.PoisonTail,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.WaterPulse,
					Move.DragonPulse,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonBreath,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Tutor,
					Move.ShockWave,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					42,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Bubble,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					32,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Counter,
					Move.AcidArmor,
					Move.Curse,
					Move.Endure,
					Move.IronTail,
					Move.PoisonTail,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.SludgeWave,
					Move.Round,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					9,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonBreath,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Bubble,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					32,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Counter,
					Move.AcidArmor,
					Move.Curse,
					Move.Endure,
					Move.IronTail,
					Move.PoisonTail,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.SecretPower,
					Move.SludgeWave,
					Move.Round,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					13,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.ShockWave,
					Move.WaterPulse,
					Move.DragonPulse,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					9,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonBreath,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					42,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Bubble,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					32,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Counter,
					Move.AcidArmor,
					Move.Curse,
					Move.Endure,
					Move.IronTail,
					Move.PoisonTail,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Thunderbolt,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.SludgeWave,
					Move.Round,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonBreath,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
			].flat(),
			[
				{
					ability: Ability.SapSipper,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Hydration,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Gooey,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Goomy,
					PokemonFormBits.Default,
					{
						frontDefault: '139a0cc9.png',
						frontShiny: '9f297e5c.png',
						backDefault: '3d3196ef.png',
						backShiny: '2b128347.png',
					},
					[Type.Dragon],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Sliggoo,
	35,
	45,
	Color.Purple,
	[EggGroup.Dragon],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	40,
	GrowthRate.Slow,
	Shape.Squiggle,
	{
		[Language.JaHrkt]: ['ヌメイル'],
		[Language.Roomaji]: ['Numeil'],
		[Language.Ko]: ['미끄네일'],
		[Language.ZhHant]: ['黏美兒'],
		[Language.Fr]: ['Colimucus'],
		[Language.De]: ['Viscargot'],
		[Language.Es]: ['Sliggoo'],
		[Language.It]: ['Sliggoo'],
		[Language.En]: ['Sliggoo'],
		[Language.Ja]: ['ヌメイル'],
		[Language.ZhHans]: ['黏美儿'],
	},
	{
		[Language.JaHrkt]: ['なんたいポケモン'],
		[Language.Ko]: ['연체포켓몬'],
		[Language.ZhHant]: ['軟體生物寶可夢'],
		[Language.Fr]: ['Pokémon Mollusque'],
		[Language.De]: ['Schneckedei-Pokémon'],
		[Language.Es]: ['Pokémon Molusco'],
		[Language.It]: ['Pokémon Mollusco'],
		[Language.En]: ['Soft Tissue Pokémon'],
		[Language.Ja]: ['なんたいポケモン'],
		[Language.ZhHans]: ['软体生物宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'なんでも　とかしてしまう　ねんえきを\nぶんぴつして　てきを　げきたいする。\nめだまは　たいかして　みえていない。',
			'４ほんの　ツノは　こうせいのうの\nレーダー。みみや　はなの　かわりに\nおとや　においを　かんじとる。',
			'エサと　なかまの　くべつが　あいまい。\nなかよくなっても　へいきで　とかして\nくらおうと　してくることが　ある。',
			'はが　ないので　なんでも　とかす\nねんえきを　えものに　かけて\nとかしてから　すすって　くらう。',
			'のそのそ　はって　いどうする。\nうずじょうの　とっきは　のうみそや\nないぞうが　つまっている　ぶぶん。',
			'ぜんしんが　なんでも　ドロドロに\nとかす　ねんえきで　つつまれている。\nさわるときは　てぶくろを　しよう。',
			'なんでも　とかしてしまう　ねんえきで\nほご　されているため　よわくても\nほしょくされず　いきのこってきた。',
			'せなかの　とっきの　なかに　ちいさな\nのうみそが　ある。　えさと　てきから\nにげることしか　かんがえていない。',
		],
		[Language.Ko]: [
			'무엇이든 녹여버리는 점액을\n분비해 적을 격퇴한다.\n눈은 퇴화하여 보이지 않는다.',
			'4개의 뿔은 고성능의\n레이더이다. 귀나 코를 대신해서\n소리나 냄새를 느낀다.',
			'먹이와 동료의 구별이 애매하다.\n사이가 좋아져도 아무렇지 않게 녹여서\n먹어버리려고 하는 경우가 있다.',
			'이빨이 없어서 무엇이든 녹이는\n점액을 먹이에 뿌려서\n녹인 다음에 마신다.',
			'느릿느릿 기어서 이동한다.\n나선의 돌기는 뇌와\n내장으로 꽉 차 있다.',
			'전신이 무엇이든 흐물흐물하게\n녹이는 점액으로 둘러싸여 있다.\n만질 때는 장갑을 끼자.',
			'무엇이든 녹여버리는 점액으로\n몸을 보호하기 때문에 약하지만\n먹히지 않고 살아남을 수 있었다.',
			'등의 돌기 안에 작은 뇌가 있다.\n먹이에 대한 생각과\n적으로부터 도망치는 생각만 한다.',
		],
		[Language.Fr]: [
			'Il repousse ses ennemis en sécrétant un fluide\nqui dissout tout ce qu’il touche. Suite à une\ndégénérescence de ses yeux, il est aveugle.',
			'Ses quatre cornes constituant un radar extrêmement\npuissant, il n’a besoin ni de nez ni d’oreilles pour\npercevoir les sons et les odeurs.',
			'Il repousse ses ennemis en sécrétant un fluide qui dissout\ntout ce qu’il touche. Suite à une dégénérescence de ses yeux,\nil est aveugle.',
			'Ses quatre cornes constituant un radar extrêmement puissant,\nil n’a besoin ni de nez ni d’oreilles pour percevoir les sons et\nles odeurs.',
			'Comme il a du mal à distinguer ses alliés de\nses proies, la faim peut parfois le pousser\nà asperger ses amis de son solvant.',
			'Comme il n’a pas de dent, il sécrète un solvant\ndont il asperge ses proies pour les liquéfier et\nles boire en smoothie.',
			'Il se déplace en rampant lentement.\nSes organes et son cerveau se trouvent dans\nsa protubérance dorsale en forme de spirale.',
			'Son corps est recouvert d’un mucus capable\nde faire fondre n’importe quoi. Pensez à mettre\ndes gants adaptés si vous voulez le toucher !',
			'Étant donné sa faiblesse, c’est uniquement\ngrâce à son fluide pouvant tout dissoudre\nqu’il a échappé à une extinction quasi certaine.',
			'Son petit cerveau est caché dans la bosse qui\nest sur son dos. Il ne pense pas à grand-chose,\nsi ce n’est à se nourrir et à fuir devant ses ennemis.',
		],
		[Language.De]: [
			'Es verjagt Gegner durch Absonderung eines alles\nzersetzenden Schleims. Die zurückgebildeten\nAugäpfel des Pokémon gewähren ihm keine Sicht.',
			'Seine vier Fühler fungieren als hochleistungsfähiges\nRadarsystem. Es setzt sie anstelle von Nase und Ohren\nzur Wahrnehmung von Gerüchen und Geräuschen ein.',
			'Es verjagt Gegner durch Absonderung eines alles\nzersetzenden Schleims. Die zurückgebildeten Augäpfel\ndes Pokémon gewähren ihm keine Sicht.',
			'Die Grenze zwischen Freund und Fressen\nist bei diesem Pokémon fließend.\nAls Freund geschätzt, zu Suppe zersetzt!',
			'Da es keine Zähne hat, sondert es einen alles\nzersetzenden Schleim auf seine Beute ab.\nDanach schlürft es diese genüsslich auf.',
			'Es bewegt sich gemächlich kriechend fort.\nDer spiralförmige Fortsatz beherbergt sein\nGehirn und seine inneren Organe.',
			'Sein Körper ist von einem alles zersetzenden\nSchleim bedeckt. Will man diesen berühren,\nsollte man vorher Schutzhandschuhe anziehen.',
			'Da sein alles zersetzender Schleim es schützt,\nkonnte es sich bis heute gegen seine Fressfeinde\nbehaupten, obwohl es recht schwach ist.',
			'In dem Fortsatz auf seinem Rücken befindet sich\nsein winziges Gehirn. Es kann nur ans Fressen\nund an die Flucht vor seinen Feinden denken.',
		],
		[Language.Es]: [
			'Segrega una mucosidad que corroe todo lo que toca\ny consigue así ahuyentar al enemigo. Sus ojos han\ninvolucionado, por lo que no puede ver.',
			'Sus cuatro antenas constituyen un radar de gran\npotencia. Hacen las veces de nariz y oídos para\npercibir tanto ruidos como olores.',
			'Segrega una mucosidad que corroe todo lo que toca y\nconsigue así ahuyentar al enemigo. Sus ojos han\ninvolucionado, por lo que no puede ver.',
			'Sus cuatro antenas constituyen un radar de gran potencia.\nHacen las veces de nariz y oídos para percibir tanto ruidos\ncomo olores.',
			'Le cuesta distinguir a sus presas de sus\naliados, por eso no es raro que se coma a uno\nde los suyos de vez en cuando sin inmutarse.',
			'Al carecer de dientes, segrega una mucosidad\nque disuelve a sus presas para facilitar su\nposterior ingestión.',
			'Este Pokémon se arrastra con lentitud. La\nprotuberancia en espiral de su espalda contiene\ntanto el cerebro como los órganos internos.',
			'Su cuerpo está recubierto por una mucosidad\nque puede disolver cualquier material, así que\nes mejor usar guantes especiales para tocarlo.',
			'Segrega una mucosidad que corroe todo lo que\ntoca. Esto le ha permitido protegerse y evitar la\nextinción a pesar de su debilidad intrínseca.',
			'La protuberancia del lomo contiene su pequeño\ncerebro, que solo piensa en buscar comida y huir\nde los enemigos.',
		],
		[Language.It]: [
			'Respinge i nemici secernendo un liquido vischioso\nin grado di sciogliere qualunque cosa. I suoi occhi\nhanno subito una degenerazione che lo ha reso cieco.',
			'I quattro corni di questo Pokémon sono simili a un\npotente radar e fungono da organi sensoriali al posto\ndi orecchie e naso.',
			'Respinge i nemici secernendo un liquido vischioso in grado\ndi sciogliere qualunque cosa. I suoi occhi hanno subito una\ndegenerazione che lo ha reso cieco.',
			'I quattro corni di questo Pokémon sono simili a un potente\nradar e fungono da organi sensoriali al posto di orecchie\ne naso.',
			'A volte non riesce a distinguere bene le prede\ndagli amici e, se ha fame, può capitare che\ncerchi di sciogliere un alleato per mangiarselo.',
			'Rimedia alla mancanza di denti spruzzando un\npotentissimo liquido corrosivo sulle prede per\nscioglierle e berle come un succo.',
			'Si sposta strisciando lentamente.\nLa protuberanza a forma di spirale sul dorso\ncontiene il cervello e i suoi organi interni.',
			'Il suo corpo è ricoperto da un liquido vischioso\nin grado di sciogliere qualsiasi cosa e per\ntoccarlo bisogna indossare guanti speciali.',
			'È un Pokémon debole. Ha evitato l’estinzione\ngrazie al suo muco corrosivo.',
			'Nella protuberanza che ha sulla schiena si trova\nun piccolo cervello. Pensa solo a mangiare e a\nscappare dai nemici.',
		],
		[Language.En]: [
			'It drives away opponents by excreting a\nsticky liquid that can dissolve anything.\nIts eyes devolved, so it can’t see anything.',
			'Its four horns are a high-performance radar system.\nIt uses them to sense sounds and smells,\nrather than using ears or a nose.',
			'It has trouble drawing a line between friends\nand food. It will calmly try to melt and eat even\nthose it gets along well with.',
			'This Pokémon’s mucous can dissolve anything.\nToothless, it sprays mucous on its prey. Once\nthey’re nicely dissolved, it slurps them up.',
			'It crawls along sluggishly. The swirly protrusion\non its back is filled with its brain and\nother organs.',
			'Its entire body is covered with gooey mucus\nthat can dissolve anything. Be sure to put\ngloves on if you’re going to touch it.',
			'Although this Pokémon isn’t very strong, its body\nis coated in a caustic slime that can melt through\nanything, so predators steer clear of it.',
			'The lump on its back contains its tiny brain.\nIt thinks only of food and escaping its enemies.',
			"A creature given to melancholy. I suspect its metallic shell\ndeveloped as a result of the mucus on its skin reacting with\nthe iron in Hisui's water.",
		],
		[Language.Ja]: [
			'なんでも　溶かしてしまう　粘液を\n分泌して　敵を　撃退する。\n目玉は　退化して　見えていない。',
			'４本の　ツノは　高性能の　レーダー。\n耳や　鼻の　かわりに\n音や　においを　感じ取る。',
			'餌と　仲間の　区別が　曖昧。\n仲良くなっても　平気で　溶かして\n喰らおうと　してくることが　ある。',
			'歯が　ないので　なんでも　溶かす\n粘液を　獲物に　かけて\n溶かしてから　すすって　喰らう。',
			'のそのそ　這って　移動する。\n渦状の　突起は　脳みそや\n内臓が　詰まっている　部分。',
			'全身が　何でも　ドロドロに\n溶かす　粘液で　包まれている。\n触るときは　手袋を　しよう。',
			'なんでも　溶かしてしまう　粘液で\n保護されているため　弱くても\n捕食されず　生き残ってきた。',
			'背中の　突起の　中に　小さな\n脳みそが　ある。　エサと　敵から\n逃げることしか　考えていない。',
		],
		[Language.ZhHant]: [
			'獵物和夥伴的區別模糊不清。\n即使關係親密，有時候也會\n淡定地將對方溶解吸食。',
			'因為沒有牙齒，\n所以會釋放可溶解任何物體的黏液，\n將獵物溶化後再吸食。',
			'慢吞吞地爬行著移動。\n漩渦狀的突起部分\n裝著牠的大腦和內臟。',
			'全身包裹著能把一切東西\n溶解成黏糊的黏液。\n觸摸牠時記得戴上手套。',
			'雖然弱小，但牠擁有可以\n融化一切的黏液來保護自己，\n因此未被捕食並得以存活至今。',
			'背上的突起物裡裝著牠\n小小的腦子，裡面只想著\n吃飯和逃離敵人這兩件事。',
		],
		[Language.ZhHans]: [
			'食物和伙伴的区别模糊不清。\n即使关系很好，有时候也会\n淡定地将对方溶解吸食。',
			'因为没有牙齿，\n所以会释放可溶解任何物体的粘液，\n将猎物溶化后再吸食。',
			'慢吞吞地爬行移动。\n旋涡状的突起里装着大脑和内脏。',
			'全身包裹着能把所有东西\n都溶解得黏腻腻的黏液。\n接触的时候戴上手套吧。',
			'虽然弱小，但它拥有可以\n融化一切的粘液来保护自己，\n因此未被捕食并得以存活至今。',
			'背上的突起物里装着它\n小小的脑子，里面只想着\n吃饭和逃离敌人这两件事。',
		],
	},
	[
		[
			Variety.Sliggoo,
			158,
			8,
			175,
			[Type.Dragon],
			{
				frontDefault: 'e1a70b58.png',
				frontShiny: '0e594730.png',
			},
			{
				[Stat.Hp]: {baseStat: 68},
				[Stat.Attack]: {baseStat: 75},
				[Stat.Defense]: {baseStat: 53},
				[Stat.SpecialAttack]: {baseStat: 83},
				[Stat.SpecialDefense]: {baseStat: 113, effort: 2},
				[Stat.Speed]: {baseStat: 60},
			},
			{
				[Version.Sun]: {
					[Item.ShedShell]: 5,
				},
				[Version.Moon]: {
					[Item.ShedShell]: 5,
				},
				[Version.UltraSun]: {
					[Item.ShedShell]: 5,
				},
				[Version.UltraMoon]: {
					[Item.ShedShell]: 5,
				},
			},
			[
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					49,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.Endure,
					Move.MuddyWater,
					Move.MudShot,
					Move.SkitterSmack,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.Thunder,
					Move.Curse,
					Move.Charm,
					Move.AcidSpray,
					Move.TeraBlast,
					Move.ChillingWater,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.WaterGun,
					Move.DragonBreath,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IceBeam,
					Move.Blizzard,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.DracoMeteor,
					Move.SludgeWave,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					1,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AcidArmor,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					43,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Outrage,
					Move.WaterPulse,
					Move.DragonPulse,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					56,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					35,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AcidSpray,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.WaterGun,
					Move.Absorb,
					Move.DragonBreath,
					Move.AcidSpray,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					49,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.IceBeam,
					Move.Blizzard,
					Move.Thunderbolt,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Outrage,
					Move.Endure,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.MuddyWater,
					Move.MudShot,
					Move.DragonPulse,
					Move.SludgeWave,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronTail,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					43,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					56,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.DracoMeteor,
					Move.SkitterSmack,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AcidSpray,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Absorb,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					32,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IceBeam,
					Move.Blizzard,
					Move.Thunderbolt,
					Move.Toxic,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.SludgeWave,
					Move.Round,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bubble,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.WaterPulse,
					Move.DragonPulse,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonBreath,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Tutor,
					Move.ShockWave,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					47,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Absorb,
					Move.Bubble,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					32,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IceBeam,
					Move.Blizzard,
					Move.Thunderbolt,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.SludgeWave,
					Move.Round,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					9,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonBreath,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					47,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Bubble,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					32,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IceBeam,
					Move.Blizzard,
					Move.Thunderbolt,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.SecretPower,
					Move.SludgeWave,
					Move.Round,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					13,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.ShockWave,
					Move.WaterPulse,
					Move.DragonPulse,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					9,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonBreath,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					47,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Bubble,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					32,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IceBeam,
					Move.Blizzard,
					Move.Thunderbolt,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.SludgeWave,
					Move.Round,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonBreath,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					47,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
			].flat(),
			[
				{
					ability: Ability.SapSipper,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Hydration,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Gooey,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Sliggoo,
					PokemonFormBits.Default,
					{
						frontDefault: 'e1a70b58.png',
						frontShiny: '0e594730.png',
					},
					[Type.Dragon],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
		[
			Variety.SliggooHisui,
			null,
			7,
			685,
			[Type.Steel, Type.Dragon],
			{
				frontDefault: '68215583.png',
				frontShiny: '23d00801.png',
			},
			{
				[Stat.Hp]: {baseStat: 58},
				[Stat.Attack]: {baseStat: 75},
				[Stat.Defense]: {baseStat: 83},
				[Stat.SpecialAttack]: {baseStat: 83},
				[Stat.SpecialDefense]: {baseStat: 113, effort: 2},
				[Stat.Speed]: {baseStat: 40},
			},
			{},
			[
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.WaterGun,
					Move.Absorb,
					Move.AcidArmor,
					Move.DragonBreath,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.IceBeam,
					Move.Blizzard,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Curse,
					Move.Protect,
					Move.SludgeBomb,
					Move.Outrage,
					Move.Sandstorm,
					Move.Endure,
					Move.Charm,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.RockTomb,
					Move.MuddyWater,
					Move.MudShot,
					Move.WaterPulse,
					Move.GyroBall,
					Move.DragonPulse,
					Move.FlashCannon,
					Move.DracoMeteor,
					Move.IronHead,
					Move.SludgeWave,
					Move.HeavySlam,
					Move.AcidSpray,
					Move.SteelBeam,
					Move.SkitterSmack,
					Move.TeraBlast,
					Move.IceSpinner,
					Move.ChillingWater,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					43,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					20,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					15,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					30,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					56,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					35,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.IronHead,
					49,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Shelter,
				),
			].flat(),
			[
				{
					ability: Ability.SapSipper,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.ShellArmor,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Gooey,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.SliggooHisui,
					PokemonFormBits.Default,
					{
						frontDefault: '68215583.png',
						frontShiny: '23d00801.png',
					},
					[Type.Steel, Type.Dragon],
					VersionGroup.LegendsArceus,
					{
						[Language.Fr]: ['Colimucus de Hisui'],
						[Language.De]: ['Hisui Viscargot'],
						[Language.En]: ['Hisuian Sliggoo'],
					},
					{
						[Language.JaHrkt]: ['ヒスイのすがた'],
						[Language.Fr]: ['Forme de Hisui'],
						[Language.De]: ['Hisui-Form'],
						[Language.En]: ['Hisuian Form'],
						[Language.Ja]: ['ヒスイのすがた'],
					},
					'hisui',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Goodra,
	35,
	45,
	Color.Purple,
	[EggGroup.Dragon],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	40,
	GrowthRate.Slow,
	Shape.Upright,
	{
		[Language.JaHrkt]: ['ヌメルゴン'],
		[Language.Roomaji]: ['Numelgon'],
		[Language.Ko]: ['미끄래곤'],
		[Language.ZhHant]: ['黏美龍'],
		[Language.Fr]: ['Muplodocus'],
		[Language.De]: ['Viscogon'],
		[Language.Es]: ['Goodra'],
		[Language.It]: ['Goodra'],
		[Language.En]: ['Goodra'],
		[Language.Ja]: ['ヌメルゴン'],
		[Language.ZhHans]: ['黏美龙'],
	},
	{
		[Language.JaHrkt]: ['ドラゴンポケモン'],
		[Language.Ko]: ['드래곤포켓몬'],
		[Language.ZhHant]: ['龍寶可夢'],
		[Language.Fr]: ['Pokémon Dragon'],
		[Language.De]: ['Drachen-Pokémon'],
		[Language.Es]: ['Pokémon Dragón'],
		[Language.It]: ['Pokémon Drago'],
		[Language.En]: ['Dragon Pokémon'],
		[Language.Ja]: ['ドラゴンポケモン'],
		[Language.ZhHans]: ['龙宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'ひとなつっこい　ドラゴンポケモン。\nだいすきな　トレーナーに　だきついて\nねんえきで　ヌルヌルにしてしまう。',
			'のびちぢみする　ツノで　こうげき。\nプロボクサー　１００にんぶんの\nパンチに　ひってきする　いりょく。',
			'すごく　ひとなつっこい　ポケモン。\nかまわないでいると　さみしくて\nヌルヌルの　なみだを　ながし　なく。',
			'おとなしいからと　からかうと\nツノで　おもいきり　つかれ\nふとい　しっぽで　なぎはらわれる。',
			'とっても　ひとなつっこい。　なつくと\nネバネバの　ねんえきに　まみれた\nからだで　だきついてくるが　がまんだ。',
			'ヌルヌルの　ひふの　したには\nぶあつい　しぼうの　そうが　あり\nてきの　こうげきを　うけながす。',
			'トレーナーの　しじが　りかいできずに\nキョトンとする　ことが　たまに　あり\nその　ようすが　かわいいと　にんき。',
			'ながい　ツノを　のばす　いきおいで\nこうげき。　いりょくは　ヘビーきゅう\nボクサーの　パンチの　１００ばいだ。',
		],
		[Language.Ko]: [
			'사람을 잘 따르는 드래곤포켓몬이다.\n좋아하는 트레이너에게 달려들어\n미끈미끈한 점액투성이로 만들어 버린다.',
			'늘었다 줄었다 하는 뿔로 공격한다.\n프로 복서 100명분의\n펀치에 필적하는 위력을 가졌다.',
			'굉장히 사람을 잘 따르는 포켓몬이다.\n신경을 안 쓰고 있으면 외로워서\n미끈미끈한 눈물을 흘리며 운다.',
			'얌전하다고 놀리면\n뿔에 힘껏 찔리고\n굵은 꼬리로 내동댕이쳐진다.',
			'매우 사람을 잘 따른다. 친밀해지면\n끈적끈적한 점액투성이인\n몸으로 끌어안으려 하지만 참아야 한다.',
			'미끈미끈한 피부 아래에는\n두꺼운 지방층이 있어\n적의 공격을 받아넘긴다.',
			'트레이너의 지시를 이해하지 못하고\n어리둥절해하는 경우가 가끔 있으며\n그 모습이 귀여워서 인기가 많다.',
			'긴 뿔을 기세 좋게 늘여서\n공격한다. 위력은 헤비급\n복서 펀치의 100배다.',
		],
		[Language.Fr]: [
			'Ce Pokémon Dragon peu farouche aime faire la fête\nà son Dresseur adoré, le couvrant au passage de\nsa bave collante.',
			'Il attaque grâce à ses cornes extensibles.\nSes coups sont aussi puissants que ceux de 100\nboxeurs professionnels réunis.',
			'Il attaque grâce à ses cornes extensibles. Ses coups sont\naussi puissants que ceux de 100 boxeurs professionnels\nréunis.',
			'Ce Pokémon adore la compagnie humaine.\nSi son Dresseur ne lui donne pas assez d’amour,\nil pleure à grosses larmes visqueuses.',
			'Ceux qui l’importunent en le pensant inoffensif\npeuvent vite se retrouver du mauvais côté de\nses cornes et goûter de sa puissante queue.',
			'Très câlin, ce Pokémon a tendance à se frotter\naux gens auxquels il s’attache avec son corps\nvisqueux. Dresseurs de Muplodocus, tenez bon.',
			'Une épaisse couche de graisse se trouve sous\nsa peau visqueuse et lui permet d’encaisser\nles attaques ennemies.',
			'Il arrive qu’il ne comprenne pas les ordres\nde son Dresseur et qu’il le regarde d’un air ahuri.\nCette réaction adorable l’a rendu populaire.',
			'Il attaque à l’aide de ses longues cornes.\nSes coups sont cent fois plus puissants\nque ceux d’un champion poids lourds de boxe.',
		],
		[Language.De]: [
			'Dieses äußerst freundliche Drachen-Pokémon\nneigt dazu, seinen geliebten Trainer zu umarmen\nund so mit einer dicken Schleimschicht zu umhüllen.',
			'Es greift den Gegner mit ausfahrbaren Fühlern an.\nSeine Stärke ist vergleichbar mit der Durchschlagskraft\nder Faustschläge von 100 Profiboxern.',
			'Dieses äußerst freundliche Drachen-Pokémon neigt dazu,\nseinen geliebten Trainer zu umarmen und so mit einer dicken\nSchleimschicht zu umhüllen.',
			'Dieses äußerst freundliche Pokémon benötigt\nsehr viel Aufmerksamkeit, sonst fühlt es sich\neinsam und weint schleimige Tränen.',
			'Wer dieses Pokémon nicht ernst nimmt,\nbekommt es mit seinen Fühlern zu tun oder\nwird von seinem Schwanz umgehauen.',
			'Dieses freundliche Pokémon hat die Eigenart,\nmit seinem schleimigen, klebrigen Körper all jene\nzu umarmen, die es mag.',
			'Unter seiner schleimigen Haut befindet sich eine\ndicke Speckschicht, die gegnerische Angriffe\nabfängt.',
			'Es kommt vor, dass es die Befehle seines Trainers\nnicht versteht und nur verblüfft dreinschaut.\nDieser putzige Anblick hat es beliebt gemacht.',
			'Es greift mit seinen ausfahrbaren Fühlern an,\nderen Durchschlagskraft hundertmal so stark wie\nder Faustschlag eines Schwergewichtsboxers ist.',
		],
		[Language.Es]: [
			'Pokémon de tipo Dragón muy afable al que le gusta\nabrazar con efusión a su Entrenador, aunque después\nlo deja totalmente pringado.',
			'Ataca con sus antenas retráctiles, desplegando\nuna fuerza comparable a los puñetazos de 100\nboxeadores profesionales.',
			'Pokémon de tipo Dragón muy afable al que le gusta abrazar\ncon efusión a su Entrenador, aunque después lo deja\ntotalmente pringado.',
			'Ataca con sus antenas retráctiles, desplegando una fuerza\ncomparable a los puñetazos de 100 boxeadores profesionales.',
			'Es muy afable y cariñoso. Si lo ignoran, le invade\nla tristeza y llora lágrimas viscosas.',
			'Golpea con sus antenas retráctiles y derriba con\nsu gruesa cola a aquellos que se burlan de él\ncreyendo que es inofensivo.',
			'Un Pokémon muy amistoso que demuestra su\nafecto con abrazos viscosos y gelatinosos. Se\nnecesita algo de estoicismo para no apartarse.',
			'Debajo de su resbaladiza piel cuenta con una\nvoluminosa capa de grasa que le permite\nbloquear los ataques enemigos.',
			'A veces no entiende las instrucciones de su\nEntrenador y se queda como abstraído, pero\nmucha gente encuentra este rasgo adorable.',
			'Ataca extendiendo sus largas antenas. La fuerza\nque despliega es 100 veces superior a la del\npuñetazo de un boxeador de peso pesado.',
		],
		[Language.It]: [
			'Un Pokémon Drago davvero amichevole. Ama fare le\nfeste al suo Allenatore lasciandolo ricoperto di bava.',
			'Attacca con i corni che possono allungarsi e\naccorciarsi. Ha una forza pari a quella di 100 pugili\nprofessionisti.',
			'Un Pokémon Drago davvero amichevole. Ama fare le feste\nal suo Allenatore lasciandolo ricoperto di bava.',
			'Attacca con i corni che possono allungarsi e accorciarsi.\nHa una forza pari a quella di 100 pugili professionisti.',
			'Questo Pokémon adora la compagnia e, se viene\ntrascurato, si rattrista e si mette a piangere\nversando viscidi lacrimoni.',
			'Chi lo prende in giro credendolo inoffensivo\npotrebbe ritrovarsi ad assaggiare la potenza\ndei suoi corni e della sua grossa coda.',
			'È molto socievole e se si affeziona a qualcuno lo\nabbraccia ricoprendolo di bava appiccicosa.\nCi vuole pazienza con questo Pokémon...',
			'Sotto la sua pelle viscosa c’è uno spesso strato\ndi grasso che assorbe i colpi dei nemici.',
			'A volte non capisce gli ordini del suo Allenatore\ne rimane immobile con un’aria stupita. Molti lo\ntrovano adorabile proprio per questo.',
			'Distende i suoi lunghi corni e si lancia all’attacco\ncon una potenza 100 volte superiore al pugno\ndi un peso massimo.',
		],
		[Language.En]: [
			'This very friendly Dragon-type Pokémon\nwill hug its beloved Trainer, leaving\nthat Trainer covered in sticky slime.',
			'It attacks with retractable horns.\nIt throws a punch that’s the equivalent\nof the force of a hundred pro boxers.',
			'An amazingly friendly Pokémon, but if left to\nitself, loneliness overcomes it, and it oozes\ngooey tears.',
			'It gets picked on because it’s meek. But then,\nwhoever teased it gets to feel the full force of\nits horns and a good swatting from its thick tail.',
			'It’s very friendly toward people. If you grow\nclose to it, Goodra will hug you with its sticky,\nslime-covered body. Don’t get mad.',
			'Underneath its slimy skin is a thick layer of fat,\nand the combination of the two makes enemies’\nattacks slide right off.',
			'Sometimes it misunderstands instructions and\nappears dazed or bewildered. Many Trainers\ndon’t mind, finding this behavior to be adorable.',
			'Its form of offense is forcefully stretching out its\nhorns. The strikes land 100 times harder than any\nblow from a heavyweight boxer.',
			'Able to freely control the hardness of its metallic shell.\nIt loathes solitude and is extremely clingy—it will fume and\nrun riot if those dearest to it ever leave its side.',
		],
		[Language.Ja]: [
			'人懐っこい　ドラゴンポケモン。\n大好きな　トレーナーに　抱き着いて\n粘液で　ヌルヌルにしてしまう。',
			'伸び縮みする　ツノで　攻撃。\nプロボクサー　１００人分の\nパンチに　匹敵する　威力。',
			'すごく　人懐っこい　ポケモン。\n構わないでいると　寂しくて\nヌルヌルの　涙を　流し　鳴く。',
			'大人しいからと　からかうと\n角で　思い切り　突かれ\n太い　尻尾で　薙ぎ払われる。',
			'とっても　人懐っこい。　懐くと\nネバネバの　粘液に　まみれた\n身体で　抱きついてくるが　我慢だ。',
			'ヌルヌルの　皮膚の　下には\n分厚い　脂肪の　層が　あり\n敵の　攻撃を　受け流す。',
			'トレーナーの　指示が　理解できずに\nキョトンとする　ことが　たまに　あり\nその　様子が　かわいいと　人気。',
			'長い　ツノを　伸ばす　勢いで\n攻撃。　威力は　ヘビー級\nボクサーの　パンチの　１００倍だ。',
		],
		[Language.ZhHant]: [
			'和人非常親近的寶可夢。\n沒人理睬的話就會很寂寞，\n流著黏糊糊的眼淚鳴叫。',
			'如果因為牠性情溫順\n就去戲弄牠，會被牠用角狠戳，\n再用粗粗的尾巴掃倒。',
			'和人非常親近。變得親密後，\n會用沾滿黏糊糊黏液的身體\n抱上來，這時就只能忍耐了。',
			'黏糊糊的皮膚下面\n有很厚的脂肪層，\n讓敵人的攻擊起不了作用。',
			'有時會因為無法理解\n訓練家的指令而目瞪口呆。\n那可愛的舉止讓牠深受歡迎。',
			'用伸長角產生的力道來\n攻擊對手，產生的威力比\n重量級拳擊手的拳擊還強１００倍。',
		],
		[Language.ZhHans]: [
			'和人非常亲近的宝可梦。\n不管它的话，就会很寂寞，\n流着黏糊糊的眼泪鸣叫。',
			'因为很温顺就去戏弄的话，\n就会被它用角狠狠戳，\n用粗粗的尾巴扫荡。',
			'和人非常亲近。变得亲密后，\n会用被黏糊糊的黏液包裹着的身体\n抱住人的身体，要忍耐哦。',
			'黏糊糊的皮肤下面有很厚的脂肪层，\n可以卸掉敌人的攻击。',
			'有时会因为无法理解\n训练家的指令而目瞪口呆。\n那可爱的举止让它深受欢迎。',
			'用伸长角产生的力道来\n攻击对手，产生的威力比\n重量级拳击手的拳击还强１００倍。',
		],
	},
	[
		[
			Variety.Goodra,
			300,
			20,
			1505,
			[Type.Dragon],
			{
				frontDefault: '2c43392c.png',
				frontShiny: 'c5c9bcf8.png',
			},
			{
				[Stat.Hp]: {baseStat: 90},
				[Stat.Attack]: {baseStat: 100},
				[Stat.Defense]: {baseStat: 70},
				[Stat.SpecialAttack]: {baseStat: 110},
				[Stat.SpecialDefense]: {baseStat: 150, effort: 3},
				[Stat.Speed]: {baseStat: 80},
			},
			{},
			[
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.Outrage,
					Move.FocusPunch,
					Move.WaterPulse,
					Move.DragonPulse,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Feint,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					49,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.HydroPump,
					Move.Surf,
					Move.Endure,
					Move.WeatherBall,
					Move.MuddyWater,
					Move.MudShot,
					Move.BodyPress,
					Move.BreakingSwipe,
					Move.SkitterSmack,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.Curse,
					Move.Charm,
					Move.KnockOff,
					Move.DragonClaw,
					Move.PoisonTail,
					Move.AcidSpray,
					Move.Scald,
					Move.TeraBlast,
					Move.ChillingWater,
					Move.DragonCheer,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Earthquake,
					Move.Toxic,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.DracoMeteor,
					Move.SludgeWave,
					Move.Bulldoze,
					Move.DragonTail,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.WaterGun,
					Move.DragonBreath,
					Move.PoisonTail,
					Move.AcidSpray,
					Move.TearfulLook,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					43,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					58,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PowerWhip,
					67,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.MegaPunch,
					Move.FirePunch,
					Move.ThunderPunch,
					Move.MegaKick,
					Move.BodySlam,
					Move.Flamethrower,
					Move.HydroPump,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Earthquake,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Outrage,
					Move.Endure,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.WeatherBall,
					Move.MuddyWater,
					Move.MudShot,
					Move.Assurance,
					Move.DragonPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.PowerWhip,
					Move.SludgeWave,
					Move.Bulldoze,
					Move.StompingTantrum,
					Move.BodyPress,
					Move.BreakingSwipe,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.WaterGun,
					Move.Absorb,
					Move.DragonBreath,
					Move.PoisonTail,
					Move.Feint,
					Move.AcidSpray,
					Move.TearfulLook,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					49,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronTail,
					Move.Superpower,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					43,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Hail,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					58,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.DracoMeteor,
					Move.SkitterSmack,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PowerWhip,
					67,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.FocusPunch,
					Move.Superpower,
					Move.WaterPulse,
					Move.AquaTail,
					Move.DragonPulse,
					Move.DracoMeteor,
					Move.LaserFocus,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Absorb,
					Move.Feint,
					Move.AquaTail,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					32,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Earthquake,
					Move.Toxic,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Hail,
					Move.Facade,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					13,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bubble,
					Move.Outrage,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					9,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonBreath,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					38,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Tutor,
					Move.ShockWave,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					47,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PowerWhip,
					50,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Absorb,
					Move.Bubble,
					Move.Protect,
					Move.Outrage,
					Move.Feint,
					Move.AquaTail,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					32,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Hail,
					Move.Facade,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
					Move.Infestation,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					9,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonBreath,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					38,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					47,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PowerWhip,
					50,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.FocusPunch,
					Move.Superpower,
					Move.ShockWave,
					Move.WaterPulse,
					Move.AquaTail,
					Move.DragonPulse,
					Move.DracoMeteor,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Bubble,
					Move.Outrage,
					Move.Feint,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					32,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.Hail,
					Move.Facade,
					Move.SecretPower,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
					Move.Infestation,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Strength,
					Move.RockSmash,
					Move.Incinerate,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					63,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonBreath,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
					50,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					47,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PowerWhip,
					55,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Bubble,
					Move.Outrage,
					Move.Feint,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					32,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Strength,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.RockSmash,
					Move.Hail,
					Move.Facade,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.SludgeWave,
					Move.Round,
					Move.Incinerate,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
					Move.Infestation,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bide,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					9,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					63,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonBreath,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					38,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AquaTail,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					47,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PowerWhip,
					55,
				),
			].flat(),
			[
				{
					ability: Ability.SapSipper,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Hydration,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Gooey,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Goodra,
					PokemonFormBits.Default,
					{
						frontDefault: '2c43392c.png',
						frontShiny: 'c5c9bcf8.png',
					},
					[Type.Dragon],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
		[
			Variety.GoodraHisui,
			null,
			17,
			3341,
			[Type.Steel, Type.Dragon],
			{
				frontDefault: '35d68b97.png',
				frontShiny: '0f9269cf.png',
			},
			{
				[Stat.Hp]: {baseStat: 80},
				[Stat.Attack]: {baseStat: 100},
				[Stat.Defense]: {baseStat: 100},
				[Stat.SpecialAttack]: {baseStat: 110},
				[Stat.SpecialDefense]: {baseStat: 150, effort: 3},
				[Stat.Speed]: {baseStat: 60},
			},
			{},
			[
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.FirePunch,
					Move.ThunderPunch,
					Move.BodySlam,
					Move.TakeDown,
					Move.Flamethrower,
					Move.HydroPump,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.Thunder,
					Move.Earthquake,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Curse,
					Move.Protect,
					Move.ScaryFace,
					Move.SludgeBomb,
					Move.Outrage,
					Move.Sandstorm,
					Move.Endure,
					Move.Charm,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.KnockOff,
					Move.WeatherBall,
					Move.RockTomb,
					Move.MuddyWater,
					Move.DragonClaw,
					Move.MudShot,
					Move.WaterPulse,
					Move.GyroBall,
					Move.DragonPulse,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.DracoMeteor,
					Move.IronHead,
					Move.SludgeWave,
					Move.HeavySlam,
					Move.AcidSpray,
					Move.Bulldoze,
					Move.DragonTail,
					Move.StompingTantrum,
					Move.BodyPress,
					Move.BreakingSwipe,
					Move.SteelBeam,
					Move.SkitterSmack,
					Move.LashOut,
					Move.TeraBlast,
					Move.IceSpinner,
					Move.ChillingWater,
					Move.DragonCheer,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.WaterGun,
					Move.Absorb,
					Move.DragonBreath,
					Move.Feint,
					Move.AcidSpray,
					Move.TearfulLook,
					Move.Shelter,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 49,
					},

					Move.BodySlam,
					Move.IronHead,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					43,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					20,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					15,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.IronTail,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RainDance,
					30,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MuddyWater,
					58,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					25,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					35,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HeavySlam,
					67,
				),
			].flat(),
			[
				{
					ability: Ability.SapSipper,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.ShellArmor,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Gooey,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.GoodraHisui,
					PokemonFormBits.Default,
					{
						frontDefault: '35d68b97.png',
						frontShiny: '0f9269cf.png',
					},
					[Type.Steel, Type.Dragon],
					VersionGroup.LegendsArceus,
					{
						[Language.Fr]: ['Muplodocus de Hisui'],
						[Language.De]: ['Hisui Viscogon'],
						[Language.En]: ['Hisuian Goodra'],
					},
					{
						[Language.JaHrkt]: ['ヒスイのすがた'],
						[Language.Fr]: ['Forme de Hisui'],
						[Language.De]: ['Hisui-Form'],
						[Language.En]: ['Hisuian Form'],
						[Language.Ja]: ['ヒスイのすがた'],
					},
					'hisui',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Klefki,
	50,
	75,
	Color.Gray,
	[EggGroup.Mineral],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Fast,
	Shape.Ball,
	{
		[Language.JaHrkt]: ['クレッフィ'],
		[Language.Roomaji]: ['Cleffy'],
		[Language.Ko]: ['클레피'],
		[Language.ZhHant]: ['鑰圈兒'],
		[Language.Fr]: ['Trousselin'],
		[Language.De]: ['Clavion'],
		[Language.Es]: ['Klefki'],
		[Language.It]: ['Klefki'],
		[Language.En]: ['Klefki'],
		[Language.Ja]: ['クレッフィ'],
		[Language.ZhHans]: ['钥圈儿'],
	},
	{
		[Language.JaHrkt]: ['かぎたばポケモン'],
		[Language.Ko]: ['열쇠꾸러미포켓몬'],
		[Language.ZhHant]: ['鑰匙串寶可夢'],
		[Language.Fr]: ['Pokémon Trousseau'],
		[Language.De]: ['Schlüssel-Pokémon'],
		[Language.Es]: ['Pokémon Llavero'],
		[Language.It]: ['Pokémon Portachiavi'],
		[Language.En]: ['Key Ring Pokémon'],
		[Language.Ja]: ['かぎたばポケモン'],
		[Language.ZhHans]: ['钥匙串宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'カギを　あつめる　しゅうせい。\nてきに　おそわれると　ジャラジャラと\nカギを　うちならして　いかくする。',
			'きにいった　カギは　ぜったいに\nてばなさないので　ぼうはんのために\nきんこの　カギを　もたせるのだ。',
			'カギを　あつめる　しゅうせいが　ある。\nおだやかな　せいかくだが　みんかに\nしのびこみ　カギを　ぬすんでいく。',
			'あたまのツノを　きんぞくの　すきまに\nつっこんで　きんぞくイオンを　すう。\nなぜか　カギを　あつめている。',
			'なぜ　カギを　あつめるか　ふめいだが\nあげると　とても　よろこぶ。　ただし\nマスターキーじゃないと　イヤみたい。',
			'むかしは　こうざんに　すんでいたが\nエサの　こうぶつが　へってきたので\nひとざとに　あらわれるようになった。',
			'カギを　あつめつづける　ポケモン。\nだいじな　カギを　あずけると\nなにが　あっても　まもってくれる。',
			'あたまのさきで　きんぞくイオンを\nすいとる。　カギに　にているのは\nすきすぎて　まねているかららしい。',
		],
		[Language.Ko]: [
			'열쇠를 모으는 습성이 있다.\n적에게 습격당하면 열쇠로\n짤랑짤랑 소리를 내어 위협한다.',
			'마음에 든 열쇠는 절대로\n손에서 놓지 않아서 방범을 위해\n금고 열쇠를 지니게 한다.',
			'열쇠를 모으는 습성이 있다.\n온화한 성격이지만 민가에\n몰래 들어가 열쇠를 훔쳐간다.',
			'머리의 뿔을 금속 틈에\n찔러넣고 금속 이온을 빨아들인다.\n왜인지 열쇠를 모으고 있다.',
			'왜 열쇠를 모으는지 알 수 없지만\n주면 매우 기뻐한다.\n단 마스터키만 좋아하는 것 같다.',
			'옛날에는 광산에 살았지만\n먹이인 광물이 줄어들어서\n사람이 사는 마을에 나타나기 시작했다.',
			'열쇠를 계속 모으는 포켓몬이다.\n소중한 열쇠를 맡기면\n무슨 일이 있어도 지켜준다.',
			'머리끝으로 금속 이온을 흡수한다.\n열쇠를 너무 좋아한 나머지 흉내를 내서\n열쇠를 닮은 모습이 되었다고 한다.',
		],
		[Language.Fr]: [
			'Ce Pokémon collectionne les clés qu’il agite devant\nses ennemis pour les intimider.',
			'Comme il ne se sépare jamais d’une clé qu’il trouve\nà son goût, les gens lui confient celle de leurs coffres,\nafin d’éviter de se faire voler.',
			'Malgré son caractère paisible, ce Pokémon ne\npeut s’empêcher de se faufiler dans les foyers\npour en voler les clés, qu’il aime collectionner.',
			'Il insère l’appendice situé sur sa tête dans les\ninterstices en métal afin d’en extraire les ions.\nIl collectionne les clés pour une raison inconnue.',
			'Nul ne sait pourquoi il collectionne les clés,\nmais il est aux anges dès qu’on lui en donne une.\nIl n’accepte toutefois que les passe-partout.',
			'Il vivait autrefois dans les mines, mais quand\nles minéraux dont il se délectait se sont faits\nplus rares, il a migré vers les villages.',
			'Ce Pokémon collectionne les clés.\nSi on lui en confie une particulièrement\nimportante, il la protègera coûte que coûte.',
			'Il absorbe les ions métalliques avec l’appendice\nsur sa tête. Il paraît qu’il ressemble à une clé\ncar il tient à imiter cet objet qu’il aime tant.',
		],
		[Language.De]: [
			'Dieses Pokémon sammelt eifrig Schlüssel, mit denen\nes wild herumfuchtelt, um Gegner abzuschrecken.',
			'Da es Schlüssel, die ihm gefallen, wie seinen Augapfel\nhütet, vertrauen Menschen ihm die Schlüssel ihrer\nTresore an, um Diebstahl vorzubeugen.',
			'Dieses Pokémon sammelt eifrig Schlüssel, mit denen es wild\nherumfuchtelt, um Gegner abzuschrecken.',
			'Da es Schlüssel, die ihm gefallen, wie seinen Augapfel hütet,\nvertrauen Menschen ihm die Schlüssel ihrer Tresore an,\num Diebstahl vorzubeugen.',
			'Dieses Pokémon sammelt eifrig Schlüssel,\ndie es oft aus fremden Häusern entwendet.\nAnsonsten ist es aber sehr friedlich.',
			'Seinen Fortsatz steckt es gerne in metallene\nZwischenräume, um Metall-Ionen abzusaugen.\nSammelt aus unerfindlichen Gründen Schlüssel.',
			'Niemand weiß, weshalb es Schlüssel sammelt,\naber schenkt man ihm einen, freut es sich sehr.\nEs akzeptiert allerdings nur Generalschlüssel.',
			'Früher lebte es in Minen. Da sein mineralisches\nFutter dort aber immer seltener wird, findet man\nes nun auch in Menschensiedlungen.',
			'Dieses Pokémon sammelt unaufhörlich Schlüssel.\nVertraut man ihm einen besonders wichtigen an,\nbeschützt es diesen um jeden Preis.',
			'Mit dem Fortsatz an seinem Kopf saugt Clavion\nMetall-Ionen ein. Anscheinend liebt es Schlüssel\nso sehr, dass es sie mit seinem Aussehen imitiert.',
		],
		[Language.Es]: [
			'Tiene el hábito de coleccionar llaves. Cuando un\nenemigo lo ataca, las hace tintinear como método\nde intimidación.',
			'Como no se separa de las llaves que le gustan bajo\nningún concepto, la gente le encomienda las llaves\nde cajas fuertes para prevenir posibles robos.',
			'Tiene el hábito de coleccionar llaves. Cuando un enemigo lo\nataca, las hace tintinear como método de intimidación.',
			'Como no se separa de las llaves que le gustan bajo ningún\nconcepto, la gente le encomienda las llaves de cajas fuertes\npara prevenir posibles robos.',
			'Tiene el hábito de coleccionar llaves. Su carácter\ntranquilo no impide que le guste colarse en\ncasas ajenas a robar llaves.',
			'Introduce el apéndice de su cabeza por los\nresquicios de los metales para absorber los\niones. Por alguna razón, adora las llaves.',
			'Su afán por coleccionar llaves es un misterio y\nse alegra mucho si le regalan una, pero si esta\nno es una llave maestra, se le tuerce la cara.',
			'Hace tiempo solía vivir en minas, pero tras la\ndisminución de los minerales que le servían de\nalimento, se trasladó a poblaciones humanas.',
			'Un Pokémon coleccionista de llaves. Si alguien le\nconfía una muy importante, la protegerá como si\nle fuese la vida en ello.',
			'Según parece, absorbe iones metálicos por el\napéndice de la cabeza para adoptar una forma\nsimilar a la de sus amadas llaves.',
		],
		[Language.It]: [
			'Ha l’abitudine di raccogliere chiavi. Quando viene\nattaccato, minaccia il nemico agitandole e facendo\nun gran chiasso.',
			'Spesso gli esseri umani affidano a questo Pokémon\nle chiavi delle loro casseforti per prevenire i furti.\nSi sa infatti che custodisce con cura le chiavi che ama.',
			'Ha l’abitudine di raccogliere chiavi. Quando viene attaccato,\nminaccia il nemico agitandole e facendo un gran chiasso.',
			'Spesso gli esseri umani affidano a questo Pokémon le chiavi\ndelle loro casseforti per prevenire i furti. Si sa infatti che\ncustodisce con cura le chiavi che ama.',
			'Ha un carattere pacifico, ma non resiste alla\ntentazione di intrufolarsi nelle case per rubare\nchiavi, che adora collezionare.',
			'Infila la sporgenza che ha sulla testa negli\ninterstizi tra oggetti di metallo per assorbire ioni.\nHa la strana abitudine di collezionare chiavi.',
			'Per qualche motivo che nessuno sa, colleziona\nchiavi. È felicissimo quando gliene regalano una,\nma attenzione: accetta solo i passe-partout.',
			'In passato viveva nelle miniere, ma poiché i\nminerali di cui si nutre si sono fatti più rari,\nadesso è possibile incontrarlo anche nei villaggi.',
			'Colleziona chiavi. Se gli si affida una chiave\nimportante, si può star sicuri che la proteggerà\na ogni costo.',
			'Assorbe gli ioni metallici con la sporgenza\nsulla testa. Si dice che abbia modificato il suo\naspetto per assomigliare alle sue amate chiavi.',
		],
		[Language.En]: [
			'These key collectors threaten any attackers\nby fiercely jingling their keys at them.',
			'It never lets go of a key that it likes,\nso people give it the keys to vaults and\nsafes as a way to prevent crime.',
			'This even-tempered Pokémon has a habit of\ncollecting keys. It will sneak into people’s homes\nto steal their keys.',
			'It inserts its horn into chinks in metal, absorbing\nmetal ions. For some reason, it collects keys.',
			'Although it’s unclear why it collects keys, giving\nit a key makes Klefki very happy. However, it\napparently only likes master keys.',
			'Long ago it lived in mines, but once the minerals\nthat make up its diet became scarcer, Klefki\nbegan appearing in human settlements.',
			'This Pokémon is constantly collecting keys.\nEntrust a Klefki with important keys, and the\nPokémon will protect them no matter what.',
			'Klefki sucks in metal ions with the horn topping\nits head. It seems this Pokémon loves keys so\nmuch that its head needed to look like one, too.',
		],
		[Language.Ja]: [
			'カギを　集める　習性。\n敵に　襲われると　ジャラジャラと\nカギを　打ち鳴らして　威嚇する。',
			'気に入った　カギは　絶対に\n手放さないので　防犯のために\n金庫の　カギを　持たせるのだ。',
			'カギを　集める　習性が　ある。\n穏やかな　性格だが　民家に\n忍び込み　カギを　盗んでいく。',
			'頭の角を　金属の　すき間に\n突っ込んで　金属イオンを　吸う。\nなぜか　カギを　集めている。',
			'なぜ　カギを　集めるか　不明だが\nあげると　とても　喜ぶ。　ただし\nマスターキーじゃないと　イヤみたい。',
			'昔は　鉱山に　棲んでいたが\nエサの　鉱物が　減ってきたので\n人里に　現れるようになった。',
			'鍵を　集めつづける　ポケモン。\n大事な　鍵を　預けると\nなにが　あっても　守ってくれる。',
			'頭の先で　金属イオンを　吸い取る。\n鍵に　似ているのは\n好きすぎて　まねているかららしい。',
		],
		[Language.ZhHant]: [
			'有收集鑰匙的習慣。\n性格穩重，卻會偷偷潛入\n民居偷盜鑰匙。',
			'把頭上的角刺入金屬的縫隙中，\n吸取金屬離子。\n另外，不知為何在收集鑰匙。',
			'雖不知牠為何要收集鑰匙，\n但如果給牠鑰匙，牠就會很開心。\n不過，牠似乎就只喜歡萬能鑰匙。',
			'過去棲息在礦山裡，因為\n作為食物的礦物逐漸減少，\n於是開始出現在人類的聚落中。',
			'不斷收集鑰匙的寶可夢。\n如果把重要的鑰匙交給牠，\n無論發生什麼牠都會全力保管。',
			'會用頭的前端吸取金屬離子。\n據說是因為愛鑰匙成癡，\n因此擬態成鑰匙的樣子。',
		],
		[Language.ZhHans]: [
			'有着收集钥匙的习性。\n性格稳重，却会偷偷潜入\n民宅偷盗钥匙。',
			'把头上的角刺入金属的缝隙中，\n吸取金属离子。\n不知为何在收集钥匙。',
			'不知为何要收集钥匙，\n但如果给它的话，就会很高兴。\n不过好像不是万能钥匙就不喜欢。',
			'过去一直住在矿山里，\n但因为作为食物的矿物不断减少，\n便开始出现在村落里。',
			'一直在收集钥匙的宝可梦。\n如果把重要的钥匙托付给它，\n无论发生什么它都会全力守护。',
			'会用头的前端吸取金属离子。\n之所以长得像钥匙，据说是因为\n太过喜欢钥匙，情不自禁进行了模仿。',
		],
	},
	[
		[
			Variety.Klefki,
			165,
			2,
			30,
			[Type.Steel, Type.Fairy],
			{
				frontDefault: '38be6e33.png',
				frontShiny: '396427f0.png',
				backDefault: '23dfa14d.png',
				backShiny: '41bcc022.png',
			},
			{
				[Stat.Hp]: {baseStat: 57},
				[Stat.Attack]: {baseStat: 80},
				[Stat.Defense]: {baseStat: 91, effort: 1},
				[Stat.SpecialAttack]: {baseStat: 80},
				[Stat.SpecialDefense]: {baseStat: 87},
				[Stat.Speed]: {baseStat: 75},
			},
			{},
			[
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					4,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.ThunderWave,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.IronDefense,
					Move.CalmMind,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.Psyshock,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Swift,
					Move.Sandstorm,
					Move.MetalSound,
					Move.TrickRoom,
					Move.SkitterSmack,
					Move.TeraBlast,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Spikes,
					Move.Endure,
					Move.Imprison,
					Move.StoredPower,
					Move.DrainingKiss,
					Move.MistyTerrain,
					Move.PlayRough,
					Move.SteelBeam,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Torment,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Recycle,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Imprison,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LastResort,
					52,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.MagnetRise,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.Switcheroo,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FlashCannon,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.FoulPlay,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					8,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FairyLock,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					4,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.ThunderWave,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Spikes,
					Move.Endure,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Facade,
					Move.Imprison,
					Move.IronDefense,
					Move.CalmMind,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.Psyshock,
					Move.FoulPlay,
					Move.StoredPower,
					Move.DrainingKiss,
					Move.MistyTerrain,
					Move.PlayRough,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.MagicRoom,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Safeguard,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Torment,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Recycle,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Imprison,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LastResort,
					52,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.MagnetRise,
					Move.Switcheroo,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FlashCannon,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					48,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.CraftyShield,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FairyLock,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.SteelBeam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.ThunderWave,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.CalmMind,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.Psyshock,
					Move.Round,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Thief,
					Move.IronDefense,
					Move.Switcheroo,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IronDefense,
					Move.MagnetRise,
					Move.Defog,
					Move.MagicRoom,
					Move.FoulPlay,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Spikes,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Egg,
					Move.LockOn,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Torment,
					32,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.MagicCoat,
					Move.Recycle,
					Move.Covet,
					Move.LastResort,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Recycle,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Imprison,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HealBlock,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MirrorShot,
					34,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.CraftyShield,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					5,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyLock,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.FairyLock,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.ThunderWave,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.CalmMind,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.Psyshock,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Thief,
					Move.LockOn,
					Move.IronDefense,
					Move.Switcheroo,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Spikes,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Torment,
					32,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Recycle,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Imprison,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HealBlock,
					50,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MirrorShot,
					34,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.CraftyShield,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Cut,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.FairyLock,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.ThunderWave,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.SecretPower,
					Move.CalmMind,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.Psyshock,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Thief,
					Move.LockOn,
					Move.IronDefense,
					Move.Switcheroo,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.MagicCoat,
					Move.Recycle,
					Move.IronDefense,
					Move.Covet,
					Move.LastResort,
					Move.MagnetRise,
					Move.MagicRoom,
					Move.FoulPlay,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Spikes,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Torment,
					32,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Recycle,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Imprison,
					36,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					8,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					12,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HealBlock,
					50,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MirrorShot,
					34,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					44,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					27,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.CraftyShield,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					43,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.HyperBeam,
					Move.ThunderWave,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Torment,
					Move.Facade,
					Move.CalmMind,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.Psyshock,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.FairyLock,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Thief,
					Move.LockOn,
					Move.IronDefense,
					Move.Switcheroo,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Spikes,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Torment,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Recycle,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Imprison,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MetalSound,
					12,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HealBlock,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MirrorShot,
					34,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MagicRoom,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DrainingKiss,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.CraftyShield,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PlayRough,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FairyWind,
					5,
				),
			].flat(),
			[
				{
					ability: Ability.Prankster,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Magician,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Klefki,
					PokemonFormBits.Default,
					{
						frontDefault: '38be6e33.png',
						frontShiny: '396427f0.png',
						backDefault: '23dfa14d.png',
						backShiny: '41bcc022.png',
					},
					[Type.Steel, Type.Fairy],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Phantump,
	50,
	120,
	Color.Brown,
	[EggGroup.Plant, EggGroup.Indeterminate],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Arms,
	{
		[Language.JaHrkt]: ['ボクレー'],
		[Language.Roomaji]: ['Bokurei'],
		[Language.Ko]: ['나목령'],
		[Language.ZhHant]: ['小木靈'],
		[Language.Fr]: ['Brocélôme'],
		[Language.De]: ['Paragoni'],
		[Language.Es]: ['Phantump'],
		[Language.It]: ['Phantump'],
		[Language.En]: ['Phantump'],
		[Language.Ja]: ['ボクレー'],
		[Language.ZhHans]: ['小木灵'],
	},
	{
		[Language.JaHrkt]: ['きりかぶポケモン'],
		[Language.Ko]: ['그루터기포켓몬'],
		[Language.ZhHant]: ['樹樁寶可夢'],
		[Language.Fr]: ['Pokémon Souche'],
		[Language.De]: ['Baumstumpf-Pokémon'],
		[Language.Es]: ['Pokémon Tocón'],
		[Language.It]: ['Pokémon Ceppo'],
		[Language.En]: ['Stump Pokémon'],
		[Language.Ja]: ['きりかぶポケモン'],
		[Language.ZhHans]: ['树桩宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'くさった　きりかぶに　たましいが\nやどり　ポケモンに　なった。\nひとの　よりつかない　もりに　すむ。',
			'もりで　さまよい　しんだ　こどもの\nたましいが　きりかぶに　やどり\nポケモンになったと　いわれている。',
			'もりで　しんだ　こどもの　たましいが\nきりかぶに　やどった。　ひめいの\nような　ぶきみな　こえで　なく。',
			'みどりの　はっぱを　つみとって\nせんじて　のめば　まんびょうに\nきくと　いう　いいつたえが　ある。',
			'こどものこえを　まね　ひとを　もりの\nおくふかくへ　まよいこませる。\nじぶんのなかまに　するつもりなのだ。',
			'きりかぶに　なにかしらの　たましいが\nやどり　うまれた。　みどりの　はを\nにだしたしるは　まんびょうに　きく。',
			'もりで　さまよい　いのちを　おとした\nこどもの　たましいが　きりかぶに\nやどり　ポケモンに　うまれかわった。',
			'にんげんの　こどもに　にた　こえで\nないて　おとなを　もりの　おくへ\nさそいこみ　まよわせて　しまうのだ。',
		],
		[Language.Ko]: [
			'썩은 그루터기에 혼이\n깃들어 포켓몬이 되었다.\n사람이 가까이 가지 않는 숲에 산다.',
			'숲에서 헤매다 죽은 아이의\n영혼이 나무 그루터기에 씌어\n포켓몬이 되었다고 한다.',
			'숲에서 죽은 어린아이의 영혼이\n그루터기에 깃들었다. 비명\n같은 기분 나쁜 목소리로 운다.',
			'녹색 잎사귀를 따다가\n달여 마시면 만병에\n듣는다고 하는 전설이 있다.',
			'아이 목소리를 흉내 내어 사람을\n숲 깊숙이 유인해 길을 잃게 한다.\n자신의 동료로 삼을 생각이다.',
			'그루터기에 무언가의 영혼이\n깃들어 태어났다. 녹색 잎사귀를\n달여 낸 물은 만병에 듣는다.',
			'숲속을 헤매다 목숨을 잃은\n아이의 영혼이 나무 그루터기에\n씌어 포켓몬으로 다시 태어났다.',
			'인간의 어린이를 닮은 목소리로\n울어 어른을 숲속으로\n유인하여 길을 잃게 한다.',
		],
		[Language.Fr]: [
			'Ce Pokémon apparaît lorsqu’un esprit possède\nun arbre en décomposition. Il vit dans les forêts où\nles humains n’osent pas s’aventurer.',
			'D’après la légende, cette espèce de Pokémon aurait\nvu le jour quand des âmes d’enfants perdus dans\nla forêt auraient possédé des souches d’arbres.',
			'Ce Pokémon apparaît lorsqu’un esprit possède un arbre\nen décomposition. Il vit dans les forêts où les humains\nn’osent pas s’aventurer.',
			'D’après la légende, cette espèce de Pokémon aurait vu\nle jour quand des âmes d’enfants perdus dans la forêt\nauraient possédé des souches d’arbres.',
			'Ce Pokémon est une souche d’arbre possédée\npar l’âme d’un enfant mort en forêt. Son cri\nressemble à des pleurs.',
			'Une légende raconte qu’il est possible de créer\nune panacée en infusant les feuilles vertes qui\npoussent sur ses branches.',
			'Il imite la voix d’un enfant pour inciter les gens\nà se perdre au plus profond des bois. Il espère\nainsi se faire de nouveaux amis.',
			'Il est né lorsqu’une âme est venue se loger dans\nune souche. Les infusions de ses feuilles vertes\npermettent de guérir toutes les maladies.',
			'Ce Pokémon prend vie lorsque l’âme d’un enfant\ndisparu en forêt prend possession d’une souche\nd’arbre.',
			'Il imite des cris d’enfants pour pousser les adultes\nà venir se perdre au plus profond de la forêt.',
		],
		[Language.De]: [
			'Bei diesen Pokémon handelt es sich um verrottete\nund von Geistern besessene Baumstümpfe, die sich\nin von Menschen gemiedene Wälder zurückziehen.',
			'Bei diesen Pokémon soll es sich um die Seelen von\nKindern handeln, die sich im Wald verliefen und ums\nLeben kamen und nun in Baumstümpfen hausen.',
			'Bei diesen Pokémon handelt es sich um verrottete und von\nGeistern besessene Baumstümpfe, die sich in von Menschen\ngemiedene Wälder zurückziehen.',
			'Bei diesen Pokémon soll es sich um die Seelen von Kindern\nhandeln, die sich im Wald verliefen und ums Leben kamen\nund nun in Baumstümpfen hausen.',
			'Es ist die Seele eines im Wald gestorbenen\nKindes, die von einem Baumstumpf Besitz\nergriffen hat. Sein Ruf gleicht einem Schluchzen.',
			'Röstet man seine grünen Blätter, lässt sich\ndaraus ein Tee kochen, der gegen sämtliche\nKrankheiten helfen soll.',
			'Es imitiert die Stimme eines Kindes, um\nMenschen tief in den Wald zu locken. Es hofft,\nso neue Freunde zu machen.',
			'Ein Baumstumpf, den sich eine Seele als neues\nZuhause ausgesucht hat. Kocht man seine\ngrünen Blätter ab, erhält man ein Allheilmittel.',
			'Die Seele eines Kindes, das sich im Wald verlief\nund dabei ums Leben kam, nistete sich in einem\nBaumstumpf ein und wurde zu diesem Pokémon.',
			'Es imitiert das Schluchzen eines Menschenkindes,\num Erwachsene tief in den Wald zu locken und\ndafür zu sorgen, dass diese sich verlaufen.',
		],
		[Language.Es]: [
			'Pokémon que nace cuando un espíritu se adentra en\nun tocón podrido. Habita en bosques que son poco\nfrecuentados por humanos.',
			'Según una leyenda, son en realidad almas de niños\nque pasaron a mejor vida tras perderse en el bosque\ny se convirtieron en Pokémon al habitar un tocón.',
			'Pokémon que nace cuando un espíritu se adentra en un tocón\npodrido. Habita en bosques que son poco frecuentados por\nhumanos.',
			'Según una leyenda, son en realidad almas de niños que\npasaron a mejor vida tras perderse en el bosque y se\nconvirtieron en Pokémon al habitar un tocón.',
			'Nace cuando el alma de un niño perdido habita\nun tocón. Su grito se asemeja a un escalofriante\nchillido.',
			'Se cree que con las hojillas verdes que le\ncrecen se puede preparar una infusión capaz\nde curar cualquier enfermedad.',
			'Imita la voz de un niño con la intención de que\nalgún humano se adentre y se pierda en lo más\nprofundo del bosque y puedan hacerse amigos.',
			'Nació cuando un espíritu desconocido se alojó\nen el interior de un tocón. Una infusión con sus\nhojas verdes puede curar toda afección.',
			'Se dice que en realidad son almas de niños que\npasaron a mejor vida tras perderse en el bosque\ny se convirtieron en Pokémon al habitar un tocón.',
			'Imita el llanto de un niño con la intención de\nque algún adulto se adentre y se pierda en lo\nmás profundo del bosque.',
		],
		[Language.It]: [
			'Pokémon nato da un ceppo marcescente in cui\nalberga uno spirito. Vive in boschi non frequentati\ndagli esseri umani.',
			'Secondo la leggenda, lo spirito di una persona\nsmarritasi in un bosco è entrato in un ceppo d’albero,\ndando vita a questo Pokémon.',
			'Pokémon nato da un ceppo marcescente in cui alberga\nuno spirito. Vive in boschi non frequentati dagli esseri umani.',
			'Secondo la leggenda, lo spirito di una persona smarritasi\nin un bosco è entrato in un ceppo d’albero, dando vita\na questo Pokémon.',
			'Ceppo di un albero in cui alberga lo spirito\ndi un bambino smarrito nel bosco.\nIl suo verso è simile a un grido sinistro.',
			'Secondo una credenza, dall’infusione delle foglie\nverdi che crescono sui suoi rami si produce una\nmedicina portentosa capace di curare ogni male.',
			'Imita la voce di un bambino per spingere chi\nla sente ad addentrarsi nei boschi e smarrirsi,\nsperando così di farsi nuovi amici.',
			'Ha preso vita quando uno spirito è entrato nel\nceppo di un albero. Dalle sue foglie verdi si\nricava un infuso che cura ogni male.',
			'Questo Pokémon è nato quando l’anima di\nun bambino smarritosi nel bosco è entrata\nnel ceppo di un albero.',
			'Emette un pianto simile a quello di un bambino\nper attirare gli adulti nel cuore della foresta\ne farli perdere.',
		],
		[Language.En]: [
			'These Pokémon are created when\nspirits possess rotten tree stumps.\nThey prefer to live in abandoned forests.',
			'According to old tales, these Pokémon are\nstumps possessed by the spirits of\nchildren who died while lost in the forest.',
			'These Pokémon are stumps possessed by the\nspirits of children who died in the forest.\nTheir cries sound like eerie screams.',
			'According to legend, medicine to cure any illness\ncan be made by plucking the green leaves on its\nhead, brewing them, and boiling down the liquid.',
			'By imitating the voice of a child, it causes\npeople to get hopelessly lost deep in the forest.\nIt’s trying to make friends with them.',
			'An unknown spirit came to lodge in a tree\nstump, creating this Pokémon. A cure-all can be\nmade from an infusion of its green leaves.',
			'After a lost child perished in the forest, their\nspirit possessed a tree stump, causing the spirit’s\nrebirth as this Pokémon.',
			'With a voice like a human child’s, it cries out to\nlure adults deep into the forest, getting them lost\namong the trees.',
		],
		[Language.Ja]: [
			'腐った　切り株に　魂が　宿り\nポケモンに　なった。\n人の　寄りつかない　森に　住む。',
			'森で　さまよい　死んだ\n子供の　魂が　切り株に　宿り\nポケモンになったと　言われている。',
			'森で　死んだ　子どもの　魂が\n切り株に　宿った。　悲鳴の\nような　不気味な　声で　鳴く。',
			'緑の　葉っぱを　摘み取って\n煎じて　飲めば　万病に\n効くと　いう　言い伝えが　ある。',
			'子どもの声を　真似　人を　森の\n奥深くへ　迷いこませる。\n自分の仲間に　する　つもりなのだ。',
			'切り株に　何かしらの　魂が\n宿り　生まれた。　緑の　葉を\n煮出した汁は　万病に　効く。',
			'森で　さまよい　命を　落とした\n子どもの　魂が　切り株に\n宿り　ポケモンに　生まれ変わった。',
			'人間の　子どもに　似た　声で\n鳴いて　大人を　森の　奥へ\n誘い込み　迷わせて　しまうのだ。',
		],
		[Language.ZhHant]: [
			'在森林中死去的孩子的靈魂\n寄生在樹樁上。\n用悲鳴般的詭異聲音鳴叫。',
			'傳說摘取綠色的樹葉\n煎煮飲用的話，能治百病。',
			'會模仿孩子的聲音，\n把人引到森林深處讓人迷路。\n因為牠想讓對方當自己的夥伴。',
			'某種靈魂附在樹樁上\n而誕生。綠色的葉子\n煮出來的湯汁可治百病。',
			'在森林中迷路死去的\n孩子的魂魄附在樹樁上，\n轉生成了寶可夢。',
			'用類似人類小孩的聲音鳴叫，\n把大人引到森林的深處，\n讓他們在其中迷失方向。',
		],
		[Language.ZhHans]: [
			'在森林中死去的孩子的魂魄\n寄生在树桩上。\n用悲鸣般的诡异声音鸣叫。',
			'传说，摘取绿色的树叶\n煎煮饮用的话，能治百病。',
			'会模拟孩子的声音\n将人引入森林的深处让其迷失。\n因为打算让对方做自己的伙伴。',
			'不知什么魂魄寄居在\n树桩上诞生而成。\n绿色叶子煮出来的汁包治百病。',
			'在森林中迷路死去的\n孩子的魂魄附在树桩上，\n转生成了宝可梦。',
			'用类似人类小孩的声音鸣叫，\n把大人引到森林的深处，\n让他们在其中迷失方向。',
		],
	},
	[
		[
			Variety.Phantump,
			62,
			4,
			70,
			[Type.Ghost, Type.Grass],
			{
				frontDefault: '824bdbe1.png',
				frontShiny: '12c24814.png',
				backDefault: 'ec3c4c76.png',
				backShiny: 'fd8fa728.png',
			},
			{
				[Stat.Hp]: {baseStat: 43},
				[Stat.Attack]: {baseStat: 70, effort: 1},
				[Stat.Defense]: {baseStat: 48},
				[Stat.SpecialAttack]: {baseStat: 50},
				[Stat.SpecialDefense]: {baseStat: 60},
				[Stat.Speed]: {baseStat: 38},
			},
			{},
			[
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.SuckerPunch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					8,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Growth,
					24,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Dig,
					Move.Psychic,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.Imprison,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.NightShade,
					Move.ConfuseRay,
					Move.Curse,
					Move.RainDance,
					Move.PsychUp,
					Move.GrassyTerrain,
					Move.LashOut,
					Move.TeraBlast,
					Move.Trailblaze,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.ConfuseRay,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					32,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Spite,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DestinyBond,
					48,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Endure,
					Move.MagicalLeaf,
					Move.Hex,
					Move.PhantomForce,
					Move.GrassyGlide,
					Move.SkitterSmack,
					Move.Poltergeist,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Ingrain,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					44,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Hex,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.ForestsCurse,
					52,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BranchPoke,
					4,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Astonish,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.SuckerPunch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					8,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Growth,
					24,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Dig,
					Move.Psychic,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.GigaDrain,
					Move.Endure,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.Trick,
					Move.SkillSwap,
					Move.Imprison,
					Move.MagicalLeaf,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.SeedBomb,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.FoulPlay,
					Move.AllySwitch,
					Move.Hex,
					Move.Bulldoze,
					Move.PhantomForce,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ConfuseRay,
					12,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.Snore,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DestinyBond,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Safeguard,
					Move.Round,
					Move.VenomDrench,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Ingrain,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_Egg,
					Move.Grudge,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Hex,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ForestsCurse,
					52,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BranchPoke,
					4,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GrassyGlide,
					Move.SkitterSmack,
					Move.Poltergeist,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Growth,
					8,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Psychic,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ConfuseRay,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Spite,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.Telekinesis,
					Move.FoulPlay,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DestinyBond,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					31,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.RolePlay,
					Move.MagicCoat,
					Move.WorrySeed,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Ingrain,
					13,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Imprison,
					Move.Grudge,
					Move.VenomDrench,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Egg,
					Move.Bestow,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					54,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ForestsCurse,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.ConfuseRay,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Growth,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
					Move.Bulldoze,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DestinyBond,
					39,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Ingrain,
					13,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Imprison,
					Move.Grudge,
					Move.Bestow,
					Move.VenomDrench,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					54,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ForestsCurse,
					35,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.RockSmash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.ConfuseRay,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Growth,
					8,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SolarBeam,
					Move.Dig,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
					Move.Bulldoze,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Spite,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.SkillSwap,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					19,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DestinyBond,
					39,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Ingrain,
					13,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Imprison,
					Move.Grudge,
					Move.Bestow,
					Move.VenomDrench,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					49,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					54,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					45,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ForestsCurse,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.SolarBeam,
					Move.Dig,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.RockSmash,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.ShadowClaw,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
					Move.Bulldoze,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.ConfuseRay,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Growth,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DestinyBond,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Ingrain,
					13,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Imprison,
					Move.Grudge,
					Move.Bestow,
					Move.VenomDrench,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					54,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ForestsCurse,
					35,
				),
			].flat(),
			[
				{
					ability: Ability.NaturalCure,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Frisk,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Harvest,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Phantump,
					PokemonFormBits.Default,
					{
						frontDefault: '824bdbe1.png',
						frontShiny: '12c24814.png',
						backDefault: 'ec3c4c76.png',
						backShiny: 'fd8fa728.png',
					},
					[Type.Ghost, Type.Grass],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Trevenant,
	50,
	60,
	Color.Brown,
	[EggGroup.Plant, EggGroup.Indeterminate],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Tentacles,
	{
		[Language.JaHrkt]: ['オーロット'],
		[Language.Roomaji]: ['Ohrot'],
		[Language.Ko]: ['대로트'],
		[Language.ZhHant]: ['朽木妖'],
		[Language.Fr]: ['Desséliande'],
		[Language.De]: ['Trombork'],
		[Language.Es]: ['Trevenant'],
		[Language.It]: ['Trevenant'],
		[Language.En]: ['Trevenant'],
		[Language.Ja]: ['オーロット'],
		[Language.ZhHans]: ['朽木妖'],
	},
	{
		[Language.JaHrkt]: ['ろうぼくポケモン'],
		[Language.Ko]: ['고목포켓몬'],
		[Language.ZhHant]: ['老樹寶可夢'],
		[Language.Fr]: ['Pokémon Vieillarbre'],
		[Language.De]: ['Urgehölz-Pokémon'],
		[Language.Es]: ['Pokémon Árbol Viejo'],
		[Language.It]: ['Pokémon Alberantico'],
		[Language.En]: ['Elder Tree Pokémon'],
		[Language.Ja]: ['ろうぼくポケモン'],
		[Language.ZhHans]: ['老树宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'ほかの　きぎを　じざいに　あやつる。\nもりを　あらす　にんげんは　しぬまで\nもりから　でられないようにするのだ。',
			'ねっこを　しんけいの　かわりにして\nもりの　きを　あやつる。からだに\nすみついた　ポケモンには　しんせつ。',
			'もりを　あらすものを　くってしまうと\nいわれる　ポケモン。　もりに　くらす\nいきものたちには　とても　やさしい。',
			'ねっこを　つうじて　ほかの　きぎを\nあやつる。　オーロットの　すむ　もりで\nきを　きると　のろい　ころされる。',
			'もりの　ばけものと　おそれられる。\nきこりたちは　オーロットが　きらう\nほのおタイプをつれ　もりに　はいる。',
			'あしの　さきから　のばした　ねっこで\nちかくの　きぎを　あやつり　もりを\nあらすものを　おそう　ポケモンだ。',
			'もりの　きを　きりたおす　にんげんを\nたべると　おそれられているが　もりで\nくらす　ポケモンたちには　やさしい。',
			'あしの　さきから　ほそい　ねっこを\nのばして　もりの　きぎと　むすびつき\nじざいに　あやつる　ちからを　もつ。',
		],
		[Language.Ko]: [
			'다른 나무들을 자유자재로 조종한다.\n숲을 어지럽히는 인간은 죽을 때까지\n숲에서 벗어나지 못하게 한다.',
			'뿌리를 신경 대신으로 삼아\n숲의 나무를 조종한다. 몸에 자리 잡은\n포켓몬에게는 친절하다.',
			'숲을 망치는 자를 먹어버린다고\n전해지는 포켓몬이다. 숲에 사는\n생물들에게는 매우 친절하다.',
			'뿌리를 통해 다른 나무들을\n조종한다. 대로트가 사는 숲에서\n나무를 베면 저주에 걸려 죽게 된다.',
			'숲의 요괴라고 두려워했다.\n나무꾼들은 대로트가 싫어하는\n불꽃타입을 데리고 숲에 들어간다.',
			'발끝에서 자라난 뿌리로\n주변의 나무를 조종해서 숲을\n어지럽히는 자를 공격하는 포켓몬이다.',
			'숲에서 나무를 베는 인간을\n잡아먹는다는 공포의 대상이지만\n숲속에 사는 포켓몬들에게는 상냥하다.',
			'발끝에서 가느다란 뿌리를 뻗고\n숲의 나무들과 결속하여\n자유자재로 조종하는 힘을 가졌다.',
		],
		[Language.Fr]: [
			'Commande aux autres arbres.\nIl emprisonne jusqu’à la fin de leurs jours les humains\nqui abîment la forêt.',
			'Ses racines sont un véritable système nerveux qui lui\npermet de contrôler les arbres de la forêt. Il se montre\ntrès gentil envers les Pokémon vivant dans son écorce.',
			'Commande aux autres arbres. Il emprisonne jusqu’à la fin\nde leurs jours les humains qui abîment la forêt.',
			'Ses racines sont un véritable système nerveux qui lui permet\nde contrôler les arbres de la forêt. Il se montre très gentil\nenvers les Pokémon vivant dans son écorce.',
			'On raconte que ce Pokémon mange tous ceux\nqui s’en prennent à sa forêt. Il est toutefois\ntrès gentil avec ses voisins sylvains.',
			'Grâce à ses racines, il contrôle les arbres de\nla forêt où il a élu refuge, et maudit quiconque\na le malheur de les abattre.',
			'Les bûcherons n’entrent pas dans les bois sans\nPokémon Feu, effrayés par cette créature\nconsidérée comme un fantôme sylvestre.',
			'Il contrôle les arbres environnants grâce aux\nracines qui poussent au bout de ses pieds,\net attaque quiconque saccage la forêt.',
			'Les bûcherons qui viennent couper des arbres\nen forêt ont peur d’être dévorés par Desséliande.\nIl est gentil avec les Pokémon habitant les bois.',
			'Il étire les fines racines de ses pieds pour établir\nune connexion avec les autres arbres de la forêt\net ainsi les contrôler.',
		],
		[Language.De]: [
			'Die Bäume des Waldes folgen ihm blind.\nMenschen, die dem Wald Schaden zufügen,\nhält es bis an ihr Lebensende darin gefangen.',
			'Es nutzt seine Wurzeln als Nervensystem und\nkontrolliert so andere Bäume. Es ist nett zu den\nPokémon, die in ihm leben.',
			'Die Bäume des Waldes folgen ihm blind. Menschen, die dem\nWald Schaden zufügen, hält es bis an ihr Lebensende darin\ngefangen.',
			'Es nutzt seine Wurzeln als Nervensystem und kontrolliert so\nandere Bäume. Es ist nett zu den Pokémon, die in ihm leben.',
			'Menschen, die dem Wald Schaden zufügen,\nsoll es angeblich auffressen. Es ist nett zu\nallen Lebewesen, die im Wald leben.',
			'Es nutzt seine Wurzeln als Nervensystem und\nkontrolliert so andere Bäume. Wer einen Baum im\nWald eines Trombork fällt, wird tödlich verflucht.',
			'Ein gefürchtetes Waldungeheuer. Holzfäller\nbetreten den Wald daher nur in Begleitung von\nFeuer-Pokémon, die Trombork verabscheut.',
			'Die Wurzeln, die aus seinen Beinen gewachsen\nsind, kontrollieren nahe gelegene Bäume. Es\ngreift alle an, die dem Wald Schaden zufügen.',
			'Es wird dafür gefürchtet, Menschen zu fressen,\ndie Bäume im Wald fällen. Zu den Pokémon,\ndie den Wald bewohnen, ist es aber stets nett.',
			'Es streckt die dünnen Wurzeln an seinen Beinen\naus, um sich so mit den Bäumen im Wald zu\nverbinden und sie nach Belieben zu kontrollieren.',
		],
		[Language.Es]: [
			'Puede controlar los árboles a su voluntad. Retiene\nhasta el fin de sus días a los humanos que se adentran\nen el bosque y lo mancillan.',
			'Sus raíces le permiten controlar los árboles del\nbosque, al funcionar como un sistema nervioso.\nEs amable con los Pokémon que habitan su cuerpo.',
			'Puede controlar los árboles a su voluntad. Retiene hasta el fin\nde sus días a los humanos que se adentran en el bosque y lo\nmancillan.',
			'Sus raíces le permiten controlar los árboles del bosque, al\nfuncionar como un sistema nervioso. Es amable con los\nPokémon que habitan su cuerpo.',
			'Es amable con los seres que habitan los\nbosques, pero se cuenta que devora a quienes\nlos mancillan.',
			'Controla los árboles con sus raíces. Si alguien\ntala un árbol en los bosques en los que habita,\nserá maldecido de por vida.',
			'Se cree que es un demonio del bosque. Los\nleñadores solo se adentran llevando consigo\nPokémon de tipo Fuego, a los que detesta.',
			'Este Pokémon controla a los árboles alargando\nlas raíces que surgen de sus pies, para así\nplantar cara a quienes perjudican el bosque.',
			'Los humanos lo temen porque devora a quienes\nosen talar los árboles, pero es amable con los\nPokémon que habitan en el bosque.',
			'Puede extender las finas raíces que le brotan de\nlas extremidades inferiores para conectarse con\nel resto de los árboles y controlarlos a voluntad.',
		],
		[Language.It]: [
			'In grado di manovrare gli alberi a piacimento,\nintrappola per sempre nei boschi gli umani\nche danneggiano la natura.',
			'Usa le radici come un sistema nervoso per controllare\ngli alberi dei boschi. Tratta con gentilezza i Pokémon\nche fanno il nido nel suo corpo.',
			'In grado di manovrare gli alberi a piacimento, intrappola\nper sempre nei boschi gli umani che danneggiano la natura.',
			'Usa le radici come un sistema nervoso per controllare gli\nalberi dei boschi. Tratta con gentilezza i Pokémon che fanno\nil nido nel suo corpo.',
			'Tratta con gentilezza i Pokémon che vivono\nnel bosco che protegge, ma si dice che divori\nchiunque osi danneggiarlo.',
			'È in grado di controllare gli alberi attraverso le\nproprie radici. Lancia maledizioni terribili su\nchi abbatte gli alberi del bosco dove vive.',
			'È temuto e ritenuto da tutti il mostro del bosco.\nI taglialegna si inoltrano nei boschi solo con\nPokémon di tipo Fuoco, di cui ha il terrore.',
			'Attacca chi vuole danneggiare i boschi\nassumendo il controllo degli alberi vicini con le\nradici che si dipartono dalla punta dei suoi piedi.',
			'Gli esseri umani lo temono perché mangia\nchi abbatte gli alberi. Tuttavia è sempre gentile\ncon i Pokémon che vivono nei boschi.',
			'Ha il potere di controllare gli altri alberi della\nforesta connettendosi a loro grazie alle radici\nsottili che si dipartono dalla punta dei suoi piedi.',
		],
		[Language.En]: [
			'It can control trees at will. It will trap people\nwho harm the forest, so they can never leave.',
			'Using its roots as a nervous system,\nit controls the trees in the forest.\nIt’s kind to the Pokémon that reside in its body.',
			'This Pokémon is said to devour anyone daring to\nravage the forest. To the creatures dwelling in\nthe forest, it offers great kindness.',
			'Through its roots, it exerts control over other\ntrees. A deadly curse falls upon anyone cutting\ndown trees in forests where Trevenant dwell.',
			'It’s feared as a ghost of the forest.\nLumberjacks bring along Fire types, which\nTrevenant hates, when they enter the forest.',
			'This Pokémon controls trees via roots\nstretching from its feet, and it will attack\nanyone that dares to ravage the forest.',
			'People fear it due to a belief that it devours any\nwho try to cut down trees in its forest, but to the\nPokémon it shares its woods with, it’s kind.',
			'Small roots that extend from the tips of this\nPokémon’s feet can tie into the trees of the\nforest and give Trevenant control over them.',
		],
		[Language.Ja]: [
			'ほかの　木々を　自在に　操る。\n森を　荒らす　人間は　死ぬまで\n森から　出られないようにするのだ。',
			'根っこを　神経の　かわりにして\n森の　木を　操る。体に　住みついた\nポケモンには　親切。',
			'森を　荒らす者を　喰ってしまうと\nいわれる　ポケモン。　森に　暮らす\n生き物たちには　とても　優しい。',
			'根っ子を　通じて　他の　木々を\n操る。　オーロットの　棲む　森で\n木を　切ると　呪い　殺される。',
			'森の　化け物と　恐れられる。\n木こりたちは　オーロットが　嫌う\nほのおタイプを連れ　森に　入る。',
			'足の　先から　伸ばした　根っこで\n近くの　木々を　操り　森を\n荒らす者を　襲う　ポケモンだ。',
			'森の　木を　伐り倒す　人間を\n食べると　恐れられているが　森で\n暮らす　ポケモンたちには　優しい。',
			'足の　先から　細い　根っこを\n伸ばして　森の　木々と　結びつき\n自在に　操る　力を　もつ。',
		],
		[Language.ZhHant]: [
			'據說會把破壞森林的人吃掉的寶可夢。\n對生活在森林中的生物們非常溫柔。',
			'透過樹根操縱其他樹木。\n在朽木妖棲息的森林裡\n砍伐樹木的話，會因詛咒而死。',
			'人們認為牠是可怕的森林怪物。\n樵夫們進入森林時，會帶著\n朽木妖討厭的火屬性寶可夢。',
			'這種寶可夢會用腳尖延伸出的\n根鬚操縱附近的樹木，襲擊\n破壞森林環境的人或寶可夢。',
			'人們懼怕牠，因為牠據說會\n吃掉砍倒森林裡樹木的人。\n但牠對住在森林裡的寶可夢很親切。',
			'腳尖伸出來的根鬚\n能連結森林中的樹木，\n並且自由自在地加以操縱。',
		],
		[Language.ZhHans]: [
			'据说会把毁坏森林者吃掉的宝可梦。\n对生活在森林中的生物们非常温柔。',
			'通过根茎操纵其他的树木。\n在朽木妖栖息的森林里\n砍伐树木的话，会被诅咒杀害。',
			'人们惧怕它，认为它是森林的妖怪。\n樵夫们会带着朽木妖讨厌的\n火属性宝可梦再进入森林。',
			'会用从脚尖伸出来的根须操纵\n附近的树木，袭击破坏森林者。',
			'人们惧怕它，因为它据说会\n吃掉砍倒森林里树木的人。\n但它对住在森林里的宝可梦很亲切。',
			'脚尖伸出来的根须\n能连结森林中的树木，\n并且自由自在地加以操纵。',
		],
	},
	[
		[
			Variety.Trevenant,
			166,
			15,
			710,
			[Type.Ghost, Type.Grass],
			{
				frontDefault: 'd3c2ba9f.png',
				frontShiny: '54c3304b.png',
			},
			{
				[Stat.Hp]: {baseStat: 85},
				[Stat.Attack]: {baseStat: 110, effort: 2},
				[Stat.Defense]: {baseStat: 76},
				[Stat.SpecialAttack]: {baseStat: 65},
				[Stat.SpecialDefense]: {baseStat: 82},
				[Stat.Speed]: {baseStat: 56},
			},
			{},
			[
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.NightShade,
					Move.ConfuseRay,
					Move.Haze,
					Move.Curse,
					Move.ScaryFace,
					Move.RainDance,
					Move.PsychUp,
					Move.KnockOff,
					Move.ShadowClaw,
					Move.GrassyTerrain,
					Move.BurningJealousy,
					Move.LashOut,
					Move.TeraBlast,
					Move.Trailblaze,
					Move.PsychicNoise,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.SuckerPunch,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.Psychic,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.CalmMind,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.XScissor,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.LeechSeed,
					Move.BranchPoke,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Growth,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.ConfuseRay,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					32,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Spite,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.DrainPunch,
					Move.FoulPlay,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DestinyBond,
					48,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Endure,
					Move.Imprison,
					Move.MagicalLeaf,
					Move.LeafStorm,
					Move.Hex,
					Move.PhantomForce,
					Move.GrassyGlide,
					Move.SkitterSmack,
					Move.Poltergeist,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Ingrain,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.ShadowClaw,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					44,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Hex,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.ForestsCurse,
					52,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.LeechSeed,
					Move.Astonish,
					Move.BranchPoke,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Psychic,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.GigaDrain,
					Move.Endure,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.Trick,
					Move.SkillSwap,
					Move.Imprison,
					Move.MagicalLeaf,
					Move.CalmMind,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.SeedBomb,
					Move.XScissor,
					Move.DrainPunch,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.TrickRoom,
					Move.LeafStorm,
					Move.GrassKnot,
					Move.FoulPlay,
					Move.AllySwitch,
					Move.Hex,
					Move.Bulldoze,
					Move.PhantomForce,
					Move.VenomDrench,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Growth,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ConfuseRay,
					12,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.Snore,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DestinyBond,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Safeguard,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Ingrain,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowClaw,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowClaw,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Hex,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ForestsCurse,
					52,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GrassyGlide,
					Move.SkitterSmack,
					Move.Poltergeist,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Astonish,
					Move.ShadowClaw,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.Psychic,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.CalmMind,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.XScissor,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
					Move.Bulldoze,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Growth,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Growth,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.HornLeech,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Spite,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.DrainPunch,
					Move.Telekinesis,
					Move.FoulPlay,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DestinyBond,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					31,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.RolePlay,
					Move.MagicCoat,
					Move.Block,
					Move.WorrySeed,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Ingrain,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					5,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowClaw,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					54,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ForestsCurse,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Growth,
					Move.ConfuseRay,
					Move.Astonish,
					Move.ShadowClaw,
					Move.HornLeech,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.CalmMind,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.XScissor,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
					Move.Bulldoze,
					Move.Confide,
					Move.BrutalSwing,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Growth,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					19,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DestinyBond,
					39,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Ingrain,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowClaw,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					54,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					45,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ForestsCurse,
					35,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.RockSmash,
					Move.HoneClaws,
					Move.PowerUpPunch,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.ConfuseRay,
					Move.HornLeech,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.CalmMind,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.XScissor,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
					Move.Bulldoze,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Growth,
					8,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Spite,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.SkillSwap,
					Move.Block,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.DrainPunch,
					Move.FoulPlay,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					19,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DestinyBond,
					39,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Ingrain,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowClaw,
					55,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					62,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					45,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ForestsCurse,
					35,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.HyperBeam,
					Move.Strength,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.RockSmash,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.CalmMind,
					Move.PoisonJab,
					Move.DarkPulse,
					Move.XScissor,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.HoneClaws,
					Move.Round,
					Move.Bulldoze,
					Move.Confide,
					Move.PowerUpPunch,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.ConfuseRay,
					Move.HornLeech,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Growth,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FeintAttack,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DestinyBond,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WillOWisp,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Ingrain,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowClaw,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WoodHammer,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					62,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					45,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ForestsCurse,
					35,
				),
			].flat(),
			[
				{
					ability: Ability.NaturalCure,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Frisk,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Harvest,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Trevenant,
					PokemonFormBits.Default,
					{
						frontDefault: 'd3c2ba9f.png',
						frontShiny: '54c3304b.png',
					},
					[Type.Ghost, Type.Grass],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Pumpkaboo,
	50,
	120,
	Color.Brown,
	[EggGroup.Indeterminate],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Ball,
	{
		[Language.JaHrkt]: ['バケッチャ'],
		[Language.Roomaji]: ['Bakeccha'],
		[Language.Ko]: ['호바귀'],
		[Language.ZhHant]: ['南瓜精'],
		[Language.Fr]: ['Pitrouille'],
		[Language.De]: ['Irrbis'],
		[Language.Es]: ['Pumpkaboo'],
		[Language.It]: ['Pumpkaboo'],
		[Language.En]: ['Pumpkaboo'],
		[Language.Ja]: ['バケッチャ'],
		[Language.ZhHans]: ['南瓜精'],
	},
	{
		[Language.JaHrkt]: ['かぼちゃポケモン'],
		[Language.Ko]: ['호박포켓몬'],
		[Language.ZhHant]: ['南瓜寶可夢'],
		[Language.Fr]: ['Pokémon Citrouille'],
		[Language.De]: ['Kürbis-Pokémon'],
		[Language.Es]: ['Pokémon Calabaza'],
		[Language.It]: ['Pokémon Zucca'],
		[Language.En]: ['Pumpkin Pokémon'],
		[Language.Ja]: ['かぼちゃポケモン'],
		[Language.ZhHans]: ['南瓜宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'じょうぶつできない　たましいを\nかぼちゃの　からだに　いれている。\nひぐれと　ともに　うごきはじめる。',
			'さまよう　たましいを　じょうぶつ\nさせるため　ししゃの　すむ　せかいへ\nはこんでいると　いわれている。',
			'このよで　さまよう　たましいは\nバケッチャの　からだの　なかに\nいれられて　あのよへ　たびだつ。',
			'かぼちゃの　あなから　てらしている\nひかりは　みた　ひとや　ポケモンを\nさいみんじょうたいにして　あやつる。',
		],
		[Language.Ko]: [
			'성불하지 못한 혼을\n호박으로 된 몸속에 담고 있다.\n해가 지면 활동하기 시작한다.',
			'떠도는 영혼을 성불시키기 위해\n죽은 자들이 사는 세계로\n옮기고 있다고 전해진다.',
			'이승을 떠도는 영혼은\n호바귀의 몸속에\n들어간 뒤 저승으로 떠난다.',
			'호박의 구멍에서 나오는\n빛을 본 사람과 포켓몬을\n최면상태로 만들어 조종한다.',
		],
		[Language.Fr]: [
			'Ce Pokémon est né du mariage d’un esprit piégé\ndans le monde des vivants et d’une citrouille.\nIl commence à s’animer au coucher du soleil.',
			'Il paraît qu’il accompagne les âmes des défunts\njusque dans l’au-delà, pour qu’elles puissent goûter\nau repos éternel.',
			'Il paraît qu’il accompagne les âmes des défunts jusque dans\nl’au-delà, pour qu’elles puissent goûter au repos éternel.',
			'Les âmes errantes de ce monde s’introduisent\ndans son corps pour rejoindre l’au-delà.',
			'Il peut manipuler les humains et les Pokémon\nen les hypnotisant grâce à la lumière qui filtre\npar les trous de son ventre en forme de citrouille.',
		],
		[Language.De]: [
			'Es entsteht aus der Vereinigung einer in der Welt\nder Lebenden gefangenen Seele mit einem Kürbis.\nEs wird erst nach Sonnenuntergang aktiv.',
			'Man sagt, es führe verlorene Seelen dem Ende ihres\nrastlosen irdischen Wandelns entgegen und geleite sie\nsicher ins Jenseits.',
			'Es entsteht aus der Vereinigung einer in der Welt der\nLebenden gefangenen Seele mit einem Kürbis. Es wird erst\nnach Sonnenuntergang aktiv.',
			'Verlorene Seelen, die in der Welt der Lebenden\ngefangen sind, finden in seinem Körper Platz,\num ihre Reise ins Jenseits anzutreten.',
			'Blicken Menschen und Pokémon in das Licht, das\naus den Löchern seines Kürbisses dringt, werden\nsie hypnotisiert und von Irrbis kontrolliert.',
		],
		[Language.Es]: [
			'En el interior de la calabaza reside un espíritu que ha\npermanecido atrapado en este mundo. Entra en acción\nal caer la noche.',
			'Se dice que este Pokémon se dedica a guiar las almas\nerrantes al otro mundo para que así puedan descansar\nen paz durante toda la eternidad.',
			'Se dice que este Pokémon se dedica a guiar las almas\nerrantes al otro mundo para que así puedan descansar en\npaz durante toda la eternidad.',
			'Las almas errantes de este mundo se introducen\nen su cuerpo e inician así su viaje al más allá.',
			'La luz que emite por los orificios de la calabaza\nhipnotiza a humanos y Pokémon y los deja bajo\nsu control.',
		],
		[Language.It]: [
			'Pokémon nato quando uno spirito inquieto è entrato\nin una zucca. Si attiva dopo il calar del sole.',
			'Si dice che aiuti le anime smarrite a ritrovare\nil cammino.',
			'Pokémon nato quando uno spirito inquieto è entrato in\nuna zucca. Si attiva dopo il calar del sole.',
			'Si dice che aiuti le anime smarrite a ritrovare il cammino.',
			'Le anime che vagano in questo mondo entrano\nnel suo corpo per iniziare il loro viaggio\nverso l’aldilà.',
			'Con la luce che emana dai buchi nella zucca\nipnotizza esseri umani e Pokémon e ne assume\nil controllo.',
		],
		[Language.En]: [
			'The pumpkin body is inhabited by a spirit\ntrapped in this world. As the sun sets,\nit becomes restless and active.',
			'It is said to carry wandering spirits\nto the place where they belong\nso they can move on.',
			'Spirits that wander this world are placed into\nPumpkaboo’s body. They’re then moved on to\nthe afterlife.',
			'The light that streams out from the holes in the\npumpkin can hypnotize and control the people\nand Pokémon that see it.',
		],
		[Language.Ja]: [
			'成仏できない　魂を\nカボチャの　体に　入れている。\n日暮れと　ともに　動きはじめる。',
			'さまよう　魂を　成仏させるため\n死者の　住む　世界へ\n運んでいると　言われている。',
			'この世で　さまよう　魂は\nバケッチャの　体の　中に\n入れられて　あの世へ　旅立つ。',
			'かぼちゃの　穴から　照らしている\n光は　見た　人や　ポケモンを\n催眠状態にして　操る。',
		],
		[Language.ZhHant]: [
			'在這個世界遊蕩的靈魂\n會被裝到南瓜精的身體裡，\n啟程前往另一個世界。',
			'南瓜的洞裡發出的光\n會催眠並控制\n看到牠的人和寶可夢。',
		],
		[Language.ZhHans]: [
			'在这个世界游荡的灵魂\n会被装到南瓜精的身体里，\n启程前往另一个世界。',
			'南瓜的洞里发出的光\n会催眠并控制\n看到它的人和宝可梦。',
		],
	},
	[
		[
			Variety.PumpkabooAverage,
			67,
			4,
			50,
			[Type.Ghost, Type.Grass],
			{
				frontDefault: '01cb843a.png',
				frontShiny: '417cf3fa.png',
				backDefault: '14c6e378.png',
				backShiny: 'b539133c.png',
			},
			{
				[Stat.Hp]: {baseStat: 49},
				[Stat.Attack]: {baseStat: 66},
				[Stat.Defense]: {baseStat: 70, effort: 1},
				[Stat.SpecialAttack]: {baseStat: 44},
				[Stat.SpecialDefense]: {baseStat: 55},
				[Stat.Speed]: {baseStat: 51},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 12,
					},

					Move.RazorLeaf,
					Move.TrickOrTreat,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ConfuseRay,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.ScaryFace,
					Move.Endure,
					Move.Imprison,
					Move.BulletSeed,
					Move.Hex,
					Move.MysticalFire,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Egg,
					Move.Curse,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 24,
					},

					Move.ScaryFace,
					Move.TrickOrTreat,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Trick,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					4,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GrassyGlide,
					Move.SkitterSmack,
					Move.Poltergeist,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.Curse,
					Move.DestinyBond,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Explosion,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.PainSplit,
					Move.Synthesis,
					Move.RolePlay,
					Move.MagicCoat,
					Move.WorrySeed,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.Telekinesis,
					Move.FoulPlay,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Egg,
					Move.Bestow,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
					Move.Bestow,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
					Move.Astonish,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
					Move.Bestow,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
					Move.Astonish,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flash,
					Move.RockSmash,
					Move.Incinerate,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Synthesis,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.SkillSwap,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
					Move.Bestow,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Flash,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.RockSmash,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Incinerate,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
					Move.Astonish,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
			].flat(),
			[
				{
					ability: Ability.Pickup,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Frisk,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Insomnia,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.PumpkabooAverage,
					PokemonFormBits.Default,
					{
						frontDefault: '01cb843a.png',
						frontShiny: '417cf3fa.png',
						backDefault: '14c6e378.png',
						backShiny: 'b539133c.png',
					},
					[Type.Ghost, Type.Grass],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Pitrouille Normal'],
						[Language.De]: ['Irrbis (M)'],
						[Language.En]: ['Average Pumpkaboo'],
					},
					{
						[Language.JaHrkt]: ['ふつうのサイズ'],
						[Language.Ko]: ['보통 사이즈'],
						[Language.ZhHant]: ['普通尺寸'],
						[Language.Fr]: ['Taille Normale'],
						[Language.De]: ['Größe M'],
						[Language.Es]: ['Tamaño Normal'],
						[Language.It]: ['Normale'],
						[Language.En]: ['Average Size'],
						[Language.Ja]: ['ふつうのサイズ'],
						[Language.ZhHans]: ['普通尺寸'],
					},
					'average',
				],
			],
		],
		[
			Variety.PumpkabooSmall,
			67,
			3,
			35,
			[Type.Ghost, Type.Grass],
			{
				frontDefault: '3f008fcd.png',
				frontShiny: '02fd18dd.png',
			},
			{
				[Stat.Hp]: {baseStat: 44},
				[Stat.Attack]: {baseStat: 66},
				[Stat.Defense]: {baseStat: 70, effort: 1},
				[Stat.SpecialAttack]: {baseStat: 44},
				[Stat.SpecialDefense]: {baseStat: 55},
				[Stat.Speed]: {baseStat: 56},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 12,
					},

					Move.RazorLeaf,
					Move.TrickOrTreat,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ConfuseRay,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.ScaryFace,
					Move.Endure,
					Move.Imprison,
					Move.BulletSeed,
					Move.Hex,
					Move.MysticalFire,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Egg,
					Move.Curse,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 24,
					},

					Move.ScaryFace,
					Move.TrickOrTreat,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Trick,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					4,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GrassyGlide,
					Move.SkitterSmack,
					Move.Poltergeist,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.Curse,
					Move.DestinyBond,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Explosion,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.PainSplit,
					Move.Synthesis,
					Move.RolePlay,
					Move.MagicCoat,
					Move.WorrySeed,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.Telekinesis,
					Move.FoulPlay,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Egg,
					Move.Bestow,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
					Move.Bestow,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
					Move.Astonish,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
					Move.Bestow,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
					Move.Astonish,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flash,
					Move.RockSmash,
					Move.Incinerate,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Synthesis,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.SkillSwap,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
					Move.Bestow,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Flash,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.RockSmash,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Incinerate,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
					Move.Astonish,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
			].flat(),
			[
				{
					ability: Ability.Pickup,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Frisk,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Insomnia,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.PumpkabooSmall,
					PokemonFormBits.Default,
					{
						frontDefault: '3f008fcd.png',
						frontShiny: '02fd18dd.png',
					},
					[Type.Ghost, Type.Grass],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Pitrouille Mini'],
						[Language.De]: ['Irrbis (S)'],
						[Language.En]: ['Small Pumpkaboo'],
					},
					{
						[Language.JaHrkt]: ['ちいさいサイズ'],
						[Language.Ko]: ['작은 사이즈'],
						[Language.ZhHant]: ['小尺寸'],
						[Language.Fr]: ['Taille Mini'],
						[Language.De]: ['Größe S'],
						[Language.Es]: ['Tamaño Pequeño'],
						[Language.It]: ['Mini'],
						[Language.En]: ['Small Size'],
						[Language.Ja]: ['ちいさいサイズ'],
						[Language.ZhHans]: ['小尺寸'],
					},
					'small',
				],
			],
		],
		[
			Variety.PumpkabooLarge,
			67,
			5,
			75,
			[Type.Ghost, Type.Grass],
			{
				frontDefault: '3f008fcd.png',
				frontShiny: '2b9bab85.png',
			},
			{
				[Stat.Hp]: {baseStat: 54},
				[Stat.Attack]: {baseStat: 66},
				[Stat.Defense]: {baseStat: 70, effort: 1},
				[Stat.SpecialAttack]: {baseStat: 44},
				[Stat.SpecialDefense]: {baseStat: 55},
				[Stat.Speed]: {baseStat: 46},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 12,
					},

					Move.RazorLeaf,
					Move.TrickOrTreat,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ConfuseRay,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.ScaryFace,
					Move.Endure,
					Move.Imprison,
					Move.BulletSeed,
					Move.Hex,
					Move.MysticalFire,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Egg,
					Move.Curse,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 24,
					},

					Move.ScaryFace,
					Move.TrickOrTreat,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Trick,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					4,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GrassyGlide,
					Move.SkitterSmack,
					Move.Poltergeist,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.Curse,
					Move.DestinyBond,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Explosion,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.PainSplit,
					Move.Synthesis,
					Move.RolePlay,
					Move.MagicCoat,
					Move.WorrySeed,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.Telekinesis,
					Move.FoulPlay,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Egg,
					Move.Bestow,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
					Move.Bestow,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
					Move.Astonish,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
					Move.Bestow,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
					Move.Astonish,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flash,
					Move.RockSmash,
					Move.Incinerate,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Synthesis,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.SkillSwap,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
					Move.Bestow,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Flash,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.RockSmash,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Incinerate,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
					Move.Astonish,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
			].flat(),
			[
				{
					ability: Ability.Pickup,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Frisk,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Insomnia,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.PumpkabooLarge,
					PokemonFormBits.Default,
					{
						frontDefault: '3f008fcd.png',
						frontShiny: '2b9bab85.png',
					},
					[Type.Ghost, Type.Grass],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Pitrouille Maxi'],
						[Language.De]: ['Irrbis (L)'],
						[Language.En]: ['Large Pumpkaboo'],
					},
					{
						[Language.JaHrkt]: ['おおきいサイズ'],
						[Language.Ko]: ['큰 사이즈'],
						[Language.ZhHant]: ['大尺寸'],
						[Language.Fr]: ['Taille Maxi'],
						[Language.De]: ['Größe L'],
						[Language.Es]: ['Tamaño Grande'],
						[Language.It]: ['Grande'],
						[Language.En]: ['Large Size'],
						[Language.Ja]: ['おおきいサイズ'],
						[Language.ZhHans]: ['大尺寸'],
					},
					'large',
				],
			],
		],
		[
			Variety.PumpkabooSuper,
			67,
			8,
			150,
			[Type.Ghost, Type.Grass],
			{
				frontDefault: '3f008fcd.png',
				frontShiny: '67b417b4.png',
			},
			{
				[Stat.Hp]: {baseStat: 59},
				[Stat.Attack]: {baseStat: 66},
				[Stat.Defense]: {baseStat: 70, effort: 1},
				[Stat.SpecialAttack]: {baseStat: 44},
				[Stat.SpecialDefense]: {baseStat: 55},
				[Stat.Speed]: {baseStat: 41},
			},
			{
				[Version.X]: {
					[Item.MiracleSeed]: 100,
				},
				[Version.Y]: {
					[Item.MiracleSeed]: 100,
				},
				[Version.OmegaRuby]: {
					[Item.MiracleSeed]: 100,
				},
				[Version.AlphaSapphire]: {
					[Item.MiracleSeed]: 100,
				},
				[Version.Sun]: {
					[Item.MiracleSeed]: 5,
				},
				[Version.Moon]: {
					[Item.MiracleSeed]: 5,
				},
				[Version.UltraSun]: {
					[Item.MiracleSeed]: 5,
				},
				[Version.UltraMoon]: {
					[Item.MiracleSeed]: 5,
				},
			},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 12,
					},

					Move.RazorLeaf,
					Move.TrickOrTreat,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ConfuseRay,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.ScaryFace,
					Move.Endure,
					Move.Imprison,
					Move.BulletSeed,
					Move.Hex,
					Move.MysticalFire,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Egg,
					Move.Curse,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 24,
					},

					Move.ScaryFace,
					Move.TrickOrTreat,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Trick,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					4,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GrassyGlide,
					Move.SkitterSmack,
					Move.Poltergeist,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.Curse,
					Move.DestinyBond,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Explosion,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.PainSplit,
					Move.Synthesis,
					Move.RolePlay,
					Move.MagicCoat,
					Move.WorrySeed,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.Telekinesis,
					Move.FoulPlay,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Egg,
					Move.Bestow,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
					Move.Bestow,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
					Move.Astonish,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
					Move.Bestow,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
					Move.Astonish,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flash,
					Move.RockSmash,
					Move.Incinerate,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Synthesis,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.SkillSwap,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Disable,
					Move.DestinyBond,
					Move.Bestow,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Flash,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.RockSmash,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.EnergyBall,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Incinerate,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Trick,
					Move.Astonish,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
			].flat(),
			[
				{
					ability: Ability.Pickup,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Frisk,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Insomnia,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.PumpkabooSuper,
					PokemonFormBits.Default,
					{
						frontDefault: '3f008fcd.png',
						frontShiny: '67b417b4.png',
					},
					[Type.Ghost, Type.Grass],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Pitrouille Ultra'],
						[Language.De]: ['Irrbis (XL)'],
						[Language.En]: ['Super Pumpkaboo'],
					},
					{
						[Language.JaHrkt]: ['とくだいサイズ'],
						[Language.Ko]: ['특대 사이즈'],
						[Language.ZhHant]: ['特大尺寸'],
						[Language.Fr]: ['Taille Ultra'],
						[Language.De]: ['Größe XL'],
						[Language.Es]: ['Tamaño Extragrande'],
						[Language.It]: ['Maxi'],
						[Language.En]: ['Super Size'],
						[Language.Ja]: ['とくだいサイズ'],
						[Language.ZhHans]: ['特大尺寸'],
					},
					'super',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Gourgeist,
	50,
	60,
	Color.Brown,
	[EggGroup.Indeterminate],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Blob,
	{
		[Language.JaHrkt]: ['パンプジン'],
		[Language.Roomaji]: ['Pumpjin'],
		[Language.Ko]: ['펌킨인'],
		[Language.ZhHant]: ['南瓜怪人'],
		[Language.Fr]: ['Banshitrouye'],
		[Language.De]: ['Pumpdjinn'],
		[Language.Es]: ['Gourgeist'],
		[Language.It]: ['Gourgeist'],
		[Language.En]: ['Gourgeist'],
		[Language.Ja]: ['パンプジン'],
		[Language.ZhHans]: ['南瓜怪人'],
	},
	{
		[Language.JaHrkt]: ['かぼちゃポケモン'],
		[Language.Ko]: ['호박포켓몬'],
		[Language.ZhHant]: ['南瓜寶可夢'],
		[Language.Fr]: ['Pokémon Citrouille'],
		[Language.De]: ['Kürbis-Pokémon'],
		[Language.Es]: ['Pokémon Calabaza'],
		[Language.It]: ['Pokémon Zucca'],
		[Language.En]: ['Pumpkin Pokémon'],
		[Language.Ja]: ['かぼちゃポケモン'],
		[Language.ZhHans]: ['南瓜宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'しんげつの　よるに　ぶきみな　こえで\nうたいながら　まちなかを　さまよう。\nその　うたを　きくと　のろわれる。',
			'かみのけのような　うでで　えものを\nしめつける。くるしむ　ようすを\nみながら　たのしそうに　うたうのだ。',
			'まよなかに　どうたいから　ひびく\nぶきみな　なきごえは　あのよで\nくるしむ　ししゃの　なきごえらしい。',
			'しんげつの　よる　げんかんの　ドアを\nパンプジンが　ノックする。　あけた\nひとを　あのよへ　つれていくのだ。',
		],
		[Language.Ko]: [
			'초승달이 뜬 밤에 기분 나쁜 목소리로\n노래를 부르며 마을 안을 헤맨다.\n그 노래를 들으면 저주를 받는다.',
			'머리카락 같은 팔로 사냥감을\n조른다. 괴로워하는 모습을\n지켜보며 즐거운 듯 노래한다.',
			'한밤중에 몸속에서 들리는\n기분 나쁜 울음소리는 저세상에서\n고통받는 죽은 자의 울음소리라는 듯하다.',
			'초승달이 뜨는 밤이 되면 펌킨인이\n현관문을 노크한다. 그리고는 열어준\n사람을 저세상으로 데리고 간다.',
		],
		[Language.Fr]: [
			'Les nuits de nouvelle lune, ce Pokémon erre dans\nles rues en chantant d’une voix lugubre.\nCeux qui l’entendent sont maudits.',
			'Il enserre ses proies dans ses bras, semblables\nà de longues mèches de cheveux. Il se délecte\nde leur souffrance en chantonnant gaiement.',
			'Les nuits de nouvelle lune, ce Pokémon erre dans les rues\nen chantant d’une voix lugubre. Ceux qui l’entendent sont\nmaudits.',
			'Il enserre ses proies dans ses bras, semblables à\nde longues mèches de cheveux. Il se délecte de\nleur souffrance en chantonnant gaiement.',
			'Les lugubres lamentations nocturnes de\nson ventre seraient en fait les cris de souffrance\nd’âmes en peine, résonnant depuis l’au-delà.',
			'Les soirs de nouvelle lune, il frappe aux portes\ndes maisons. Si quelqu’un a le malheur de lui\nouvrir, il l’emporte aussitôt dans l’au-delà.',
		],
		[Language.De]: [
			'Unter unheimlichen Gesängen durchstreift es in\nNeumondnächten Städte und Dörfer. Wer dem\nunheilvollen Gesang lauscht, wird verflucht.',
			'Mit seinen haarähnlichen Armen erfasst es seine Beute\nund stimmt angesichts deren offenkundiger Qualen\nfreudig ein Lied an.',
			'Mit seinen haarähnlichen Armen erfasst es seine Beute\nund stimmt angesichts deren offenkundiger Qualen freudig\nein Lied an.',
			'Man sagt, der unheimliche Gesang, der nachts\naus dem Körper von diesem Pokémon dringt,\nsei das Wehklagen der Toten aus dem Jenseits.',
			'In Neumondnächten klopft Pumpdjinn an die\nEingangstüren der Häuser. Wer sie ihm öffnet,\nwird von ihm ins Jenseits entführt.',
		],
		[Language.Es]: [
			'En las noches de luna nueva deambula por las calles\nde las ciudades y emite espeluznantes alaridos que\nmaldicen a quienes los oyen.',
			'Atrapa a su presa con los brazos, que parecen formar\nsendas matas de pelo, y entona una alegre canción\nmientras se regodea con su sufrimiento.',
			'En las noches de luna nueva deambula por las calles de las\nciudades y emite espeluznantes alaridos que maldicen a\nquienes los oyen.',
			'Atrapa a su presa con los brazos, que parecen formar sendas\nmatas de pelo, y entona una alegre canción mientras se\nregodea con su sufrimiento.',
			'Se dice que los espeluznantes alaridos que emite\nbien entrada la noche son los lamentos de almas\nen pena desde el más allá.',
			'Las noches de luna nueva llama a la puerta de las\ncasas y se lleva al otro mundo a quien abra.',
		],
		[Language.It]: [
			'Vaga per le città nelle notti di luna nuova intonando\nuna melodia sinistra. Chi la ascolta, viene colpito da\nuna maledizione.',
			'Intrappola le prede con i suoi arti simili a capelli e\ncanta dolcemente mentre queste si dibattono per\nliberarsi.',
			'Intrappola le prede con i suoi arti simili a capelli e canta\ndolcemente mentre queste si dibattono per liberarsi.',
			'Si dice che il lamento sinistro che fuoriesce dal\nsuo corpo a notte fonda sia la voce dei morti\nche soffrono nell’aldilà.',
			'Nelle notti di luna nuova bussa alle porte\ndelle case e porta nell’aldilà chi gli apre.',
		],
		[Language.En]: [
			'Singing in eerie voices, they wander\ntown streets on the night of the new moon.\nAnyone who hears their song is cursed.',
			'It enwraps its prey in its hairlike arms.\nIt sings joyfully as it observes the\nsuffering of its prey.',
			'Eerie cries emanate from its body in the dead of\nnight. The sounds are said to be the wails of\nspirits who are suffering in the afterlife.',
			'In the darkness of a new-moon night, Gourgeist\nwill come knocking. Whoever answers the door\nwill be swept off to the afterlife.',
		],
		[Language.Ja]: [
			'新月の　夜に　不気味な　声で\n歌いながら　街中を　さまよう。\nその歌を　聞くと　のろわれる。',
			'髪の毛のような　腕で　獲物を\n締めつける。苦しむ　様子を　見ながら\n楽しそうに　歌うのだ。',
			'真夜中に　胴体から　響く\n不気味な　鳴き声は　あの世で\n苦しむ　死者の　泣き声らしい。',
			'新月の　夜　玄関の　ドアを\nパンプジンが　ノックする。　開けた\n人を　あの世へ　連れて行くのだ。',
		],
		[Language.ZhHant]: [
			'深夜時分，牠身體裡發出\n的詭異叫聲似乎是死者\n在另一個世界裡的痛苦哭聲。',
			'南瓜怪人會在朔月的夜裡\n去別人家門口敲門。開了門的人\n會被牠帶往另一個世界。',
		],
		[Language.ZhHans]: [
			'深夜时分，它身体里发出\n的诡异叫声似乎是死者\n在另一个世界里的痛苦哭声。',
			'南瓜怪人会在朔月的夜里\n去别人家门口敲门。开了门的人\n会被它带往另一个世界。',
		],
	},
	[
		[
			Variety.GourgeistAverage,
			173,
			9,
			125,
			[Type.Ghost, Type.Grass],
			{
				frontDefault: '2e4f6774.png',
				frontShiny: '48a7d68d.png',
			},
			{
				[Stat.Hp]: {baseStat: 65},
				[Stat.Attack]: {baseStat: 90},
				[Stat.Defense]: {baseStat: 122, effort: 2},
				[Stat.SpecialAttack]: {baseStat: 58},
				[Stat.SpecialDefense]: {baseStat: 75},
				[Stat.Speed]: {baseStat: 84},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 12,
					},

					Move.RazorLeaf,
					Move.TrickOrTreat,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Astonish,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.ScaryFace,
					Move.Endure,
					Move.Imprison,
					Move.BulletSeed,
					Move.NastyPlot,
					Move.PowerWhip,
					Move.Hex,
					Move.PhantomForce,
					Move.MysticalFire,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 24,
					},

					Move.ScaryFace,
					Move.TrickOrTreat,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Trick,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					32,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ShadowSneak,
					Move.TrickOrTreat,
					Move.Moonblast,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					48,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GrassyGlide,
					Move.SkitterSmack,
					Move.Poltergeist,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Explosion,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Astonish,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					70,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.PainSplit,
					Move.Synthesis,
					Move.RolePlay,
					Move.MagicCoat,
					Move.WorrySeed,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.Telekinesis,
					Move.FoulPlay,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Trick,
					Move.PhantomForce,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.ScaryFace,
					Move.Trick,
					Move.Astonish,
					Move.PhantomForce,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Trick,
					Move.Astonish,
					Move.PhantomForce,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flash,
					Move.RockSmash,
					Move.Incinerate,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					75,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Synthesis,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.SkillSwap,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					70,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Flash,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.RockSmash,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Incinerate,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Trick,
					Move.Astonish,
					Move.PhantomForce,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					75,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					70,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
			].flat(),
			[
				{
					ability: Ability.Pickup,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Frisk,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Insomnia,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.GourgeistAverage,
					PokemonFormBits.Default,
					{
						frontDefault: '2e4f6774.png',
						frontShiny: '48a7d68d.png',
					},
					[Type.Ghost, Type.Grass],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Banshitrouye Normal'],
						[Language.De]: ['Pumpdjinn (M)'],
						[Language.En]: ['Average Gourgeist'],
					},
					{
						[Language.JaHrkt]: ['ふつうのサイズ'],
						[Language.Ko]: ['보통 사이즈'],
						[Language.ZhHant]: ['普通尺寸'],
						[Language.Fr]: ['Taille Normale'],
						[Language.De]: ['Größe M'],
						[Language.Es]: ['Tamaño Normal'],
						[Language.It]: ['Normale'],
						[Language.En]: ['Average Size'],
						[Language.Ja]: ['ふつうのサイズ'],
						[Language.ZhHans]: ['普通尺寸'],
					},
					'average',
				],
			],
		],
		[
			Variety.GourgeistSmall,
			173,
			7,
			95,
			[Type.Ghost, Type.Grass],
			{
				frontDefault: '611af332.png',
				frontShiny: '66919eff.png',
			},
			{
				[Stat.Hp]: {baseStat: 55},
				[Stat.Attack]: {baseStat: 85},
				[Stat.Defense]: {baseStat: 122, effort: 2},
				[Stat.SpecialAttack]: {baseStat: 58},
				[Stat.SpecialDefense]: {baseStat: 75},
				[Stat.Speed]: {baseStat: 99},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 12,
					},

					Move.RazorLeaf,
					Move.TrickOrTreat,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Astonish,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.ScaryFace,
					Move.Endure,
					Move.Imprison,
					Move.BulletSeed,
					Move.NastyPlot,
					Move.PowerWhip,
					Move.Hex,
					Move.PhantomForce,
					Move.MysticalFire,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 24,
					},

					Move.ScaryFace,
					Move.TrickOrTreat,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Trick,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					32,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ShadowSneak,
					Move.TrickOrTreat,
					Move.Moonblast,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					48,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GrassyGlide,
					Move.SkitterSmack,
					Move.Poltergeist,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Explosion,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Astonish,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					70,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.PainSplit,
					Move.Synthesis,
					Move.RolePlay,
					Move.MagicCoat,
					Move.WorrySeed,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.Telekinesis,
					Move.FoulPlay,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Trick,
					Move.PhantomForce,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.ScaryFace,
					Move.Trick,
					Move.Astonish,
					Move.PhantomForce,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Trick,
					Move.Astonish,
					Move.PhantomForce,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flash,
					Move.RockSmash,
					Move.Incinerate,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					75,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Synthesis,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.SkillSwap,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					70,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Flash,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.RockSmash,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Incinerate,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Trick,
					Move.Astonish,
					Move.PhantomForce,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					75,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					70,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
			].flat(),
			[
				{
					ability: Ability.Pickup,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Frisk,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Insomnia,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.GourgeistSmall,
					PokemonFormBits.Default,
					{
						frontDefault: '611af332.png',
						frontShiny: '66919eff.png',
					},
					[Type.Ghost, Type.Grass],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Banshitrouye Mini'],
						[Language.De]: ['Pumpdjinn (S)'],
						[Language.En]: ['Small Gourgeist'],
					},
					{
						[Language.JaHrkt]: ['ちいさいサイズ'],
						[Language.Ko]: ['작은 사이즈'],
						[Language.ZhHant]: ['小尺寸'],
						[Language.Fr]: ['Taille Mini'],
						[Language.De]: ['Größe S'],
						[Language.Es]: ['Tamaño Pequeño'],
						[Language.It]: ['Mini'],
						[Language.En]: ['Small Size'],
						[Language.Ja]: ['ちいさいサイズ'],
						[Language.ZhHans]: ['小尺寸'],
					},
					'small',
				],
			],
		],
		[
			Variety.GourgeistLarge,
			173,
			11,
			140,
			[Type.Ghost, Type.Grass],
			{
				frontDefault: '611af332.png',
				frontShiny: '4e7b6248.png',
			},
			{
				[Stat.Hp]: {baseStat: 75},
				[Stat.Attack]: {baseStat: 95},
				[Stat.Defense]: {baseStat: 122, effort: 2},
				[Stat.SpecialAttack]: {baseStat: 58},
				[Stat.SpecialDefense]: {baseStat: 75},
				[Stat.Speed]: {baseStat: 69},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 12,
					},

					Move.RazorLeaf,
					Move.TrickOrTreat,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Astonish,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.ScaryFace,
					Move.Endure,
					Move.Imprison,
					Move.BulletSeed,
					Move.NastyPlot,
					Move.PowerWhip,
					Move.Hex,
					Move.PhantomForce,
					Move.MysticalFire,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 24,
					},

					Move.ScaryFace,
					Move.TrickOrTreat,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Trick,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					32,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ShadowSneak,
					Move.TrickOrTreat,
					Move.Moonblast,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					48,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GrassyGlide,
					Move.SkitterSmack,
					Move.Poltergeist,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Explosion,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Astonish,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					70,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.PainSplit,
					Move.Synthesis,
					Move.RolePlay,
					Move.MagicCoat,
					Move.WorrySeed,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.Telekinesis,
					Move.FoulPlay,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Trick,
					Move.PhantomForce,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.ScaryFace,
					Move.Trick,
					Move.Astonish,
					Move.PhantomForce,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Trick,
					Move.Astonish,
					Move.PhantomForce,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flash,
					Move.RockSmash,
					Move.Incinerate,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					75,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Synthesis,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.SkillSwap,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					70,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Flash,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.RockSmash,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Incinerate,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Trick,
					Move.Astonish,
					Move.PhantomForce,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					75,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					70,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
			].flat(),
			[
				{
					ability: Ability.Pickup,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Frisk,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Insomnia,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.GourgeistLarge,
					PokemonFormBits.Default,
					{
						frontDefault: '611af332.png',
						frontShiny: '4e7b6248.png',
					},
					[Type.Ghost, Type.Grass],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Banshitrouye Maxi'],
						[Language.De]: ['Pumpdjinn (L)'],
						[Language.En]: ['Large Gourgeist'],
					},
					{
						[Language.JaHrkt]: ['おおきいサイズ'],
						[Language.Ko]: ['큰 사이즈'],
						[Language.ZhHant]: ['大尺寸'],
						[Language.Fr]: ['Taille Maxi'],
						[Language.De]: ['Größe L'],
						[Language.Es]: ['Tamaño Grande'],
						[Language.It]: ['Grande'],
						[Language.En]: ['Large Size'],
						[Language.Ja]: ['おおきいサイズ'],
						[Language.ZhHans]: ['大尺寸'],
					},
					'large',
				],
			],
		],
		[
			Variety.GourgeistSuper,
			173,
			17,
			390,
			[Type.Ghost, Type.Grass],
			{
				frontDefault: '611af332.png',
				frontShiny: '3647d840.png',
			},
			{
				[Stat.Hp]: {baseStat: 85},
				[Stat.Attack]: {baseStat: 100},
				[Stat.Defense]: {baseStat: 122, effort: 2},
				[Stat.SpecialAttack]: {baseStat: 58},
				[Stat.SpecialDefense]: {baseStat: 75},
				[Stat.Speed]: {baseStat: 54},
			},
			{
				[Version.X]: {
					[Item.MiracleSeed]: 100,
				},
				[Version.Y]: {
					[Item.MiracleSeed]: 100,
				},
				[Version.OmegaRuby]: {
					[Item.MiracleSeed]: 100,
				},
				[Version.AlphaSapphire]: {
					[Item.MiracleSeed]: 100,
				},
				[Version.Sun]: {
					[Item.MiracleSeed]: 5,
				},
				[Version.Moon]: {
					[Item.MiracleSeed]: 5,
				},
				[Version.UltraSun]: {
					[Item.MiracleSeed]: 5,
				},
				[Version.UltraMoon]: {
					[Item.MiracleSeed]: 5,
				},
			},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 12,
					},

					Move.RazorLeaf,
					Move.TrickOrTreat,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Astonish,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.ScaryFace,
					Move.Endure,
					Move.Imprison,
					Move.BulletSeed,
					Move.NastyPlot,
					Move.PowerWhip,
					Move.Hex,
					Move.PhantomForce,
					Move.MysticalFire,
					Move.BrutalSwing,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 24,
					},

					Move.ScaryFace,
					Move.TrickOrTreat,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Trick,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					32,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ShadowSneak,
					Move.TrickOrTreat,
					Move.Moonblast,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.AllySwitch,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					48,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GrassyGlide,
					Move.SkitterSmack,
					Move.Poltergeist,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Round,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Explosion,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Astonish,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					70,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.PainSplit,
					Move.Synthesis,
					Move.RolePlay,
					Move.MagicCoat,
					Move.WorrySeed,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.GigaDrain,
					Move.Trick,
					Move.SkillSwap,
					Move.SeedBomb,
					Move.Telekinesis,
					Move.FoulPlay,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Trick,
					Move.PhantomForce,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.ScaryFace,
					Move.Trick,
					Move.Astonish,
					Move.PhantomForce,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Trick,
					Move.Astonish,
					Move.PhantomForce,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flash,
					Move.RockSmash,
					Move.Incinerate,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					75,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Spite,
					Move.GigaDrain,
					Move.PainSplit,
					Move.Synthesis,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.SkillSwap,
					Move.WorrySeed,
					Move.SeedBomb,
					Move.FoulPlay,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					70,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.FireBlast,
					Move.DreamEater,
					Move.Flash,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SludgeBomb,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.RockSmash,
					Move.WillOWisp,
					Move.Facade,
					Move.NaturePower,
					Move.GyroBall,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.FlameCharge,
					Move.Round,
					Move.Incinerate,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechSeed,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorLeaf,
					16,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.ConfuseRay,
					Move.Explosion,
					Move.Trick,
					Move.Astonish,
					Move.PhantomForce,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					75,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PainSplit,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					70,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BulletSeed,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WorrySeed,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SeedBomb,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowSneak,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					57,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickOrTreat,
					63,
				),
			].flat(),
			[
				{
					ability: Ability.Pickup,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Frisk,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Insomnia,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.GourgeistSuper,
					PokemonFormBits.Default,
					{
						frontDefault: '611af332.png',
						frontShiny: '3647d840.png',
					},
					[Type.Ghost, Type.Grass],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Banshitrouye Ultra'],
						[Language.De]: ['Pumpdjinn (XL)'],
						[Language.En]: ['Super Gourgeist'],
					},
					{
						[Language.ZhHant]: ['特大尺寸'],
						[Language.JaHrkt]: ['とくだいサイズ'],
						[Language.Ko]: ['특대 사이즈'],
						[Language.Fr]: ['Taille Ultra'],
						[Language.De]: ['Größe XL'],
						[Language.Es]: ['Tamaño Extragrande'],
						[Language.It]: ['Maxi'],
						[Language.En]: ['Super Size'],
						[Language.Ja]: ['とくだいサイズ'],
						[Language.ZhHans]: ['特大尺寸'],
					},
					'super',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Bergmite,
	50,
	190,
	Color.Blue,
	[EggGroup.Monster, EggGroup.Mineral],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Quadruped,
	{
		[Language.JaHrkt]: ['カチコール'],
		[Language.Roomaji]: ['Kachikohru'],
		[Language.Ko]: ['꽁어름'],
		[Language.ZhHant]: ['冰寶'],
		[Language.Fr]: ['Grelaçon'],
		[Language.De]: ['Arktip'],
		[Language.Es]: ['Bergmite'],
		[Language.It]: ['Bergmite'],
		[Language.En]: ['Bergmite'],
		[Language.Ja]: ['カチコール'],
		[Language.ZhHans]: ['冰宝'],
	},
	{
		[Language.JaHrkt]: ['ひょうかいポケモン'],
		[Language.Ko]: ['얼음덩이포켓몬'],
		[Language.ZhHant]: ['冰塊寶可夢'],
		[Language.Fr]: ['Pokémon Glaçon'],
		[Language.De]: ['Eisklumpen-Pokémon'],
		[Language.Es]: ['Pokémon Témpano'],
		[Language.It]: ['Pokémon Ghiacciolo'],
		[Language.En]: ['Ice Chunk Pokémon'],
		[Language.Ja]: ['ひょうかいポケモン'],
		[Language.ZhHans]: ['冰块宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'からだを　おおう　こおりが　てきの\nこうげきを　ふせぐ。わられても\nれいきで　すぐに　こおりを　はる。',
			'マイナス１００どの　れいきで　てきを\nこおりづけにする。まんねんゆきに\nおおわれた　やまで　むれを　つくる。',
			'ひょうてんか　１００どの　れいきで\nくうきちゅうの　すいぶんを　こおらせ\nこおりの　そうこうで　みを　まもる。',
			'ごっかんの　ちいきに　せいそくする。\nクレベースの　せなかと　じぶんの\nあしを　こおりつかせて　こていする。',
		],
		[Language.Ko]: [
			'몸을 둘러싼 얼음이 적의\n공격을 막는다. 깨져도\n냉기로 재빨리 얼음을 얼린다.',
			'마이너스 100도의 냉기로 적을\n얼려버린다. 만년설로\n덮인 산에서 무리를 짓는다.',
			'영하 100도의 냉기로\n공기 중의 수분을 얼려서\n얼음 갑옷으로 몸을 지킨다.',
			'혹한의 지역에 서식한다.\n크레베이스의 등에 자신의\n발을 얼어붙게 해 고정한다.',
		],
		[Language.Fr]: [
			'La glace qui couvre son corps bloque les attaques\nennemies. Si elle se fissure, il la reconstitue\nimmédiatement en soufflant de l’air glacé.',
			'Il gèle ses ennemis d’une bourrasque à -100 °C.\nIl vit en troupeau avec ses congénères, dans\nles neiges éternelles des hautes montagnes.',
			'La glace qui couvre son corps bloque les attaques ennemies.\nSi elle se fissure, il la reconstitue immédiatement en soufflant\nde l’air glacé.',
			'Il gèle ses ennemis d’une bourrasque à -100 °C.\nIl vit en troupeau avec ses congénères, dans les neiges\néternelles des hautes montagnes.',
			'Grâce à son souffle glacé à - 100 °C, il peut\ngeler l’humidité dans l’air et se façonner\nune carapace de glace.',
			'Il vit dans les régions les plus froides, agrippé\naux Séracrawl. Il gèle ses pattes sur leur dos\npour se maintenir en place.',
		],
		[Language.De]: [
			'Es wehrt gegnerische Angriffe mit seinem in Eis\ngehüllten Körper ab. Bruchstellen bessert es mit\naus kalter Luft gewonnenem neuen Eis aus.',
			'Es friert seine Gegner mittels eines -100 °C kalten\nLuftstromes ein. Mit seinen Artgenossen lebt es\nherdenweise auf Bergen inmitten des ewigen Eises.',
			'Es wehrt gegnerische Angriffe mit seinem in Eis gehüllten\nKörper ab. Bruchstellen bessert es mit aus kalter Luft\ngewonnenem neuen Eis aus.',
			'Es friert seine Gegner mittels eines -100 °C kalten Luftstromes\nein. Mit seinen Artgenossen lebt es herdenweise auf Bergen\ninmitten des ewigen Eises.',
			'Mit -100 ºC kalter Luft lässt es Wassermoleküle\num sich herum gefrieren und erschafft sich so\neinen schützenden Eispanzer.',
			'Es lebt in extrem kalten Gebieten. Um sich an\nArktilas zu befestigen, lässt es seine Beine an\ndessen Rücken festfrieren.',
		],
		[Language.Es]: [
			'Envuelve su cuerpo en una capa de hielo que le\npermite evitar los ataques del enemigo. Si se\nresquebraja, la recompone con aire gélido.',
			'Congela a sus enemigos sometiéndolos a un aire\ngélido de -100 °C. Forman grupos para habitar\nmontañas cubiertas de una nieve sempiterna.',
			'Envuelve su cuerpo en una capa de hielo que le permite evitar\nlos ataques del enemigo. Si se resquebraja, la recompone con\naire gélido.',
			'Congela a sus enemigos sometiéndolos a un aire gélido de\n-100 °C. Forman grupos para habitar montañas cubiertas de\nuna nieve sempiterna.',
			'Congela la humedad del ambiente exhalando\nvaho a -100 °C para crear una coraza de hielo\ncon la que protege su cuerpo.',
			'Vive en regiones sumamente frías. Se aferra al\nlomo de los Avalugg congelando sus propias\nextremidades.',
		],
		[Language.It]: [
			'Si difende dagli attacchi nemici grazie al ghiaccio\nche ricopre il suo corpo. Se viene danneggiato,\nrigenera lo strato protettivo, riparandolo.',
			'Congela i nemici soffiando aria a -100 °C. Vive in\ngruppo nelle montagne ricoperte da nevi perenni.',
			'Si difende dagli attacchi nemici grazie al ghiaccio che ricopre\nil suo corpo. Se viene danneggiato, rigenera lo strato\nprotettivo, riparandolo.',
			'Congela i nemici soffiando aria a -100 °C. Vive in gruppo\nnelle montagne ricoperte da nevi perenni.',
			'Cristallizza l’umidità presente nell’aria con un\nsoffio ghiacciato a -100 ºC, creando una\ncorazza con cui protegge il proprio corpo.',
			'Abita le regioni più fredde. Si ancora alla schiena\ndi Avalugg congelando la base delle sue zampe.',
		],
		[Language.En]: [
			'It blocks opponents’ attacks with the\nice that shields its body. It uses cold air\nto repair any cracks with new ice.',
			'Using air of -150 degrees Fahrenheit, they\nfreeze opponents solid. They live in herds\nabove the snow line on mountains.',
			'They chill the air around them to −150 degrees\nFahrenheit, freezing the water in the air into ice\nthat they use as armor.',
			'This Pokémon lives in areas of frigid cold.\nIt secures itself to the back of an Avalugg\nby freezing its feet in place.',
			'Lives on mountains blanketed in perennial snow. It freezes water\nvapor in the air to make the ice helmet that it dons for defense.',
		],
		[Language.Ja]: [
			'体を　覆う　氷が\n敵の　攻撃を　防ぐ。割られても\n冷気で　すぐに　氷を　張る。',
			'マイナス１００度の　冷気で　敵を\n氷漬けにする。万年雪に　覆われた\n山で　群れを　作る。',
			'氷点下　１００度の　冷気で\n空気中の　水分を　凍らせ\n氷の　装甲で　身を　守る。',
			'極寒の　地域に　生息する。\nクレベースの　背中と　自分の\n足を　凍りつかせて　固定する。',
		],
		[Language.ZhHant]: [
			'用零下１００度的冷氣\n凍住空氣中的水分，\n用冰之裝甲保護自身。',
			'棲息在極其寒冷的地域。\n會把自己的腳凍在\n冰岩怪的背上固定起來。',
		],
		[Language.ZhHans]: [
			'用零下１００度的冷气\n冻住空气中的水分，\n用冰之装甲保护自身。',
			'栖息在极其寒冷的地域。\n会把自己的脚冻在\n冰岩怪的背上固定起来。',
		],
	},
	[
		[
			Variety.Bergmite,
			61,
			10,
			995,
			[Type.Ice],
			{
				frontDefault: '0ba8ec38.png',
				frontShiny: '69ed2e4a.png',
				backDefault: '4af7d9fd.png',
				backShiny: 'd9a2c27f.png',
			},
			{
				[Stat.Hp]: {baseStat: 55},
				[Stat.Attack]: {baseStat: 69},
				[Stat.Defense]: {baseStat: 85, effort: 1},
				[Stat.SpecialAttack]: {baseStat: 32},
				[Stat.SpecialDefense]: {baseStat: 35},
				[Stat.Speed]: {baseStat: 28},
			},
			{},
			[
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					3,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.DoubleEdge,
					Move.Curse,
					Move.Bulldoze,
					Move.TeraBlast,
					Move.IceSpinner,
					Move.Snowscape,
					Move.ChillingWater,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					42,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					21,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Mist,
					Move.MirrorCoat,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IceBeam,
					Move.Blizzard,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.RockTomb,
					Move.GyroBall,
					Move.StoneEdge,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					39,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Recover,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Harden,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					9,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PowderSnow,
					6,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					12,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IcyWind,
					Move.IronDefense,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Endure,
					Move.Crunch,
					Move.IcicleSpear,
					Move.Avalanche,
					Move.IceFang,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RapidSpin,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					33,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.IronDefense,
					27,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.IceFang,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.AuroraVeil,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					3,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					42,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					21,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Mist,
					Move.MirrorCoat,
					Move.AuroraVeil,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.Attract,
					Move.Safeguard,
					Move.Hail,
					Move.FlashCannon,
					Move.Round,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IceBeam,
					Move.Blizzard,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.IcyWind,
					Move.Endure,
					Move.SleepTalk,
					Move.RainDance,
					Move.Crunch,
					Move.Facade,
					Move.RockTomb,
					Move.IcicleSpear,
					Move.IronDefense,
					Move.GyroBall,
					Move.Avalanche,
					Move.IceFang,
					Move.StoneEdge,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					39,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Recover,
					30,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Harden,
					Move.RapidSpin,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.Snore,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					9,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PowderSnow,
					6,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					33,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.IronDefense,
					27,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.IceFang,
					24,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Bite,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					49,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Mist,
					Move.MirrorCoat,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.Hail,
					Move.Facade,
					Move.RockTomb,
					Move.GyroBall,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.Round,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					43,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RockPolish,
					Move.FrostBreath,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Recover,
					47,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Recover,
					Move.Barrier,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Harden,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.IronDefense,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PowderSnow,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RapidSpin,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.IceBall,
					30,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.WaterPulse,
					Move.AfterYou,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.IceFang,
					26,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Bite,
					Move.Harden,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					49,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Mist,
					Move.Recover,
					Move.Barrier,
					Move.MirrorCoat,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.Hail,
					Move.Facade,
					Move.RockTomb,
					Move.GyroBall,
					Move.RockPolish,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.Round,
					Move.FrostBreath,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Recover,
					47,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					22,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PowderSnow,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RapidSpin,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.IceBall,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					39,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.IceFang,
					26,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Bite,
					Move.Harden,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					49,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Mist,
					Move.Recover,
					Move.Barrier,
					Move.MirrorCoat,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.Hail,
					Move.Facade,
					Move.SecretPower,
					Move.RockTomb,
					Move.GyroBall,
					Move.RockPolish,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.Round,
					Move.FrostBreath,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					43,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Strength,
					Move.Flash,
					Move.RockSmash,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Recover,
					47,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.IronDefense,
					Move.WaterPulse,
					Move.AfterYou,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					22,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PowderSnow,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RapidSpin,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.IceBall,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					39,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.IceFang,
					26,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Bite,
					Move.Harden,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					49,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Mist,
					Move.Recover,
					Move.Barrier,
					Move.MirrorCoat,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.Strength,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Flash,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.RockSmash,
					Move.Hail,
					Move.Facade,
					Move.RockTomb,
					Move.GyroBall,
					Move.RockPolish,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.Round,
					Move.FrostBreath,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Recover,
					47,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PowderSnow,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RapidSpin,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.IceBall,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					39,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.IceFang,
					26,
				),
			].flat(),
			[
				{
					ability: Ability.OwnTempo,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.IceBody,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Sturdy,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Bergmite,
					PokemonFormBits.Default,
					{
						frontDefault: '0ba8ec38.png',
						frontShiny: '69ed2e4a.png',
						backDefault: '4af7d9fd.png',
						backShiny: 'd9a2c27f.png',
					},
					[Type.Ice],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Avalugg,
	50,
	55,
	Color.Blue,
	[EggGroup.Monster, EggGroup.Mineral],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Quadruped,
	{
		[Language.JaHrkt]: ['クレベース'],
		[Language.Roomaji]: ['Crebase'],
		[Language.Ko]: ['크레베이스'],
		[Language.ZhHant]: ['冰岩怪'],
		[Language.Fr]: ['Séracrawl'],
		[Language.De]: ['Arktilas'],
		[Language.Es]: ['Avalugg'],
		[Language.It]: ['Avalugg'],
		[Language.En]: ['Avalugg'],
		[Language.Ja]: ['クレベース'],
		[Language.ZhHans]: ['冰岩怪'],
	},
	{
		[Language.JaHrkt]: ['ひょうざんポケモン'],
		[Language.Ko]: ['빙산포켓몬'],
		[Language.ZhHant]: ['冰山寶可夢'],
		[Language.Fr]: ['Pokémon Iceberg'],
		[Language.De]: ['Eisberg-Pokémon'],
		[Language.Es]: ['Pokémon Iceberg'],
		[Language.It]: ['Pokémon Iceberg'],
		[Language.En]: ['Iceberg Pokémon'],
		[Language.Ja]: ['ひょうざんポケモン'],
		[Language.ZhHans]: ['冰山宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'こおりついた　からだは　こうてつの\nように　かたい。たちふさがる　ものを\nきょたいで　おしつぶし　いどうする。',
			'せなかに　すうひきの　カチコールを\nのせて　くらす　ようすは　まるで\nこおりの　こうくうぼかんのようだ。',
			'なんびきもの　カチコールを　せなかに\nのせて　こういどの　つめたい　うみを\nひょうざんに　まぎれて　およぐ。',
			'にっちゅうの　かつどうで　からだの\nきれつは　ふかくなるが　ひとばんで\nきれつの　ない　からだに　もどる。',
		],
		[Language.Ko]: [
			'얼어붙은 몸은 강철처럼\n단단하다. 앞을 가로막는 것을\n커다란 몸으로 파괴하며 이동한다.',
			'등에 수 마리의 꽁어름을\n태우고 지내는 모습은 마치\n얼음으로 된 항공모함 같다.',
			'여러 마리의 꽁어름을 등에\n태우고 고위도의 차가운 바다를\n빙산 속에 섞여 헤엄친다.',
			'낮 동안의 활동으로 몸의 균열이\n깊어지지만 하룻밤 사이에\n균열이 없는 몸으로 돌아간다.',
		],
		[Language.Fr]: [
			'Son immense corps recouvert de glace est aussi\nsolide que de l’acier. Quand il se déplace, il écrase\ntout qui se trouve sur son passage.',
			'Quand on le voit transportant les petits Grelaçon\nqui vivent sur son dos, il y a une ressemblance\ncertaine avec les véhicules déplaçant les fusées.',
			'Son immense corps recouvert de glace est aussi solide\nque de l’acier. Quand il se déplace, il écrase tout ce qui\nse trouve sur son passage.',
			'Quand on le voit transportant les petits Grelaçon\nqui vivent sur son dos, il y a une ressemblance certaine\navec les véhicules déplaçant les fusées.',
			'Il sillonne les eaux glacées des pôles en se mêlant\naux icebergs, une foule de Grelaçon collée\nà son dos.',
			'Les crevasses sur son dos s’approfondissent\nau cours de la journée, mais se comblent\nde nouveau pendant la nuit.',
		],
		[Language.De]: [
			'Sein eisbedeckter Körper ist so hart wie Stahl.\nEs nutzt diese stahlharte Hülle, um Hindernisse\nzu zerschmettern und sich so seinen Weg zu bahnen.',
			'Mit den zahlreichen Arktip auf seinem Rücken sieht es\naus wie ein Flugzeugträger aus Eis.',
			'Sein eisbedeckter Körper ist so hart wie Stahl. Es nutzt diese\nstahlharte Hülle, um Hindernisse zu zerschmettern und sich so\nseinen Weg zu bahnen.',
			'Mit den zahlreichen Arktip auf seinem Rücken sieht es aus wie\nein Flugzeugträger aus Eis.',
			'Mit unzähligen Arktip auf dem Rücken schwimmt\nes wie ein Eisberg durch die kalten Meere hoher\nBreitengrade.',
			'Die Risse auf seinem Körper werden im Zuge\nseiner täglichen Aktivitäten tiefer. Ihm genügt\njedoch eine Nacht, um sie wieder zu schließen.',
		],
		[Language.Es]: [
			'Su cuerpo, cubierto de hielo, es tan duro como el\npropio acero. Su abultada figura le permite arramblar\ncon todo lo que se encuentra a su paso.',
			'Parece un portaaviones de hielo, por el aspecto que\npresenta al llevar varios Bergmite en su espalda.',
			'Su cuerpo, cubierto de hielo, es tan duro como el propio\nacero. Su abultada figura le permite arramblar con todo lo que\nse encuentra a su paso.',
			'Parece un portaaviones de hielo, por el aspecto que presenta\nal llevar varios Bergmite en su espalda.',
			'Surca las aguas de mares gélidos, situados a altas\nlatitudes, llevando a varios Bergmite en el lomo y\nconfundiéndose entre los icebergs.',
			'Las fisuras de su cuerpo se agrandan durante\nel día, pero por la noche vuelven a cerrarse.',
		],
		[Language.It]: [
			'Il suo enorme corpo di ghiaccio è duro come l’acciaio.\nAvanza distruggendo tutto ciò che gli si para davanti.',
			'Ospita numerosi Bergmite sul suo dorso, come\nuna vera e propria portaerei di ghiaccio.',
			'Ospita numerosi Bergmite sul suo dorso, come una vera\ne propria portaerei di ghiaccio.',
			'Nuota nei freddi mari polari ospitando numerosi\nBergmite sulla schiena e confondendosi tra\ngli iceberg.',
			'Durante il giorno le crepe sul suo corpo\ndiventano più profonde, ma nel giro di una\nnotte si riempiono del tutto.',
		],
		[Language.En]: [
			'Its ice-covered body is as hard as steel.\nIts cumbersome frame crushes anything that\nstands in its way.',
			'The way several Bergmite huddle\non its back makes it look like\nan aircraft carrier made of ice.',
			'At high latitudes, this Pokémon can be found\nwith clusters of Bergmite on its back as it swims\namong the icebergs.',
			'As Avalugg moves about during the day,\nthe cracks in its body deepen. The Pokémon’s\nbody returns to a pristine state overnight.',
			'The armor of ice covering its lower jaw puts steel to shame and\ncan shatter rocks with ease. This Pokémon barrels along steep\nmountain paths, cleaving through the deep snow.',
		],
		[Language.Ja]: [
			'凍りついた　体は　鋼鉄のように\n硬い。立ちふさがる　ものを\n巨体で　押しつぶし　移動する。',
			'背中に　数匹の　カチコールを\n乗せて　暮らす　様子は\nまるで　氷の　航空母艦のようだ。',
			'何匹もの　カチコールを　背中に\n乗せて　高緯度の　冷たい　海を\n氷山に　紛れて　泳ぐ。',
			'日中の　活動で　体の\n亀裂は　深くなるが　一晩で\n亀裂の　ない　体に　もどる。',
		],
		[Language.ZhHant]: [
			'把好幾隻冰寶馱在背上，\n混進眾多冰山之間，\n在高緯度的寒冷大海裡游動。',
			'雖然身體的裂縫會因\n白天的活動而變大，\n但只要一晚就能全部長好。',
		],
		[Language.ZhHans]: [
			'把好几只冰宝驮在背上，\n混进众多冰山之间，\n在高纬度的寒冷大海里游动。',
			'虽然身体的裂缝会因\n白天的活动而变大，\n但只要一晚就能全部长好。',
		],
	},
	[
		[
			Variety.Avalugg,
			180,
			20,
			5050,
			[Type.Ice],
			{
				frontDefault: 'dfaed7e7.png',
				frontShiny: 'f79c5d6b.png',
			},
			{
				[Stat.Hp]: {baseStat: 95},
				[Stat.Attack]: {baseStat: 117},
				[Stat.Defense]: {baseStat: 184, effort: 2},
				[Stat.SpecialAttack]: {baseStat: 44},
				[Stat.SpecialDefense]: {baseStat: 46},
				[Stat.Speed]: {baseStat: 28},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.DoubleEdge,
					Move.Curse,
					Move.ScaryFace,
					Move.TeraBlast,
					Move.IceSpinner,
					Move.Snowscape,
					Move.ChillingWater,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					46,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					21,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HydroPump,
					Move.Endure,
					Move.Crunch,
					Move.IcicleSpear,
					Move.Avalanche,
					Move.IceFang,
					Move.HeavySlam,
					Move.HighHorsepower,
					Move.BodyPress,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.Facade,
					Move.RockTomb,
					Move.GyroBall,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.Bulldoze,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					41,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Recover,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					9,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PowderSnow,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					12,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.IcyWind,
					Move.IronDefense,
					Move.IronHead,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RapidSpin,
					1,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					33,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.IronDefense,
					27,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.IceFang,
					24,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WideGuard,
					1,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.IcicleCrash,
					51,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
					Move.PowderSnow,
					Move.RapidSpin,
					Move.WideGuard,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.HydroPump,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.IcyWind,
					Move.Endure,
					Move.SleepTalk,
					Move.RainDance,
					Move.Crunch,
					Move.Facade,
					Move.RockTomb,
					Move.IcicleSpear,
					Move.IronDefense,
					Move.GyroBall,
					Move.GigaImpact,
					Move.Avalanche,
					Move.IceFang,
					Move.FlashCannon,
					Move.IronHead,
					Move.StoneEdge,
					Move.HeavySlam,
					Move.Bulldoze,
					Move.HighHorsepower,
					Move.StompingTantrum,
					Move.BodyPress,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					46,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					21,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					41,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Recover,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SkullBash,
					51,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.Superpower,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					9,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					12,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Attract,
					Move.Safeguard,
					Move.Hail,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					33,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.IronDefense,
					27,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.IceFang,
					24,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.BodySlam,
					Move.Harden,
					Move.PowderSnow,
					Move.WideGuard,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					56,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.SkullBash,
					Move.Crunch,
					Move.IronDefense,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RockPolish,
					Move.FrostBreath,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Attract,
					Move.SleepTalk,
					Move.Safeguard,
					Move.RainDance,
					Move.Hail,
					Move.Facade,
					Move.RockTomb,
					Move.GyroBall,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Recover,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SkullBash,
					60,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.Superpower,
					Move.IronDefense,
					Move.IronHead,
					Move.StompingTantrum,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PowderSnow,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RapidSpin,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					65,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.IceBall,
					30,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Block,
					Move.WaterPulse,
					Move.AfterYou,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.IceFang,
					26,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.BodySlam,
					Move.Bite,
					Move.Harden,
					Move.SkullBash,
					Move.PowderSnow,
					Move.Crunch,
					Move.IronDefense,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					56,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.Hail,
					Move.Facade,
					Move.RockTomb,
					Move.GyroBall,
					Move.RockPolish,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
					Move.FrostBreath,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					46,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Recover,
					51,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SkullBash,
					60,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					22,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PowderSnow,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RapidSpin,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					65,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.IceBall,
					30,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					42,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.IceFang,
					26,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Bite,
					Move.Harden,
					Move.SkullBash,
					Move.Crunch,
					Move.IronDefense,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					56,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.Hail,
					Move.Facade,
					Move.SecretPower,
					Move.RockTomb,
					Move.GyroBall,
					Move.RockPolish,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
					Move.FrostBreath,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					46,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Strength,
					Move.Flash,
					Move.RockSmash,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Recover,
					51,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SkullBash,
					60,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					20,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.IcyWind,
					Move.Superpower,
					Move.IronDefense,
					Move.Block,
					Move.WaterPulse,
					Move.IronHead,
					Move.AfterYou,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					22,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PowderSnow,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RapidSpin,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					65,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.IceBall,
					30,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					42,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.IceFang,
					26,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Bite,
					Move.Harden,
					Move.SkullBash,
					Move.Crunch,
					Move.IronDefense,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					56,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Surf,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Strength,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Flash,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.RockSmash,
					Move.Hail,
					Move.Facade,
					Move.RockTomb,
					Move.GyroBall,
					Move.RockPolish,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.Round,
					Move.Bulldoze,
					Move.FrostBreath,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Recover,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SkullBash,
					60,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					20,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					22,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PowderSnow,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RapidSpin,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					65,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.IceBall,
					30,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					42,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.IceFang,
					26,
				),
			].flat(),
			[
				{
					ability: Ability.OwnTempo,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.IceBody,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Sturdy,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Avalugg,
					PokemonFormBits.Default,
					{
						frontDefault: 'dfaed7e7.png',
						frontShiny: 'f79c5d6b.png',
					},
					[Type.Ice],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
		[
			Variety.AvaluggHisui,
			null,
			14,
			2624,
			[Type.Ice, Type.Rock],
			{
				frontDefault: '6c7d57d2.png',
				frontShiny: '888fb08b.png',
			},
			{
				[Stat.Hp]: {baseStat: 95},
				[Stat.Attack]: {baseStat: 127},
				[Stat.Defense]: {baseStat: 184, effort: 2},
				[Stat.SpecialAttack]: {baseStat: 34},
				[Stat.SpecialDefense]: {baseStat: 36},
				[Stat.Speed]: {baseStat: 38},
			},
			{},
			[
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
					Move.PowderSnow,
					Move.RapidSpin,
					Move.WideGuard,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.DoubleEdge,
					Move.IceBeam,
					Move.Blizzard,
					Move.HyperBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Curse,
					Move.Protect,
					Move.ScaryFace,
					Move.IcyWind,
					Move.Sandstorm,
					Move.Endure,
					Move.SleepTalk,
					Move.RainDance,
					Move.Crunch,
					Move.Facade,
					Move.RockTomb,
					Move.IcicleSpear,
					Move.IronDefense,
					Move.RockBlast,
					Move.GyroBall,
					Move.GigaImpact,
					Move.Avalanche,
					Move.IceFang,
					Move.IronHead,
					Move.StoneEdge,
					Move.StealthRock,
					Move.HeavySlam,
					Move.Bulldoze,
					Move.HighHorsepower,
					Move.StompingTantrum,
					Move.BodyPress,
					Move.MeteorBeam,
					Move.TeraBlast,
					Move.IceSpinner,
					Move.Snowscape,
					Move.ChillingWater,
					Move.HardPress,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					36,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DoubleEdge,
					46,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					21,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Blizzard,
					41,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Recover,
					30,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RockSlide,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Curse,
					9,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Protect,
					15,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.IcyWind,
					12,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					33,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.IronDefense,
					27,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Avalanche,
					18,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.IceFang,
					24,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					51,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.MountainGale,
					61,
				),
			].flat(),
			[
				{
					ability: Ability.StrongJaw,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.IceBody,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Sturdy,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.AvaluggHisui,
					PokemonFormBits.Default,
					{
						frontDefault: '6c7d57d2.png',
						frontShiny: '888fb08b.png',
					},
					[Type.Ice, Type.Rock],
					VersionGroup.LegendsArceus,
					{
						[Language.Fr]: ['Séracrawl de Hisui'],
						[Language.De]: ['Hisui Arktilas'],
						[Language.En]: ['Hisuian Avalugg'],
					},
					{
						[Language.JaHrkt]: ['ヒスイのすがた'],
						[Language.Fr]: ['Forme de Hisui'],
						[Language.De]: ['Hisui-Form'],
						[Language.En]: ['Hisuian Form'],
						[Language.Ja]: ['ヒスイのすがた'],
					},
					'hisui',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Noibat,
	50,
	190,
	Color.Purple,
	[EggGroup.Flying, EggGroup.Dragon],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Wings,
	{
		[Language.JaHrkt]: ['オンバット'],
		[Language.Roomaji]: ['Onbat'],
		[Language.Ko]: ['음뱃'],
		[Language.ZhHant]: ['嗡蝠'],
		[Language.Fr]: ['Sonistrelle'],
		[Language.De]: ['eF-eM'],
		[Language.Es]: ['Noibat'],
		[Language.It]: ['Noibat'],
		[Language.En]: ['Noibat'],
		[Language.Ja]: ['オンバット'],
		[Language.ZhHans]: ['嗡蝠'],
	},
	{
		[Language.JaHrkt]: ['おんぱポケモン'],
		[Language.Ko]: ['음파포켓몬'],
		[Language.ZhHant]: ['音波寶可夢'],
		[Language.Fr]: ['Pokémon Ondes'],
		[Language.De]: ['Schallwellen-Pokémon'],
		[Language.Es]: ['Pokémon Onda Sónica'],
		[Language.It]: ['Pokémon Ondasonora'],
		[Language.En]: ['Sound Wave Pokémon'],
		[Language.Ja]: ['おんぱポケモン'],
		[Language.ZhHans]: ['音波宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'まっくらな　どうくつで　くらす。\n２０まんヘルツの　ちょうおんぱを\nおおきな　みみから　はっしゃする。',
			'２０まんヘルツの　ちょうおんぱを\nあびると　くっきょうな　レスラーも\nめが　まわり　たっていられないのだ。',
			'こうぶつは　くだもの。　ちょうおんぱを\nあてて　よく　じゅくした　ものだけを\nえらびだして　くらう　グルメなのだ。',
			'エサと　なる　くだものを　さがして\nとびまわる。　じゅくして　いるかを\nちょうおんぱで　はんべつ　できるぞ。',
			'ひが　くれると　すみかの　どうくつを\nはなれて　とびまわり　かんじゅくの\nくだものを　ちょうおんぱで　さがす。',
			'あらゆる　しゅうはすうの　おんぱを\nあやつる。　ちょうおんぱを　あびると\nきょたいの　ポケモンも　たまらない。',
		],
		[Language.Ko]: [
			'캄캄한 동굴에서 산다.\n20만Hz의 초음파를\n커다란 귀에서 발사한다.',
			'20만Hz의 초음파를 받으면\n막강한 레슬러도 현기증이 나\n서 있을 수 없다.',
			'캄캄한 동굴에서 산다.\n20만 Hz의 초음파를\n커다란 귀에서 발사한다.',
			'20만 Hz의 초음파를 받으면\n막강한 레슬러도 현기증이 나\n서 있을 수 없다.',
			'과일을 좋아한다. 초음파를\n이용해서 잘 익은 것만\n골라내 먹는 미식가다.',
			'먹이인 과일을 찾아\n날아다닌다. 익은 정도를\n초음파로 판별할 수 있다.',
			'해가 지면 둥지인 동굴을\n나와 날아다니며 잘 익은\n과일을 초음파로 찾는다.',
			'온갖 주파수의 음파를 조종한다.\n초음파를 맞으면 거대한 몸집의\n포켓몬도 견디지 못한다.',
		],
		[Language.Fr]: [
			'Il apprécie les grottes les plus sombres.\nSes grandes oreilles lui permettent de générer\ndes ultrasons d’une fréquence de 200 000 Hz.',
			'Les ultrasons à 200 000 Hz qu’il émet suffiraient\nà rendre groggy le plus chevronné des lutteurs.',
			'Il apprécie les grottes les plus sombres. Ses grandes oreilles\nlui permettent de générer des ultrasons d’une fréquence\nde 200 000 Hz.',
			'Les ultrasons à 200 000 Hz qu’il émet suffiraient à rendre\ngroggy le plus chevronné des lutteurs.',
			'Il adore les fruits et, en véritable gourmet, il ne\nmange que ceux qui sont bien mûrs. Il utilise ses\nultrasons pour déterminer le degré de maturité.',
			'Il vole à la recherche de fruits à manger.\nIl peut déterminer si un fruit est mûr ou non\ngrâce à ses ultrasons.',
			'À la tombée de la nuit, il quitte la grotte\noù il réside et s’envole à la recherche de fruits\nmûrs avec ses ultrasons.',
			'Il peut contrôler des ondes à n’importe quelle\nfréquence du spectre. Même les plus grands\nPokémon ne peuvent supporter ses ultrasons.',
		],
		[Language.De]: [
			'Es lebt im Inneren pechschwarzer Höhlen.\nSeine riesigen Ohren setzen Ultraschallwellen\nvon 200 000 Hz frei.',
			'Selbst ein gestandener Ringer geht bei den\n200 000 Hz hohen Ultraschallwellen dieses\nPokémon unweigerlich in die Knie.',
			'Es lebt im Inneren pechschwarzer Höhlen. Seine riesigen\nOhren setzen Ultraschallwellen von 200 000 Hz frei.',
			'Selbst ein gestandener Ringer geht bei den 200 000 Hz\nhohen Ultraschallwellen dieses Pokémon unweigerlich in\ndie Knie.',
			'Es liebt Obst. Als Feinschmecker sortiert es\njedoch unreife Früchte mit Ultraschallwellen aus\nund verleibt sich nur reifes Obst ein.',
			'Es sucht die Gegend im Flug nach Obst ab, das\nseine Nahrung darstellt. Mit Ultraschallwellen\nkann es genau erkennen, welches Obst reif ist.',
			'Bei Sonnenuntergang verlässt es seine Höhle und\ngeht mithilfe von Ultraschallwellen auf die Suche\nnach reifem Obst.',
			'Es kann Schallwellen verschiedenster Frequenzen\nfreisetzen. Selbst große Pokémon können seinem\nBeschuss mit Ultraschallwellen nicht standhalten.',
		],
		[Language.Es]: [
			'Habita en cuevas donde reina la más absoluta\noscuridad y emite ondas ultrasónicas de\n200 000 Hz a través de sus enormes orejas.',
			'Ni el más recio de los luchadores profesionales\nsería capaz de aguantar sus ondas ultrasónicas de\n200 000 Hz sin marearse e hincar la rodilla.',
			'Habita en cuevas donde reina la más absoluta oscuridad y\nemite ondas ultrasónicas de 200 000 Hz a través de sus\nenormes orejas.',
			'Ni el más recio de los luchadores profesionales sería capaz de\naguantar sus ondas ultrasónicas de 200 000 Hz sin marearse\ne hincar la rodilla.',
			'Le encanta la fruta, pero es tan selecto que\nemite ondas ultrasónicas para detectar cuáles\nestán maduras y el resto lo descarta.',
			'Revolotea en busca de fruta, su principal fuente\nde sustento. Con las ondas ultrasónicas que\nemite puede determinar cuáles están maduras.',
			'Al caer la noche, abandona su cueva y revolotea\nen busca de fruta madura, que localiza mediante\nondas ultrasónicas.',
			'Su registro vocal cubre todo el espectro de\nfrecuencias. Ni los Pokémon más grandes\nsoportan las ondas ultrasónicas que emite.',
		],
		[Language.It]: [
			'Vive in caverne completamente buie. Emette onde\nultrasoniche alla frequenza di 200.000 Hz dalle\ngrandi orecchie.',
			'Questo Pokémon emette ultrasuoni a 200.000 Hz\nin grado di stordire e stendere anche un lottatore\nprofessionista.',
			'Vive in caverne completamente buie. Emette onde ultrasoniche\nalla frequenza di 200.000 Hz dalle grandi orecchie.',
			'Questo Pokémon emette ultrasuoni a 200.000 Hz in grado\ndi stordire e stendere anche un lottatore professionista.',
			'Adora la frutta. Ha gusti raffinati e usa gli\nultrasuoni per individuare i frutti maturi al punto\ngiusto, ignorando gli altri.',
			'Vola alla ricerca di frutti di cui cibarsi.\nÈ in grado di determinare se sono maturi grazie\nagli ultrasuoni che emette.',
			'La sera esce dalla grotta in cui vive e vola\nin cerca di frutti maturi, che individua grazie\nagli ultrasuoni.',
			'Controlla onde sonore di qualsiasi frequenza.\nNemmeno i Pokémon più grandi riescono a\nsopportare i suoi ultrasuoni.',
		],
		[Language.En]: [
			'They live in pitch-black caves. Their enormous ears\ncan emit ultrasonic waves of 200,000 hertz.',
			'Even a robust wrestler will become\ndizzy and unable to stand when exposed\nto its 200,000-hertz ultrasonic waves.',
			'Fruits are its favorite foods. This gourmet\ncarefully picks out just the ripe ones using\nits sonar.',
			'It flies around in search of fruit to eat. It uses\nultrasonic waves to detect which fruits are ripe.',
			'After nightfall, they emerge from the caves they\nnest in during the day. Using their ultrasonic\nwaves, they go on the hunt for ripened fruit.',
			'No wavelength of sound is beyond Noibat’s\nability to produce. The ultrasonic waves it\ngenerates can overcome much larger Pokémon.',
		],
		[Language.Ja]: [
			'真っ暗な　洞窟で　暮らす。\n２０万ヘルツの　超音波を\n大きな　耳から　発射する。',
			'２０万ヘルツの　超音波を　浴びると\n屈強な　レスラーも　目が　回り\n立っていられないのだ。',
			'好物は　果物。　超音波を\nあてて　よく　熟した　ものだけを\n選び出して　食らう　グルメなのだ。',
			'エサと　なる　果物を　探して\n飛びまわる。　熟して　いるかを\n超音波で　判別　できるぞ。',
			'日が　暮れると　すみかの　洞窟を\n離れて　飛びまわり　完熟の\n果物を　超音波で　探す。',
			'あらゆる　周波数の　音波を\n操る。　超音波を　浴びると\n巨体の　ポケモンも　たまらない。',
		],
		[Language.ZhHant]: [
			'喜歡吃水果。是個美食家，\n會對水果發射超音波，\n從中挑選出成熟的果實來吃。',
			'為了尋找能當食物的水果\n而四處飛翔。能用超音波\n判斷水果是否已成熟。',
			'每到太陽下山時，\n牠便會離開居住的洞窟四處飛行，\n用超音波尋找熟透的果實。',
			'可以控制所有頻率的音波。\n就算是體型巨大的寶可夢，\n也對牠的超音波束手無策。',
		],
		[Language.ZhHans]: [
			'喜欢吃水果。会用超音波击中水果，\n然后只挑选出已成熟的来食用，\n是个美食家。',
			'寻找作为食物的水果，四处飞翔。\n能用超音波判断水果熟了没有。',
			'到了太阳落山时，\n它便会离开居住的洞窟四处飞行，\n用超音波寻找熟透的果实。',
			'可以控制所有频率的音波。\n就算是体型巨大的宝可梦，\n也对它的超音波束手无策。',
		],
	},
	[
		[
			Variety.Noibat,
			49,
			5,
			80,
			[Type.Flying, Type.Dragon],
			{
				frontDefault: 'ea319667.png',
				frontShiny: 'fc882e17.png',
			},
			{
				[Stat.Hp]: {baseStat: 40},
				[Stat.Attack]: {baseStat: 30},
				[Stat.Defense]: {baseStat: 35},
				[Stat.SpecialAttack]: {baseStat: 45},
				[Stat.SpecialDefense]: {baseStat: 40},
				[Stat.Speed]: {baseStat: 55, effort: 1},
			},
			{},
			[
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Gust,
					4,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Whirlwind,
					28,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Fly,
					Move.SolarBeam,
					Move.Psychic,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Outrage,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.AerialAce,
					Move.Tailwind,
					Move.UTurn,
					Move.DarkPulse,
					Move.XScissor,
					Move.ShadowClaw,
					Move.DracoMeteor,
					Move.Acrobatics,
					Move.WildCharge,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.AirCutter,
					Move.DragonClaw,
					Move.TeraBlast,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Supersonic,
					8,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Agility,
					Move.Swift,
					Move.Endure,
					Move.AirSlash,
					Move.Hurricane,
					Move.DualWingbeat,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Screech,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.LeechLife,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					32,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SuperFang,
					Move.Uproar,
					Move.HeatWave,
					Move.HyperVoice,
					Move.DragonPulse,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AirCutter,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					49,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.DragonRush,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Egg,
					Move.Defog,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					52,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Gust,
					4,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Whirlwind,
					28,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Fly,
					Move.SolarBeam,
					Move.Psychic,
					Move.Agility,
					Move.Screech,
					Move.Swift,
					Move.LeechLife,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Outrage,
					Move.Endure,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Uproar,
					Move.HeatWave,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.HyperVoice,
					Move.UTurn,
					Move.DarkPulse,
					Move.AirSlash,
					Move.XScissor,
					Move.DragonPulse,
					Move.ShadowClaw,
					Move.Acrobatics,
					Move.WildCharge,
					Move.Hurricane,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Absorb,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Supersonic,
					8,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Screech,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					32,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronTail,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SteelWing,
					Move.Attract,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AirCutter,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					49,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					36,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.DragonRush,
					Move.Defog,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.DracoMeteor,
					Move.DualWingbeat,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					52,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Gust,
					11,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Whirlwind,
					40,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Fly,
					Move.SolarBeam,
					Move.Psychic,
					Move.LeechLife,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.AerialAce,
					Move.UTurn,
					Move.DarkPulse,
					Move.XScissor,
					Move.ShadowClaw,
					Move.Round,
					Move.Acrobatics,
					Move.WildCharge,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Tackle,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					13,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Supersonic,
					Move.Screech,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.Roost,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					18,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.SkyAttack,
					Move.WaterPulse,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					43,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.SuperFang,
					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Uproar,
					Move.HeatWave,
					Move.Snatch,
					Move.HyperVoice,
					Move.Tailwind,
					Move.DragonPulse,
					Move.Defog,
					Move.DracoMeteor,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Outrage,
					Move.Tailwind,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Snatch,
					Move.Switcheroo,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AirCutter,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					58,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Gust,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					16,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Whirlwind,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Fly,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.LeechLife,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.AerialAce,
					Move.Roost,
					Move.UTurn,
					Move.DarkPulse,
					Move.XScissor,
					Move.ShadowClaw,
					Move.Round,
					Move.EchoedVoice,
					Move.Acrobatics,
					Move.WildCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Supersonic,
					Move.Screech,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					43,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Outrage,
					Move.Snatch,
					Move.Tailwind,
					Move.Switcheroo,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AirCutter,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					48,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					58,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Cut,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Gust,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					16,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Whirlwind,
					40,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Fly,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.SecretPower,
					Move.AerialAce,
					Move.Roost,
					Move.UTurn,
					Move.DarkPulse,
					Move.XScissor,
					Move.ShadowClaw,
					Move.Round,
					Move.EchoedVoice,
					Move.Acrobatics,
					Move.WildCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Supersonic,
					Move.Screech,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechLife,
					5,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.SkyAttack,
					Move.SuperFang,
					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Uproar,
					Move.HeatWave,
					Move.Snatch,
					Move.HyperVoice,
					Move.WaterPulse,
					Move.Tailwind,
					Move.DragonPulse,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					43,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Outrage,
					Move.Snatch,
					Move.Tailwind,
					Move.Switcheroo,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AirCutter,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					27,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					48,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					58,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					31,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Fly,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.AerialAce,
					Move.Roost,
					Move.UTurn,
					Move.DarkPulse,
					Move.XScissor,
					Move.ShadowClaw,
					Move.Round,
					Move.EchoedVoice,
					Move.Acrobatics,
					Move.WildCharge,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Gust,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Whirlwind,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Supersonic,
					Move.Screech,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechLife,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					43,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Egg,
					},

					Move.Outrage,
					Move.Snatch,
					Move.Tailwind,
					Move.Switcheroo,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AirCutter,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					48,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					58,
				),
			].flat(),
			[
				{
					ability: Ability.Frisk,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Infiltrator,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Telepathy,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Noibat,
					PokemonFormBits.Default,
					{
						frontDefault: 'ea319667.png',
						frontShiny: 'fc882e17.png',
					},
					[Type.Flying, Type.Dragon],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Noivern,
	50,
	45,
	Color.Purple,
	[EggGroup.Flying, EggGroup.Dragon],
	4,
	PokemonSpeciesBits.None,
	Generation.GenerationVI,
	20,
	GrowthRate.Medium,
	Shape.Wings,
	{
		[Language.JaHrkt]: ['オンバーン'],
		[Language.Roomaji]: ['Onvern'],
		[Language.Ko]: ['음번'],
		[Language.ZhHant]: ['音波龍'],
		[Language.Fr]: ['Bruyverne'],
		[Language.De]: ['UHaFnir'],
		[Language.Es]: ['Noivern'],
		[Language.It]: ['Noivern'],
		[Language.En]: ['Noivern'],
		[Language.Ja]: ['オンバーン'],
		[Language.ZhHans]: ['音波龙'],
	},
	{
		[Language.JaHrkt]: ['おんぱポケモン'],
		[Language.Ko]: ['음파포켓몬'],
		[Language.ZhHant]: ['音波寶可夢'],
		[Language.Fr]: ['Pokémon Ondes'],
		[Language.De]: ['Schallwellen-Pokémon'],
		[Language.Es]: ['Pokémon Onda Sónica'],
		[Language.It]: ['Pokémon Ondasonora'],
		[Language.En]: ['Sound Wave Pokémon'],
		[Language.Ja]: ['おんぱポケモン'],
		[Language.ZhHans]: ['音波宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'つきあかりすら　ない　やみよを　とび\nゆだんしている　えものを　おそう。\nくらやみの　たたかいでは　むてきだ。',
			'みみから　はっする　ちょうおんぱで\nきょだいな　いわも　ふんさいする。\nくらやみに　まぎれて　おそいかかる。',
			'らんぼうな　せいしつだが　こうぶつの\nじゅくした　くだものを　あげると\nてのひらを　かえしたように　なつく。',
			'いわも　くだく　ちょうおんぱで　めに\nはいる　もの　すべてに　こうげきを\nしかける　ちのけのおおい　ポケモン。',
			'くらやみで　なにも　できない　てきを\nねんいりに　いためつける。　ちのけが\nおおく　ざんにんな　せいしつ。',
			'くらやみを　とびながら　いわをも\nくだく　ちょうおんぱで　いためつけ\nするどい　キバで　とどめを　さす。',
		],
		[Language.Ko]: [
			'달빛조차 없는 어둠 속을 날며\n방심하고 있는 사냥감을 덮친다.\n어둠 속의 싸움에서는 무적이다.',
			'귀에서 발생하는 초음파로\n거대한 바위도 분쇄한다.\n어둠을 틈타 공격한다.',
			'성질은 난폭하지만 좋아하는\n잘 익은 과일을 주면\n언제 그랬냐는 듯이 잘 따른다.',
			'바위도 부수는 초음파로\n눈에 들어오는 모든 것에 공격을\n가하는 혈기가 왕성한 포켓몬.',
			'어두워서 아무것도 할 수 없는 상대를\n무자비하게 공격한다. 혈기왕성하고\n잔인한 성질을 가졌다.',
			'어둠 속을 날아다니며 바위도\n부수는 초음파로 타격을 입힌 뒤\n예리한 이빨로 숨통을 끊는다.',
		],
		[Language.Fr]: [
			'Les nuits sans lune, il quadrille le ciel à la recherche\nd’une proie. Dans l’obscurité, aucun Pokémon ne peut\nrivaliser avec lui.',
			'Il peut littéralement pulvériser de gros rochers\ngrâce aux ultrasons émis par ses oreilles.\nIl surgit des ténèbres pour attaquer par surprise.',
			'Il peut littéralement pulvériser de gros rochers grâce\naux ultrasons émis par ses oreilles. Il surgit des ténèbres\npour attaquer par surprise.',
			'D’ordinaire violent, il vous mange littéralement\ndans la main si vous lui donnez des fruits mûrs,\nson mets favori.',
			'Ce Pokémon sanguinaire attaque tout ce qui\nentre dans son champ de vision avec ses\nultrasons capables de pulvériser des rochers.',
			'Il n’hésite pas à anéantir ses pauvres adversaires\nqui se retrouvent sans défense dans les ténèbres.\nIl est d’une nature cruelle et impulsive.',
			'Il plane dans les ténèbres, blessant ses ennemis\nà coups d’ultrasons pouvant briser des rochers\navant de les achever de ses crocs acérés.',
		],
		[Language.De]: [
			'Es fliegt in finsterer, mondloser Nacht umher\nund macht Jagd auf achtlose Beute.\nIst bei Dunkelheit jedem Gegner überlegen.',
			'Die Ultraschallwellen aus seinen Ohren zermalmen\nFelsen zu kleinen Kieseln. Greift stets im Schutz der\nDunkelheit an.',
			'Es fliegt in finsterer, mondloser Nacht umher und macht\nJagd auf achtlose Beute. Ist bei Dunkelheit jedem Gegner\nüberlegen.',
			'Die Ultraschallwellen aus seinen Ohren zermalmen Felsen zu\nkleinen Kieseln. Greift stets im Schutz der Dunkelheit an.',
			'Es ist von Natur aus brutal. Gibt man ihm jedoch\nseine Leibspeise, reifes Obst, ist es plötzlich\nwie ausgewechselt und wird zahm.',
			'Dieses heißblütige Pokémon, das mithilfe von\nUltraschallwellen Felsen zermalmen kann, greift\nalles an, was ihm unter die Augen kommt.',
			'Ein heißblütiges und brutales Pokémon. Es fügt\nseinen in der Dunkelheit wehrlosen Gegnern\ngnadenlos Verletzungen zu.',
			'Es fliegt durch die Dunkelheit und verletzt Feinde\nmit Ultraschallwellen, die auch Felsen zermalmen\nkönnen. Dann erledigt es sie mit spitzen Zähnen.',
		],
		[Language.Es]: [
			'Surca el cielo nocturno cuando ni siquiera la luna brilla\ny ataca a presas incautas. Es imbatible en combates\nque tienen lugar a oscuras.',
			'Las ondas ultrasónicas que emite por las orejas\npueden hacer añicos incluso rocas enormes.\nAprovecha la oscuridad para desplegar su ataque.',
			'Surca el cielo nocturno cuando ni siquiera la luna brilla y ataca\na presas incautas. Es imbatible en combates que tienen lugar a\noscuras.',
			'Las ondas ultrasónicas que emite por las orejas pueden hacer\nañicos incluso rocas enormes. Aprovecha la oscuridad para\ndesplegar su ataque.',
			'Es de carácter violento, pero si se le da su\nalimento favorito, una fruta madura, su actitud\ncambia totalmente y se muestra muy dócil.',
			'De temperamento violento, ataca a todo el que\nse cruce en su camino con unas ondas\nultrasónicas capaces de partir rocas.',
			'Posee un carácter violento y cruel, por lo que no\nmuestra reparos en aprovechar la oscuridad para\natacar a enemigos indefensos.',
			'Vuela en la oscuridad atormentando al enemigo\ncon ondas ultrasónicas capaces de partir rocas\nantes de rematarlo con sus afilados colmillos.',
		],
		[Language.It]: [
			'Vola nelle notti senza luna e attacca le prede\napprofittando di ogni loro minima distrazione.\nNell’oscurità è invincibile.',
			'Grazie agli ultrasuoni che emette dalle orecchie, è in\ngrado di sbriciolare enormi massi. Attacca col favore\ndell’oscurità.',
			'Vola nelle notti senza luna e attacca le prede approfittando\ndi ogni loro minima distrazione. Nell’oscurità è invincibile.',
			'Grazie agli ultrasuoni che emette dalle orecchie, è in grado\ndi sbriciolare enormi massi. Attacca col favore dell’oscurità.',
			'È di indole aggressiva, ma se qualcuno gli\noffre i frutti maturi di cui va matto cambia\ncompletamente atteggiamento e diventa docile.',
			'È un Pokémon aggressivo che attacca tutto ciò\nche incontra sul suo cammino con ultrasuoni\ncosì potenti da frantumare anche i massi.',
			'Non esita ad attaccare i nemici che vagano\nspaesati e indifesi nelle tenebre. Ha una natura\nimpetuosa e brutale.',
			'Vola nell’oscurità ferendo gli avversari con\nultrasuoni in grado di frantumare anche i massi,\nper poi finirli con i suoi denti affilati.',
		],
		[Language.En]: [
			'They fly around on moonless nights\nand attack careless prey. Nothing can\nbeat them in a battle in the dark.',
			'The ultrasonic waves it emits from its ears\ncan reduce a large boulder to pebbles.\nIt swoops out of the dark to attack.',
			'Although it has a violent disposition, if you give\nit a nice ripe fruit that it loves, Noivern will\nsuddenly become tame.',
			'This hot-blooded Pokémon attacks anything it\nsees with ultrasonic waves that can\ncrush boulders.',
			'Aggressive and cruel, this Pokémon will ruthlessly\ntorment enemies that are helpless in the dark.',
			'Flying through the darkness, it weakens enemies\nwith ultrasonic waves that could crush stone.\nIts fangs finish the fight.',
		],
		[Language.Ja]: [
			'月明かりすら　ない　闇夜を　飛び\n油断している　獲物を　襲う。\n暗闇の　戦いでは　無敵だ。',
			'耳から　発する　超音波で\n巨大な　岩も　粉砕する。\n暗闇に　紛れて　襲いかかる。',
			'乱暴な　性質だが　好物の\n熟した　果物を　あげると\n手のひらを　返したように　懐く。',
			'岩も　砕く　超音波で　目に\n入る　もの　すべてに　攻撃を\n仕掛ける　血の気の多い　ポケモン。',
			'暗闇で　なにも　できない　敵を\n念入りに　痛めつける。　血の気が\n多く　残忍な　性質。',
			'暗闇を　飛びながら　岩をも\n砕く　超音波で　痛めつけ\n鋭い　キバで　とどめを　刺す。',
		],
		[Language.ZhHant]: [
			'性情粗暴，但如果給牠\n愛吃的成熟水果，牠就會\n改頭換面似地變得很親近人。',
			'會用連岩石都能粉碎的超音波\n朝目光所及的一切發動攻擊，\n是種性情暴躁的寶可夢。',
			'會對在黑暗中無計可施的\n對手痛加打擊。\n好勇鬥狠，性情殘忍。',
			'在黑暗中一邊飛行一邊發出\n能粉碎岩石的超音波痛擊敵人，\n然後用利齒給予致命的一擊。',
		],
		[Language.ZhHans]: [
			'性格粗暴，但如果给它\n喜爱吃的成熟水果，\n就会一反常态，变得很亲切。',
			'用岩石都能粉碎的超音波\n将目光所及之处全都攻击一番，\n是血气方刚的宝可梦。',
			'会对在黑暗中无计可施的\n对手痛加打击。\n好勇斗狠，性格残忍。',
			'在黑暗中一边飞行一边发出\n能粉碎岩石的超音波痛击敌人，\n然后用利齿给予致命的一击。',
		],
	},
	[
		[
			Variety.Noivern,
			187,
			15,
			850,
			[Type.Flying, Type.Dragon],
			{
				frontDefault: '35952d7e.png',
				frontShiny: 'bb47c5ac.png',
			},
			{
				[Stat.Hp]: {baseStat: 85},
				[Stat.Attack]: {baseStat: 70},
				[Stat.Defense]: {baseStat: 80},
				[Stat.SpecialAttack]: {baseStat: 97},
				[Stat.SpecialDefense]: {baseStat: 80},
				[Stat.Speed]: {baseStat: 123, effort: 2},
			},
			{},
			[
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Gust,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Whirlwind,
					28,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Fly,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.AerialAce,
					Move.DragonClaw,
					Move.UTurn,
					Move.DarkPulse,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.DracoMeteor,
					Move.Acrobatics,
					Move.WildCharge,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Supersonic,
					Move.Moonlight,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.DoubleEdge,
					Move.ScaryFace,
					Move.AirCutter,
					Move.DragonPulse,
					Move.DragonTail,
					Move.BreakingSwipe,
					Move.TeraBlast,
					Move.DragonCheer,
					Move.PsychicNoise,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					20,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Agility,
					Move.Swift,
					Move.Endure,
					Move.DragonDance,
					Move.AirSlash,
					Move.Hurricane,
					Move.DualWingbeat,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Screech,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.LeechLife,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					32,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SuperFang,
					Move.Outrage,
					Move.Uproar,
					Move.HeatWave,
					Move.HyperVoice,
					Move.WaterPulse,
					Move.Tailwind,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AirCutter,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					51,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					36,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					56,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Boomburst,
					62,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Gust,
					Move.Tackle,
					Move.Supersonic,
					Move.Absorb,
					Move.Moonlight,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Whirlwind,
					28,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Fly,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.Agility,
					Move.Screech,
					Move.Swift,
					Move.LeechLife,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Outrage,
					Move.Endure,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Uproar,
					Move.HeatWave,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.HyperVoice,
					Move.DragonClaw,
					Move.DragonDance,
					Move.UTurn,
					Move.DarkPulse,
					Move.AirSlash,
					Move.XScissor,
					Move.DragonPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.Acrobatics,
					Move.WildCharge,
					Move.Hurricane,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Screech,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					32,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.IronTail,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.SteelWing,
					Move.Attract,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AirCutter,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					44,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					51,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.DracoMeteor,
					Move.DualWingbeat,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					56,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Boomburst,
					62,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Gust,
					11,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Whirlwind,
					40,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Fly,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Psychic,
					Move.LeechLife,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.AerialAce,
					Move.DragonClaw,
					Move.UTurn,
					Move.DarkPulse,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.Round,
					Move.Acrobatics,
					Move.WildCharge,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Supersonic,
					Move.Absorb,
					Move.Moonlight,
					Move.DragonPulse,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.Roost,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					18,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Screech,
					Move.Hurricane,
					Move.Boomburst,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.SkyAttack,
					Move.Snatch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					43,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.SuperFang,
					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Uproar,
					Move.HeatWave,
					Move.HyperVoice,
					Move.WaterPulse,
					Move.Tailwind,
					Move.DragonPulse,
					Move.Defog,
					Move.DracoMeteor,
					Move.LaserFocus,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AirCutter,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					53,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					70,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					62,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Boomburst,
					75,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Gust,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					16,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Whirlwind,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Fly,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.LeechLife,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.AerialAce,
					Move.DragonClaw,
					Move.Roost,
					Move.UTurn,
					Move.DarkPulse,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.Round,
					Move.EchoedVoice,
					Move.Acrobatics,
					Move.WildCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Supersonic,
					Move.Absorb,
					Move.Screech,
					Move.Moonlight,
					Move.DragonPulse,
					Move.Hurricane,
					Move.Boomburst,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					13,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Absorb,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					43,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AirCutter,
					23,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					53,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					62,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Boomburst,
					75,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					31,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.HoneClaws,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Gust,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					16,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Whirlwind,
					40,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Fly,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.SecretPower,
					Move.AerialAce,
					Move.DragonClaw,
					Move.Roost,
					Move.UTurn,
					Move.DarkPulse,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.Round,
					Move.EchoedVoice,
					Move.Acrobatics,
					Move.WildCharge,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Supersonic,
					Move.Screech,
					Move.Moonlight,
					Move.DragonPulse,
					Move.Hurricane,
					Move.Boomburst,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					13,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LeechLife,
					5,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.SkyAttack,
					Move.SuperFang,
					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Uproar,
					Move.HeatWave,
					Move.Snatch,
					Move.HyperVoice,
					Move.WaterPulse,
					Move.Tailwind,
					Move.DragonPulse,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					43,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AirCutter,
					23,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					27,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					53,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					70,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					62,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Boomburst,
					75,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RazorWind,
					31,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Fly,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.Attract,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.AerialAce,
					Move.DragonClaw,
					Move.Roost,
					Move.UTurn,
					Move.DarkPulse,
					Move.XScissor,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.HoneClaws,
					Move.Round,
					Move.EchoedVoice,
					Move.Acrobatics,
					Move.WildCharge,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Gust,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WingAttack,
					16,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Whirlwind,
					40,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Supersonic,
					Move.Screech,
					Move.Moonlight,
					Move.DragonPulse,
					Move.Hurricane,
					Move.Boomburst,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bite,
					13,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Agility,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LeechLife,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SuperFang,
					43,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AirCutter,
					23,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					53,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					70,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					62,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Boomburst,
					75,
				),
			].flat(),
			[
				{
					ability: Ability.Frisk,
					isHidden: false,
					slot: 1,
				},
				{
					ability: Ability.Infiltrator,
					isHidden: false,
					slot: 2,
				},
				{
					ability: Ability.Telepathy,
					isHidden: true,
					slot: 3,
				},
			],
			[
				[
					Form.Noivern,
					PokemonFormBits.Default,
					{
						frontDefault: '35952d7e.png',
						frontShiny: 'bb47c5ac.png',
					},
					[Type.Flying, Type.Dragon],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Xerneas,
	0,
	45,
	Color.Blue,
	[EggGroup.NoEggs],
	-1,
	PokemonSpeciesBits.FormsSwitchable | PokemonSpeciesBits.Legendary,
	Generation.GenerationVI,
	120,
	GrowthRate.Slow,
	Shape.Quadruped,
	{
		[Language.JaHrkt]: ['ゼルネアス'],
		[Language.Roomaji]: ['Xerneas'],
		[Language.Ko]: ['제르네아스'],
		[Language.ZhHant]: ['哲爾尼亞斯'],
		[Language.Fr]: ['Xerneas'],
		[Language.De]: ['Xerneas'],
		[Language.Es]: ['Xerneas'],
		[Language.It]: ['Xerneas'],
		[Language.En]: ['Xerneas'],
		[Language.Ja]: ['ゼルネアス'],
		[Language.ZhHans]: ['哲尔尼亚斯'],
	},
	{
		[Language.JaHrkt]: ['せいめいポケモン'],
		[Language.Ko]: ['생명포켓몬'],
		[Language.ZhHant]: ['生命寶可夢'],
		[Language.Fr]: ['Pokémon Existence'],
		[Language.De]: ['Lebens-Pokémon'],
		[Language.Es]: ['Pokémon Creación'],
		[Language.It]: ['Pokémon Creazione'],
		[Language.En]: ['Life Pokémon'],
		[Language.Ja]: ['せいめいポケモン'],
		[Language.ZhHans]: ['生命宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'えいえんの　いのちを　わけあたえると\nいわれている。じゅもくの　すがたで\n１０００ねん　ねむり　ふっかつする。',
			'あたまの　ツノが　なないろに\nかがやくとき　えいえんの　いのちを\nわけあたえると　いわれている。',
		],
		[Language.Ko]: [
			'영원한 생명을 나누어 준다고 한다.\n수목의 모습으로 1000년 동안\n잠들고 부활한다.',
			'머리의 뿔이 일곱 빛깔로\n빛날 때 영원한 생명을\n나눠준다고 전해진다.',
		],
		[Language.Fr]: [
			'On dit que ce Pokémon immortel peut offrir ses forces\nvitales. Il a été ranimé après avoir passé 1 000 ans\nendormi sous la forme d’un arbre.',
			'D’après la légende, quand ses bois brillent de sept\ncouleurs, cela signifie qu’il prodigue la vie éternelle.',
			'D’après la légende, quand ses bois brillent de sept couleurs,\ncela signifie qu’il prodigue la vie éternelle.',
		],
		[Language.De]: [
			'Legenden nach kann dieses Pokémon ewiges\nLeben spenden. In Gestalt eines Baumes ist\nes aus seinem tausendjährigen Schlaf erwacht.',
			'Es heißt, dieses Pokémon spende ewiges Leben,\nsobald das Geweih auf seinem Haupt in sieben\nverschiedenen Farben leuchtet.',
			'Legenden nach kann dieses Pokémon ewiges Leben spenden.\nIn Gestalt eines Baumes ist es aus seinem tausendjährigen\nSchlaf erwacht.',
			'Es heißt, dieses Pokémon spende ewiges Leben, sobald das\nGeweih auf seinem Haupt in sieben verschiedenen Farben\nleuchtet.',
		],
		[Language.Es]: [
			'Según las leyendas, puede compartir el secreto de la\nvida eterna. Ha despertado tras dormir durante mil\naños bajo la apariencia de un árbol.',
			'Cuando los cuernos de su cabeza brillan en siete\ncolores, se dice que comparte el don de la vida\neterna.',
			'Según las leyendas, puede compartir el secreto de la vida\neterna. Ha despertado tras dormir durante mil años bajo la\napariencia de un árbol.',
			'Cuando los cuernos de su cabeza brillan en siete colores, se\ndice que comparte el don de la vida eterna.',
		],
		[Language.It]: [
			'Si dice che possieda l’immortalità e possa farne dono\nagli altri. Torna in vita dopo aver dormito per\n1000 anni sotto forma di albero.',
			'Si dice che possieda l’immortalità e che possa farne\ndono agli altri quando le sue corna brillano dei colori\ndell’arcobaleno.',
			'Si dice che possieda l’immortalità e possa farne dono agli altri.\nTorna in vita dopo aver dormito per 1000 anni sotto forma\ndi albero.',
			'Si dice che possieda l’immortalità e che possa farne dono agli\naltri quando le sue corna brillano dei colori dell’arcobaleno.',
		],
		[Language.En]: [
			'Legends say it can share eternal life.\nIt slept for a thousand years in the form\nof a tree before its revival.',
			'When the horns on its head shine\nin seven colors, it is said to be\nsharing everlasting life.',
		],
		[Language.Ja]: [
			'永遠の　命を　分け与えると\n言われている。樹木の　姿で\n１０００年　眠り　復活する。',
			'頭の　ツノが　七色に　輝くとき\n永遠の　命を\n分け与えると　言われている。',
		],
	},
	[
		[
			Variety.Xerneas,
			340,
			30,
			2150,
			[Type.Fairy],
			{
				frontDefault: '84a14039.png',
				frontShiny: 'fbd2485c.png',
			},
			{
				[Stat.Hp]: {baseStat: 126, effort: 3},
				[Stat.Attack]: {baseStat: 131},
				[Stat.Defense]: {baseStat: 95},
				[Stat.SpecialAttack]: {baseStat: 131},
				[Stat.SpecialDefense]: {baseStat: 98},
				[Stat.Speed]: {baseStat: 99},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Gravity,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.Swift,
					Move.Endure,
					Move.Megahorn,
					Move.CloseCombat,
					Move.DrainingKiss,
					Move.MistyTerrain,
					Move.PlayRough,
					Move.SmartStrike,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AuroraBeam,
					10,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Hail,
					Move.Facade,
					Move.CalmMind,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.GrassKnot,
					Move.Psyshock,
					Move.Round,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					5,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.Outrage,
					Move.HyperVoice,
					Move.ZenHeadbutt,
					Move.WonderRoom,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					80,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Megahorn,
					70,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.NaturePower,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Ingrain,
					45,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Aromatherapy,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.CloseCombat,
					75,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.GigaImpact,
					85,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HealPulse,
					65,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					35,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					60,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Geomancy,
					55,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.MistyExplosion,
					Move.TerrainPulse,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.TakeDown,
					Move.Ingrain,
					Move.Aromatherapy,
					Move.HealPulse,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.PsychUp,
					Move.NaturePower,
					Move.EchoedVoice,
					Move.Confide,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AuroraBeam,
					10,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.Hail,
					Move.Facade,
					Move.CalmMind,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.GrassKnot,
					Move.Psyshock,
					Move.Round,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					5,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Outrage,
					Move.HyperVoice,
					Move.ZenHeadbutt,
					Move.Defog,
					Move.WonderRoom,
					Move.LaserFocus,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					93,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Megahorn,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					59,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NaturePower,
					72,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Endeavor,
					Move.Block,
					Move.Gravity,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Gravity,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.CloseCombat,
					80,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.GigaImpact,
					88,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					63,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Geomancy,
					26,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.TakeDown,
					Move.Ingrain,
					Move.Aromatherapy,
					Move.HealPulse,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.CalmMind,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.GrassKnot,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AuroraBeam,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					93,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Megahorn,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					59,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NaturePower,
					72,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Gravity,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.CloseCombat,
					80,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					51,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.GigaImpact,
					88,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					63,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Geomancy,
					26,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Flash,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.TakeDown,
					Move.Ingrain,
					Move.Aromatherapy,
					Move.HealPulse,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.CalmMind,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.GrassKnot,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AuroraBeam,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					5,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Outrage,
					Move.Endeavor,
					Move.HyperVoice,
					Move.Block,
					Move.Gravity,
					Move.ZenHeadbutt,
					Move.WonderRoom,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					93,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Megahorn,
					44,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					59,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NaturePower,
					72,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Gravity,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.CloseCombat,
					80,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					51,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.GigaImpact,
					88,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					55,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					63,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Geomancy,
					26,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Roar,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Thunder,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Flash,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.CalmMind,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.GrassKnot,
					Move.Psyshock,
					Move.Round,
					Move.EchoedVoice,
					Move.Confide,
					Move.DazzlingGleam,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.TakeDown,
					Move.Ingrain,
					Move.Aromatherapy,
					Move.HealPulse,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AuroraBeam,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					93,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Megahorn,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PsychUp,
					59,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NaturePower,
					72,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Gravity,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.CloseCombat,
					80,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.NightSlash,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.GigaImpact,
					88,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HornLeech,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MistyTerrain,
					63,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Geomancy,
					26,
				),
			].flat(),
			[
				{
					ability: Ability.FairyAura,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.XerneasActive,
					PokemonFormBits.BattleOnly,
					{
						frontDefault: '84a14039.png',
						frontShiny: '10f31a64.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Xerneas Déchaîné'],
						[Language.De]: ['Xerneas (Aktiv)'],
						[Language.En]: ['Active Xerneas'],
					},
					{
						[Language.JaHrkt]: ['アクティブモード'],
						[Language.Ko]: ['액티브모드'],
						[Language.ZhHant]: ['活躍模式'],
						[Language.Fr]: ['Mode Déchaîné'],
						[Language.De]: ['Aktiv-Modus'],
						[Language.Es]: ['Modo Activo'],
						[Language.It]: ['Modo Attivo'],
						[Language.En]: ['Active Mode'],
						[Language.Ja]: ['アクティブモード'],
						[Language.ZhHans]: ['活跃模式'],
					},
					'active',
				],
				[
					Form.XerneasNeutral,
					PokemonFormBits.Default,
					{
						frontDefault: '84a14039.png',
						frontShiny: 'fbd2485c.png',
					},
					[Type.Fairy],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Xerneas Paisible'],
						[Language.De]: ['Xerneas (Ruhe)'],
						[Language.En]: ['Neutral Xerneas'],
					},
					{
						[Language.JaHrkt]: ['リラックスモード'],
						[Language.Ko]: ['릴랙스모드'],
						[Language.ZhHant]: ['放鬆模式'],
						[Language.Fr]: ['Mode Paisible'],
						[Language.De]: ['Ruhe-Modus'],
						[Language.Es]: ['Modo Relajado'],
						[Language.It]: ['Modo Relax'],
						[Language.En]: ['Neutral Mode'],
						[Language.Ja]: ['リラックスモード'],
						[Language.ZhHans]: ['放松模式'],
					},
					'neutral',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Yveltal,
	0,
	45,
	Color.Red,
	[EggGroup.NoEggs],
	-1,
	PokemonSpeciesBits.Legendary,
	Generation.GenerationVI,
	120,
	GrowthRate.Slow,
	Shape.Wings,
	{
		[Language.JaHrkt]: ['イベルタル'],
		[Language.Roomaji]: ['Yveltal'],
		[Language.Ko]: ['이벨타르'],
		[Language.ZhHant]: ['伊裴爾塔爾'],
		[Language.Fr]: ['Yveltal'],
		[Language.De]: ['Yveltal'],
		[Language.Es]: ['Yveltal'],
		[Language.It]: ['Yveltal'],
		[Language.En]: ['Yveltal'],
		[Language.Ja]: ['イベルタル'],
		[Language.ZhHans]: ['伊裴尔塔尔'],
	},
	{
		[Language.JaHrkt]: ['はかいポケモン'],
		[Language.Ko]: ['파괴포켓몬'],
		[Language.ZhHant]: ['破壞寶可夢'],
		[Language.Fr]: ['Pokémon Annihilation'],
		[Language.De]: ['Zerstörungs-Pokémon'],
		[Language.Es]: ['Pokémon Destrucción'],
		[Language.It]: ['Pokémon Distruzione'],
		[Language.En]: ['Destruction Pokémon'],
		[Language.Ja]: ['はかいポケモン'],
		[Language.ZhHans]: ['破坏宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'つばさと　おばねを　ひろげて　あかく\nかがやくとき　いきものの　いのちを\nすいとる　でんせつの　ポケモン。',
			'じゅみょうが　つきるとき　あらゆる\nいきものの　いのちを　すいつくし\nまゆの　すがたに　もどるという。',
		],
		[Language.Ko]: [
			'날개와 꼬리를 펼치고 빨갛게\n빛날 때 살아 있는 생명을\n빨아들이는 전설의 포켓몬.',
			'수명이 다할 때 모든\n생명의 목숨을 빨아들이고\n고치의 모습으로 돌아간다고 한다.',
		],
		[Language.Fr]: [
			'Lorsque les plumes de sa queue et de ses ailes sont\ndéployées et virent au rouge, ce Pokémon légendaire\nabsorbe l’énergie vitale de ce qui l’entoure.',
			'Quand il sent que la fin de sa vie est proche, il aspire\nla force vitale des êtres vivants et retourne à l’état\nde cocon.',
			'Quand il sent que la fin de sa vie est proche, il aspire la force\nvitale des êtres vivants et retourne à l’état de cocon.',
		],
		[Language.De]: [
			'Wenn Schwingen und Schwanzgefieder\ndieses Legendären Pokémon rot leuchten,\nentzieht es Lebewesen deren Energie.',
			'Neigt sich seine Lebensspanne dem Ende zu,\nentzieht es anderen Lebewesen deren Energie\nund verwandelt sich zurück in einen Kokon.',
			'Wenn Schwingen und Schwanzgefieder dieses Legendären\nPokémon rot leuchten, entzieht es Lebewesen deren Energie.',
			'Neigt sich seine Lebensspanne dem Ende zu, entzieht es\nanderen Lebewesen deren Energie und verwandelt sich zurück\nin einen Kokon.',
		],
		[Language.Es]: [
			'Pokémon legendario que, al extender sus alas y las\nplumas de la cola, emite un brillo carmesí que absorbe\nla energía vital de su enemigo.',
			'Cuando su vida se extingue, absorbe la vitalidad de\ntodos los seres vivos y regresa a su forma de crisálida.',
			'Pokémon legendario que, al extender sus alas y las plumas de\nla cola, emite un brillo carmesí que absorbe la energía vital de\nsu enemigo.',
			'Cuando su vida se extingue, absorbe la vitalidad de todos los\nseres vivos y regresa a su forma de crisálida.',
		],
		[Language.It]: [
			'Quando le ali e le piume della coda di questo\nPokémon leggendario sono spiegate e di colore rosso\nacceso, può assorbire l’energia degli esseri viventi.',
			'Secondo la leggenda, quando la sua lunga esistenza\ngiunge al termine, assorbe l’energia di tutti gli esseri\nviventi e si trasforma in un bozzolo.',
			'Quando le ali e le piume della coda di questo Pokémon\nleggendario sono spiegate e di colore rosso acceso,\npuò assorbire l’energia degli esseri viventi.',
			'Secondo la leggenda, quando la sua lunga esistenza giunge\nal termine, assorbe l’energia di tutti gli esseri viventi e si\ntrasforma in un bozzolo.',
		],
		[Language.En]: [
			'When this legendary Pokémon’s wings and\ntail feathers spread wide and glow red,\nit absorbs the life force of living creatures.',
			'When its life comes to an end, it absorbs\nthe life energy of every living thing\nand turns into a cocoon once more.',
		],
		[Language.Ja]: [
			'翼と　尾羽を　広げて　赤く　輝くとき\n生き物の　命を　吸い取る\n伝説の　ポケモン。',
			'寿命が　つきるとき　あらゆる\n生き物の　命を　吸いつくし\n繭の　姿に　戻るという。',
		],
	},
	[
		[
			Variety.Yveltal,
			340,
			58,
			2030,
			[Type.Dark, Type.Flying],
			{
				frontDefault: '3868dc8d.png',
				frontShiny: '3726cc7c.png',
			},
			{
				[Stat.Hp]: {baseStat: 126, effort: 3},
				[Stat.Attack]: {baseStat: 131},
				[Stat.Defense]: {baseStat: 95},
				[Stat.SpecialAttack]: {baseStat: 131},
				[Stat.SpecialDefense]: {baseStat: 98},
				[Stat.Speed]: {baseStat: 99},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Gust,
					Move.DoubleTeam,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Fly,
					Move.HyperBeam,
					Move.Psychic,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SteelWing,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.Taunt,
					Move.DragonClaw,
					Move.UTurn,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.Round,
					Move.Acrobatics,
					Move.Snarl,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.Swift,
					Move.Endure,
					Move.Payback,
					Move.AirSlash,
					Move.Hurricane,
					Move.PhantomForce,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Disable,
					15,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HyperBeam,
					85,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					45,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SkyAttack,
					80,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.HeatWave,
					Move.HyperVoice,
					Move.ZenHeadbutt,
					Move.FoulPlay,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Taunt,
					5,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Roost,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Tailwind,
					25,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					20,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DarkPulse,
					40,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					35,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonRush,
					65,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FocusBlast,
					75,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					60,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Hurricane,
					70,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Snarl,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					55,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.OblivionWing,
					50,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.LashOut,
					Move.DualWingbeat,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.RazorWind,
					Move.Taunt,
					Move.Roost,
					Move.Hurricane,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Fly,
					Move.HyperBeam,
					Move.Psychic,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SteelWing,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Facade,
					Move.Taunt,
					Move.DragonClaw,
					Move.UTurn,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.Round,
					Move.Acrobatics,
					Move.Snarl,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Disable,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HyperBeam,
					88,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Torment,
					Move.AerialAce,
					Move.Roost,
					Move.Embargo,
					Move.SkyDrop,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					59,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SkyAttack,
					93,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.SkyAttack,
					Move.KnockOff,
					Move.Block,
					Move.Tailwind,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HeatWave,
					Move.HyperVoice,
					Move.ZenHeadbutt,
					Move.Defog,
					Move.FoulPlay,
					Move.LaserFocus,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					80,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DarkPulse,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonRush,
					63,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FocusBlast,
					72,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Snarl,
					18,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.OblivionWing,
					26,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.RazorWind,
					Move.Taunt,
					Move.Roost,
					Move.Hurricane,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Fly,
					Move.HyperBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.AerialAce,
					Move.DragonClaw,
					Move.Roost,
					Move.UTurn,
					Move.Embargo,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.Round,
					Move.SkyDrop,
					Move.Acrobatics,
					Move.Snarl,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Disable,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HyperBeam,
					88,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					59,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SkyAttack,
					93,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					80,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DarkPulse,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonRush,
					63,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FocusBlast,
					72,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					51,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Snarl,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.OblivionWing,
					26,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.RazorWind,
					Move.Taunt,
					Move.Roost,
					Move.Hurricane,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.HoneClaws,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Fly,
					Move.HyperBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.SecretPower,
					Move.AerialAce,
					Move.DragonClaw,
					Move.Roost,
					Move.UTurn,
					Move.Embargo,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.Round,
					Move.SkyDrop,
					Move.Acrobatics,
					Move.Snarl,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Disable,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HyperBeam,
					88,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					59,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SkyAttack,
					93,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.SkyAttack,
					Move.Snore,
					Move.HeatWave,
					Move.KnockOff,
					Move.HyperVoice,
					Move.Block,
					Move.Tailwind,
					Move.ZenHeadbutt,
					Move.FoulPlay,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					80,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DarkPulse,
					44,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonRush,
					63,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FocusBlast,
					72,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					51,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Snarl,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					55,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.OblivionWing,
					26,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.RazorWind,
					Move.Taunt,
					Move.Roost,
					Move.Hurricane,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Fly,
					Move.HyperBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SteelWing,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.AerialAce,
					Move.DragonClaw,
					Move.Roost,
					Move.UTurn,
					Move.Embargo,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.ShadowClaw,
					Move.HoneClaws,
					Move.Round,
					Move.SkyDrop,
					Move.Acrobatics,
					Move.Snarl,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Disable,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HyperBeam,
					88,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					59,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DoubleTeam,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SkyAttack,
					93,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SuckerPunch,
					80,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DarkPulse,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AirSlash,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonRush,
					63,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FocusBlast,
					72,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FoulPlay,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Snarl,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.OblivionWing,
					26,
				),
			].flat(),
			[
				{
					ability: Ability.DarkAura,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.Yveltal,
					PokemonFormBits.Default,
					{
						frontDefault: '3868dc8d.png',
						frontShiny: '3726cc7c.png',
					},
					[Type.Dark, Type.Flying],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Zygarde,
	0,
	3,
	Color.Green,
	[EggGroup.NoEggs],
	-1,
	PokemonSpeciesBits.Legendary,
	Generation.GenerationVI,
	120,
	GrowthRate.Slow,
	Shape.Squiggle,
	{
		[Language.JaHrkt]: ['ジガルデ'],
		[Language.Roomaji]: ['Zygarde'],
		[Language.Ko]: ['지가르데'],
		[Language.ZhHant]: ['基格爾德'],
		[Language.Fr]: ['Zygarde'],
		[Language.De]: ['Zygarde'],
		[Language.Es]: ['Zygarde'],
		[Language.It]: ['Zygarde'],
		[Language.En]: ['Zygarde'],
		[Language.Ja]: ['ジガルデ'],
		[Language.ZhHans]: ['基格尔德'],
	},
	{
		[Language.JaHrkt]: ['ちつじょポケモン'],
		[Language.Ko]: ['질서포켓몬'],
		[Language.ZhHant]: ['秩序寶可夢'],
		[Language.Fr]: ['Pokémon Équilibre'],
		[Language.De]: ['Ordnungs-Pokémon'],
		[Language.Es]: ['Pokémon Equilibrio'],
		[Language.It]: ['Pokémon Equilibrio'],
		[Language.En]: ['Order Pokémon'],
		[Language.Ja]: ['ちつじょポケモン'],
		[Language.ZhHans]: ['秩序宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'カロスちほうの　せいたいけいが\nくずれると　すがたを　あらわして\nひめた　ちからを　はっきするらしい。',
			'どうくつの　おくふかくで　くらし\nせいたいけいを　はかいする　ものを\nかんししていると　いわれている。',
			'セルが　５０％　あつまった　すがた。\nてきたい　するものは　いっさいの\nてかげんなく　しょうめつ　させる。',
			'せいたいけいを　かんし　していると\nかんがえられている。　さらなる\nちからを　ひめているとの　ウワサ。',
			'ジガルデの　いちぶが　はんぶんほど\nあつまった　すがた。　せいたいけいを\nかんしする　やくめを　もっている。',
			'せいたいけいを　おびやかす　ものと\nたたかうとき　さらに　きょうりょくな\nすがたに　へんかすると　いわれる。',
		],
		[Language.Ko]: [
			'칼로스지방의 생태계가\n무너지면 모습을 나타내어\n숨겨진 힘을 발휘한다고 한다.',
			'동굴 깊은 곳에서 지내면서\n생태계를 파괴하는 자를\n감시하고 있다고 전해진다.',
			'셀이 50% 모인 모습이다.\n적대하는 자는 일절\n봐주지 않고 소멸시킨다.',
			'생태계를 감시하고 있다고\n여겨지고 있다. 더 큰\n힘을 숨기고 있다는 소문이다.',
			'지가르데의 일부가 반 정도\n모인 모습이다. 생태계를\n감시하는 역할을 맡고 있다.',
			'생태계를 위협하는 자와\n싸울 때 더욱 강력한 모습으로\n변화한다고 전해진다.',
		],
		[Language.Fr]: [
			'Lorsque l’écosystème de Kalos est menacé,\nce Pokémon apparaît et utilise son mystérieux pouvoir.',
			'Il paraît qu’il vit au fond d’une grotte, d’où il\nsurveillerait les personnes qui détruisent l’écosystème.',
			'Lorsque l’écosystème de Kalos est menacé, ce Pokémon\napparaît et utilise son mystérieux pouvoir.',
			'Il paraît qu’il vit au fond d’une grotte, d’où il surveillerait\nles personnes qui détruisent l’écosystème.',
			'La forme que Zygarde prend lorsqu’il rassemble\n50 % de ses Cellules. Il désintègre sans merci\ntout ennemi qui ose s’opposer à lui.',
			'Ce Pokémon surveille l’équilibre de l’écosystème\nen permanence. Si l’on en croit la rumeur, il aurait\nun grand pouvoir caché...',
			'La forme que Zygarde prend lorsqu’il rassemble\n50 % de ses Cellules. Sa mission est de\nsurveiller l’écosystème.',
			'Ce Pokémon serait capable de prendre\nune forme encore plus puissante quand il se bat\ncontre un ennemi qui menace l’écosystème.',
		],
		[Language.De]: [
			'Wenn das Ökosystem der Kalos-Region kippt,\nerscheint dieses Pokémon und offenbart seine\ngeheimen Kräfte.',
			'Es wird gemutmaßt, dass es von seiner Höhle aus\nall jene beobachtet, die dem Ökosystem Schaden\nzufügen.',
			'Wenn das Ökosystem der Kalos-Region kippt, erscheint dieses\nPokémon und offenbart seine geheimen Kräfte.',
			'Es wird gemutmaßt, dass es von seiner Höhle aus all jene\nbeobachtet, die dem Ökosystem Schaden zufügen.',
			'Diese Form vereint 50 % der Zellen in sich.\nWer diesem Pokémon Widerstand leistet,\nwird ohne Gnade ausgelöscht.',
			'Man nimmt an, dass es das Ökosystem\nbeobachtet und über geheime Kräfte verfügt.',
			'In dieser Form vereint Zygarde 50 % seiner\nZellen in sich. Seine Aufgabe besteht darin,\ndas Ökosystem zu überwachen.',
			'Im Kampf gegen all jene, die das Ökosystem in\nGefahr bringen, nimmt es angeblich eine noch\nmächtigere Form an.',
		],
		[Language.Es]: [
			'Cuando el ecosistema de Kalos se encuentra en\npeligro, aparece y revela su poder secreto.',
			'Vive en las profundidades de las cavernas, desde\ndonde vigila a todos aquellos que se dediquen a\ndestruir el ecosistema.',
			'Cuando el ecosistema de Kalos se encuentra en peligro,\naparece y revela su poder secreto.',
			'Vive en las profundidades de las cavernas, desde donde vigila\na todos aquellos que se dediquen a destruir el ecosistema.',
			'La forma que adopta Zygarde al reunir el\n50% de sus células. Quienes se le oponen son\naniquilados sin la menor vacilación.',
			'Se cree que este Pokémon vela por el equilibrio\ndel ecosistema. Se rumorea que en su interior\nyace un poder que va más allá de la imaginación.',
			'Esta es la forma que adopta Zygarde al reunir el\n50% de sus células. Su cometido consiste en\nvigilar el ecosistema.',
			'Según los rumores, puede adoptar una forma\naún más poderosa cuando se enfrenta a\nquienquiera que amenace el ecosistema.',
		],
		[Language.It]: [
			'Secondo le leggende, quando l’equilibrio\ndell’ecosistema della regione di Kalos è in pericolo,\nappare e libera il suo potere misterioso.',
			'Si dice che viva nelle profondità di una caverna e\nprotegga l’equilibrio dell’ecosistema da qualsiasi\nminaccia.',
			'Secondo le leggende, quando l’equilibrio dell’ecosistema\ndella regione di Kalos è in pericolo, appare e libera il suo\npotere misterioso.',
			'Si dice che viva nelle profondità di una caverna e protegga\nl’equilibrio dell’ecosistema da qualsiasi minaccia.',
			'Quando il 50% delle sue cellule si aggrega,\nassume questa forma.\nAnnienta senza pietà chiunque gli si opponga.',
			'Si ritiene che vigili sull’equilibrio dell’ecosistema.\nCorre voce che nasconda in sé un potere\npiù grande di quanto si possa immaginare.',
			'Zygarde assume questa forma quando vengono\naggregate metà delle sue cellule. Questo\nPokémon presiede all’equilibrio dell’ecosistema.',
			'Si dice che possa assumere una forma ancora\npiù potente quando si trova di fronte un nemico\nche rappresenta una minaccia per l’ecosistema.',
		],
		[Language.En]: [
			'When the Kalos region’s ecosystem falls into\ndisarray, it appears and reveals its secret power.',
			'It’s hypothesized that it’s monitoring\nthose who destroy the ecosystem\nfrom deep in the cave where it lives.',
			'This is Zygarde’s form when it has gathered\n50% of its cells. It wipes out all those who\noppose it, showing not a shred of mercy.',
			'It’s thought to be monitoring the ecosystem.\nThere are rumors that even greater power lies\nhidden within it.',
			'This is Zygarde’s form when about half of its\npieces have been assembled. It plays the role of\nmonitoring the ecosystem.',
			'Some say it can change to an even more\npowerful form when battling those who threaten\nthe ecosystem.',
		],
		[Language.Ja]: [
			'カロス地方の　生態系が　崩れると\n姿を　現して\n秘めた　力を　発揮するらしい。',
			'洞窟の　奥深くで　暮らし\n生態系を　破壊する者を\n監視していると　言われている。',
			'セルが　５０％　集まった　姿。\n敵対　する者は　一切の\n手加減なく　消滅　させる。',
			'生態系を　監視　していると\n考えられている。　さらなる\n力を　秘めているとの　ウワサ。',
			'ジガルデの　一部が　半分ほど\n集まった　姿。　生態系を\n監視する　役目を　持っている。',
			'生態系を　脅かす　ものと\n戦うとき　更に　強力な\n姿に　変化すると　いわれる。',
		],
		[Language.ZhHant]: [
			'細胞聚集了５０％的樣子。\n會毫不留情地把敵對者全部消滅。',
			'被認為監視著生態系統。\n有傳言說牠蘊藏著更為強大的力量。',
			'構成基格爾德的單位\n聚集了大約一半時的樣子。\n有著監視生態系統的責任。',
			'據說當牠與威脅到\n生態系統的對手戰鬥時，\n會變化成更強大的樣子。',
		],
		[Language.ZhHans]: [
			'细胞聚集了５０％的样子。\n会毫不留情地把敌对者全部消灭。',
			'被认为监视着生态系统。\n有传言，它蕴藏着更为强大的力量。',
			'基格尔德的一部分\n大约聚集了一半的样子。\n有着监视生态系统的职责。',
			'据说，在与威胁到生态系统者战斗时，\n它会变化为更强大的样子。',
		],
	},
	[
		[
			Variety.Zygarde50,
			300,
			50,
			3050,
			[Type.Dragon, Type.Ground],
			{
				frontDefault: 'b39cf81e.png',
				frontShiny: 'b6fe2162.png',
			},
			{
				[Stat.Hp]: {baseStat: 108, effort: 3},
				[Stat.Attack]: {baseStat: 100},
				[Stat.Defense]: {baseStat: 121},
				[Stat.SpecialAttack]: {baseStat: 81},
				[Stat.SpecialDefense]: {baseStat: 95},
				[Stat.Speed]: {baseStat: 95},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bind,
					Move.ThousandArrows,
					Move.ThousandWaves,
					Move.CoreEnforcer,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.Swift,
					Move.Reversal,
					Move.Endure,
					Move.Crunch,
					Move.Payback,
					Move.Retaliate,
					Move.HighHorsepower,
					Move.BreakingSwipe,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					80,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					8,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Glare,
					56,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					88,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					64,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					32,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.DragonDance,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					72,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					48,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ScaleShot,
					Move.SkitterSmack,
					Move.ScorchingSands,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bind,
					18,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Bind,
					Move.Spite,
					Move.PainSplit,
					Move.Block,
					Move.ShockWave,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					10,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Glare,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.DracoMeteor,
					Move.StompingTantrum,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					80,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					51,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_ZygardeCube,
					},

					Move.ExtremeSpeed,
					Move.ThousandArrows,
					Move.ThousandWaves,
					Move.CoreEnforcer,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					59,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_ZygardeCube,
					Move.DragonDance,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					63,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					72,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bind,
					18,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.Glare,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					80,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					51,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_ZygardeCube,
					},

					Move.ExtremeSpeed,
					Move.DragonDance,
					Move.ThousandArrows,
					Move.ThousandWaves,
					Move.CoreEnforcer,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					59,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					63,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					72,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					26,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Bind,
					18,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Bind,
					Move.Snore,
					Move.Spite,
					Move.Outrage,
					Move.PainSplit,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.Block,
					Move.ShockWave,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.DracoMeteor,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.Glare,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.SecretPower,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Strength,
					Move.RockSmash,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					55,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					93,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ExtremeSpeed,
					88,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					59,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonDance,
					72,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					63,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					80,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					26,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Bind,
					18,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.Glare,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Strength,
					Move.Earthquake,
					Move.Dig,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.RockSmash,
					Move.Facade,
					Move.BrickBreak,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					44,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					93,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					51,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ExtremeSpeed,
					88,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					59,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonDance,
					72,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					63,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					80,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					26,
				),
			].flat(),
			[
				{
					ability: Ability.AuraBreak,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.Zygarde50,
					PokemonFormBits.Default,
					{
						frontDefault: 'b39cf81e.png',
						frontShiny: 'b6fe2162.png',
					},
					[Type.Dragon, Type.Ground],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Zygarde Forme 50 %'],
						[Language.De]: ['Zygarde (50%)'],
					},
					{
						[Language.JaHrkt]: ['５０％フォルム'],
						[Language.Ko]: ['50%폼'],
						[Language.ZhHant]: ['５０％形態'],
						[Language.Fr]: ['Forme 50 %'],
						[Language.De]: ['50%-Form'],
						[Language.Es]: ['Forma 50%'],
						[Language.It]: ['Forma 50%'],
						[Language.En]: ['50% Forme'],
						[Language.Ja]: ['５０％フォルム'],
						[Language.ZhHans]: ['５０％形态'],
					},
					'50',
				],
			],
		],
		[
			Variety.Zygarde10PowerConstruct,
			243,
			12,
			335,
			[Type.Dragon, Type.Ground],
			{
				frontDefault: '273f17b2.png',
				frontShiny: 'f358b248.png',
				backDefault: 'f15a65bd.png',
				backShiny: 'eaaa6279.png',
			},
			{
				[Stat.Hp]: {baseStat: 54, effort: 3},
				[Stat.Attack]: {baseStat: 100},
				[Stat.Defense]: {baseStat: 71},
				[Stat.SpecialAttack]: {baseStat: 61},
				[Stat.SpecialDefense]: {baseStat: 85},
				[Stat.Speed]: {baseStat: 115},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bind,
					Move.ThousandArrows,
					Move.ThousandWaves,
					Move.CoreEnforcer,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.Dig,
					Move.Swift,
					Move.Reversal,
					Move.Endure,
					Move.Crunch,
					Move.Payback,
					Move.Retaliate,
					Move.HighHorsepower,
					Move.BreakingSwipe,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.DragonDance,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					80,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					8,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Glare,
					56,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.StompingTantrum,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					88,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					64,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					72,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ScaleShot,
					Move.SkitterSmack,
					Move.ScorchingSands,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bind,
					18,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Bind,
					Move.Snore,
					Move.Spite,
					Move.Outrage,
					Move.PainSplit,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.Block,
					Move.ShockWave,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.DracoMeteor,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					10,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Glare,
					1,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					80,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					51,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_ZygardeCube,
					},

					Move.ExtremeSpeed,
					Move.ThousandArrows,
					Move.ThousandWaves,
					Move.CoreEnforcer,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					59,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_ZygardeCube,
					Move.DragonDance,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					63,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					72,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bind,
					18,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.Glare,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					80,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					51,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_ZygardeCube,
					},

					Move.ExtremeSpeed,
					Move.DragonDance,
					Move.ThousandArrows,
					Move.ThousandWaves,
					Move.CoreEnforcer,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					59,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					63,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					72,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					26,
				),
			].flat(),
			[
				{
					ability: Ability.PowerConstruct,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.Zygarde10PowerConstruct,
					PokemonFormBits.Default,
					{
						frontDefault: '273f17b2.png',
						frontShiny: 'f358b248.png',
						backDefault: 'f15a65bd.png',
						backShiny: 'eaaa6279.png',
					},
					[Type.Dragon, Type.Ground],
					VersionGroup.SunMoon,
					{
						[Language.Fr]: ['Zygarde Forme 10 %'],
						[Language.De]: ['Zygarde (10%)'],
						[Language.En]: ['10% Zygarde'],
					},
					{
						[Language.JaHrkt]: ['１０％フォルム'],
						[Language.Ko]: ['10%폼'],
						[Language.ZhHant]: ['１０％形態'],
						[Language.Fr]: ['Forme 10 %'],
						[Language.De]: ['10%-Form'],
						[Language.Es]: ['Forma 10%'],
						[Language.It]: ['Forma 10%'],
						[Language.En]: ['10% Forme'],
						[Language.Ja]: ['１０％フォルム'],
						[Language.ZhHans]: ['１０％形态'],
					},
					'10-power-construct',
				],
			],
		],
		[
			Variety.Zygarde50PowerConstruct,
			300,
			50,
			3050,
			[Type.Dragon, Type.Ground],
			{
				frontDefault: '2b6e0692.png',
				frontShiny: 'e5c977a1.png',
				backDefault: 'fe7d3951.png',
				backShiny: '2967b486.png',
			},
			{
				[Stat.Hp]: {baseStat: 108, effort: 3},
				[Stat.Attack]: {baseStat: 100},
				[Stat.Defense]: {baseStat: 121},
				[Stat.SpecialAttack]: {baseStat: 81},
				[Stat.SpecialDefense]: {baseStat: 95},
				[Stat.Speed]: {baseStat: 95},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bind,
					Move.ThousandArrows,
					Move.ThousandWaves,
					Move.CoreEnforcer,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.Dig,
					Move.Swift,
					Move.Reversal,
					Move.Endure,
					Move.Crunch,
					Move.Payback,
					Move.Retaliate,
					Move.HighHorsepower,
					Move.BreakingSwipe,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.DragonDance,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					80,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					8,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Glare,
					56,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.StompingTantrum,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					88,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					64,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					72,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ScaleShot,
					Move.SkitterSmack,
					Move.ScorchingSands,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bind,
					18,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Bind,
					Move.Snore,
					Move.Spite,
					Move.Outrage,
					Move.PainSplit,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.Block,
					Move.ShockWave,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.DracoMeteor,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					10,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Glare,
					1,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					80,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					51,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_ZygardeCube,
					},

					Move.ExtremeSpeed,
					Move.ThousandArrows,
					Move.ThousandWaves,
					Move.CoreEnforcer,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					59,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_ZygardeCube,
					Move.DragonDance,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					63,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					72,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bind,
					18,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.Glare,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					80,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					51,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_ZygardeCube,
					},

					Move.ExtremeSpeed,
					Move.DragonDance,
					Move.ThousandArrows,
					Move.ThousandWaves,
					Move.CoreEnforcer,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					59,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					63,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					72,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					26,
				),
			].flat(),
			[
				{
					ability: Ability.PowerConstruct,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.Zygarde50PowerConstruct,
					PokemonFormBits.Default,
					{
						frontDefault: '2b6e0692.png',
						frontShiny: 'e5c977a1.png',
						backDefault: 'fe7d3951.png',
						backShiny: '2967b486.png',
					},
					[Type.Dragon, Type.Ground],
					VersionGroup.SunMoon,
					{
						[Language.Fr]: ['Zygarde Forme 50 %'],
						[Language.De]: ['Zygarde (50%)'],
						[Language.En]: ['50% Zygarde'],
					},
					{
						[Language.JaHrkt]: ['５０％フォルム'],
						[Language.Ko]: ['50%폼'],
						[Language.ZhHant]: ['５０％形態'],
						[Language.Fr]: ['Forme 50 %'],
						[Language.De]: ['50%-Form'],
						[Language.Es]: ['Forma 50%'],
						[Language.It]: ['Forma 50%'],
						[Language.En]: ['50% Forme'],
						[Language.Ja]: ['５０％フォルム'],
						[Language.ZhHans]: ['５０％形态'],
					},
					'50-power-construct',
				],
			],
		],
		[
			Variety.ZygardeComplete,
			354,
			45,
			6100,
			[Type.Dragon, Type.Ground],
			{
				frontDefault: '9bf2a380.png',
				frontShiny: 'a5977ce9.png',
				backDefault: '416ee7ac.png',
				backShiny: '1c5a9f84.png',
			},
			{
				[Stat.Hp]: {baseStat: 216, effort: 3},
				[Stat.Attack]: {baseStat: 100},
				[Stat.Defense]: {baseStat: 121},
				[Stat.SpecialAttack]: {baseStat: 91},
				[Stat.SpecialDefense]: {baseStat: 95},
				[Stat.Speed]: {baseStat: 85},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bind,
					Move.ThousandArrows,
					Move.ThousandWaves,
					Move.CoreEnforcer,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.Dig,
					Move.Swift,
					Move.Reversal,
					Move.Endure,
					Move.Crunch,
					Move.Payback,
					Move.Retaliate,
					Move.HighHorsepower,
					Move.BreakingSwipe,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.DragonDance,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					80,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					8,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Glare,
					56,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.StompingTantrum,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					88,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					64,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					72,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ScaleShot,
					Move.SkitterSmack,
					Move.ScorchingSands,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bind,
					18,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Bind,
					Move.Snore,
					Move.Spite,
					Move.Outrage,
					Move.PainSplit,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.Block,
					Move.ShockWave,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.DracoMeteor,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					10,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Glare,
					1,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					80,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					51,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_ZygardeCube,
					},

					Move.ExtremeSpeed,
					Move.ThousandArrows,
					Move.ThousandWaves,
					Move.CoreEnforcer,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					59,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_ZygardeCube,
					Move.DragonDance,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					63,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					72,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bind,
					18,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.Glare,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					80,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					51,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_ZygardeCube,
					},

					Move.ExtremeSpeed,
					Move.DragonDance,
					Move.ThousandArrows,
					Move.ThousandWaves,
					Move.CoreEnforcer,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					59,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					63,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					72,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					26,
				),
			].flat(),
			[
				{
					ability: Ability.PowerConstruct,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.ZygardeComplete,
					PokemonFormBits.BattleOnly | PokemonFormBits.Default,
					{
						frontDefault: '9bf2a380.png',
						frontShiny: 'a5977ce9.png',
						backDefault: '416ee7ac.png',
						backShiny: '1c5a9f84.png',
					},
					[Type.Dragon, Type.Ground],
					VersionGroup.SunMoon,
					{
						[Language.Fr]: ['Zygarde Forme Parfaite'],
						[Language.De]: ['Zygarde (Optimum)'],
						[Language.En]: ['Complete Zygarde'],
					},
					{
						[Language.JaHrkt]: ['パーフェクトフォルム'],
						[Language.Ko]: ['퍼펙트폼'],
						[Language.ZhHant]: ['完全體形態'],
						[Language.Fr]: ['Forme Parfaite'],
						[Language.De]: ['Optimumform'],
						[Language.Es]: ['Forma Completa'],
						[Language.It]: ['Forma Perfetta'],
						[Language.En]: ['Complete Forme'],
						[Language.Ja]: ['パーフェクトフォルム'],
						[Language.ZhHans]: ['完全体形态'],
					},
					'complete',
				],
			],
		],
		[
			Variety.Zygarde10,
			243,
			12,
			335,
			[Type.Dragon, Type.Ground],
			{
				frontShiny: '57250ba0.png',
			},
			{
				[Stat.Hp]: {baseStat: 54, effort: 3},
				[Stat.Attack]: {baseStat: 100},
				[Stat.Defense]: {baseStat: 71},
				[Stat.SpecialAttack]: {baseStat: 61},
				[Stat.SpecialDefense]: {baseStat: 85},
				[Stat.Speed]: {baseStat: 115},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bind,
					Move.ThousandArrows,
					Move.ThousandWaves,
					Move.CoreEnforcer,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.Dig,
					Move.Swift,
					Move.Reversal,
					Move.Endure,
					Move.Crunch,
					Move.Payback,
					Move.Retaliate,
					Move.HighHorsepower,
					Move.BreakingSwipe,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.DragonDance,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					80,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					16,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					8,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Glare,
					56,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.Outrage,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.StompingTantrum,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					88,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					64,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					32,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					72,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					48,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.ScaleShot,
					Move.SkitterSmack,
					Move.ScorchingSands,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Bind,
					18,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Bind,
					Move.Snore,
					Move.Spite,
					Move.Outrage,
					Move.PainSplit,
					Move.IronTail,
					Move.Superpower,
					Move.HyperVoice,
					Move.Block,
					Move.ShockWave,
					Move.DragonPulse,
					Move.EarthPower,
					Move.ZenHeadbutt,
					Move.DracoMeteor,
					Move.StompingTantrum,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					10,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Glare,
					1,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					80,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					51,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SunMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_ZygardeCube,
					},

					Move.ExtremeSpeed,
					Move.ThousandArrows,
					Move.ThousandWaves,
					Move.CoreEnforcer,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					59,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_ZygardeCube,
					Move.DragonDance,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					63,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					72,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					26,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Bind,
					18,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Bite,
					Move.Glare,
					Move.DragonBreath,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.Facade,
					Move.BrickBreak,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.StoneEdge,
					Move.GrassKnot,
					Move.SludgeWave,
					Move.Round,
					Move.Bulldoze,
					Move.DragonTail,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Earthquake,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Dig,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					44,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Outrage,
					80,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Sandstorm,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Crunch,
					51,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_ZygardeCube,
					},

					Move.ExtremeSpeed,
					Move.DragonDance,
					Move.ThousandArrows,
					Move.ThousandWaves,
					Move.CoreEnforcer,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Camouflage,
					59,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DragonPulse,
					63,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_Tutor,
					Move.DracoMeteor,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Coil,
					72,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LandsWrath,
					26,
				),
			].flat(),
			[
				{
					ability: Ability.AuraBreak,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.Zygarde10,
					PokemonFormBits.Default,
					{
						frontShiny: '57250ba0.png',
					},
					[Type.Dragon, Type.Ground],
					VersionGroup.SunMoon,
					{
						[Language.Fr]: ['Zygarde Forme 10 %'],
						[Language.De]: ['Zygarde (10%)'],
						[Language.En]: ['10% Zygarde'],
					},
					{
						[Language.JaHrkt]: ['１０％フォルム'],
						[Language.Ko]: ['10%폼'],
						[Language.ZhHant]: ['１０％形態'],
						[Language.Fr]: ['Forme 10 %'],
						[Language.De]: ['10%-Form'],
						[Language.Es]: ['Forma 10%'],
						[Language.It]: ['Forma 10%'],
						[Language.En]: ['10% Forme'],
						[Language.Ja]: ['１０％フォルム'],
						[Language.ZhHans]: ['１０％形态'],
					},
					'10',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Diancie,
	50,
	3,
	Color.Pink,
	[EggGroup.NoEggs],
	-1,
	PokemonSpeciesBits.FormsSwitchable | PokemonSpeciesBits.Mythical,
	Generation.GenerationVI,
	25,
	GrowthRate.Slow,
	Shape.Arms,
	{
		[Language.JaHrkt]: ['ディアンシー'],
		[Language.Roomaji]: ['Diancie'],
		[Language.Ko]: ['디안시'],
		[Language.ZhHant]: ['蒂安希'],
		[Language.Fr]: ['Diancie'],
		[Language.De]: ['Diancie'],
		[Language.Es]: ['Diancie'],
		[Language.It]: ['Diancie'],
		[Language.En]: ['Diancie'],
		[Language.Ja]: ['ディアンシー'],
		[Language.ZhHans]: ['蒂安希'],
	},
	{
		[Language.JaHrkt]: ['ほうせきポケモン'],
		[Language.Ko]: ['보석포켓몬'],
		[Language.ZhHant]: ['寶石寶可夢'],
		[Language.Fr]: ['Pokémon Joyau'],
		[Language.De]: ['Edelstein-Pokémon'],
		[Language.Es]: ['Pokémon Joya'],
		[Language.It]: ['Pokémon Gemma'],
		[Language.En]: ['Jewel Pokémon'],
		[Language.Ja]: ['ほうせきポケモン'],
		[Language.ZhHans]: ['宝石宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'メレシーの　とつぜんへんい。\nピンクいろに　かがやく　からだは\nせかいいち　うつくしいと　いわれる。',
			'りょうての　すきまで　くうきちゅうの\nたんそを　あっしゅくして　たくさんの\nダイヤを　いっしゅんで　うみだす。',
		],
		[Language.Ko]: [
			'멜리시의 돌연변이다.\n분홍빛으로 빛나는 몸은\n세계에서 가장 아름답다고 일컬어진다.',
			'양손의 틈으로 공기 중의\n탄소를 압축하여 많은\n다이아를 한순간에 만들어 낸다.',
		],
		[Language.Fr]: [
			'Ce Pokémon est une mutation spontanée de Strassie.\nSon corps rose et luisant est d’une beauté\nincomparable.',
			'Il peut créer une multitude de diamants en un instant\nen serrant ses mains, simplement en compressant\nles molécules de carbone contenues dans l’air.',
			'Ce Pokémon est une mutation spontanée de Strassie.\nSon corps rose et luisant est d’une beauté incomparable.',
		],
		[Language.De]: [
			'Dieses Pokémon ist eine Mutation von Rocara.\nSein rosafarben schimmernder Körper gilt als\nschönster Anblick überhaupt.',
			'Es kann im Nu viele Diamanten erzeugen, indem es\nluftgebundene Kohlenstoffpartikel mit seinen Händen\nkomprimiert.',
			'Dieses Pokémon ist eine Mutation von Rocara. Sein rosafarben\nschimmernder Körper gilt als schönster Anblick überhaupt.',
		],
		[Language.Es]: [
			'Es una transformación súbita de Carbink. Se dice que\nsu cuerpo, que irradia destellos rosados, es lo más\nbonito de este mundo.',
			'Puede crear una gran cantidad de diamantes en un\ninstante comprimiendo con las manos el carbono que\nflota en el aire.',
			'Es una transformación súbita de Carbink. Se dice que su\ncuerpo, que irradia destellos rosados, es lo más bonito de\neste mundo.',
			'Puede crear una gran cantidad de diamantes en un instante\ncomprimiendo con las manos el carbono que flota en el aire.',
		],
		[Language.It]: [
			'Questo Pokémon è una mutazione inaspettata di\nCarbink. Alcuni ritengono che il suo corpo rosa\nsplendente sia la cosa più bella del mondo.',
			'È in grado di creare una grande quantità di diamanti\nin un istante comprimendo tra le mani il carbonio\npresente nell’aria.',
			'Questo Pokémon è una mutazione inaspettata di Carbink.\nAlcuni ritengono che il suo corpo rosa splendente sia\nla cosa più bella del mondo.',
			'È in grado di creare una grande quantità di diamanti in un\nistante comprimendo tra le mani il carbonio presente nell’aria.',
		],
		[Language.En]: [
			'A sudden transformation of Carbink,\nits pink, glimmering body is said to be\nthe loveliest sight in the whole world.',
			'It can instantly create many diamonds\nby compressing the carbon in the air\nbetween its hands.',
		],
		[Language.Ja]: [
			'メレシーの　突然変異。\nピンク色に　輝く　体は\n世界一　美しいと　言われる。',
			'両手の　すきまで　空気中の　炭素を\n圧縮して　たくさんの　ダイヤを\n一瞬で　生み出す。',
		],
	},
	[
		[
			Variety.Diancie,
			300,
			7,
			88,
			[Type.Rock, Type.Fairy],
			{
				frontDefault: 'c7a9936a.png',
				frontShiny: 'c05d7be6.png',
			},
			{
				[Stat.Hp]: {baseStat: 50},
				[Stat.Attack]: {baseStat: 100},
				[Stat.Defense]: {baseStat: 150, effort: 1},
				[Stat.SpecialAttack]: {baseStat: 100},
				[Stat.SpecialDefense]: {baseStat: 150, effort: 2},
				[Stat.Speed]: {baseStat: 50},
			},
			{},
			[
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.TakeDown,
					Move.Swift,
					Move.Spikes,
					Move.RainDance,
					Move.FlashCannon,
					Move.Bulldoze,
					Move.ScorchingSands,
					Move.TeraBlast,
					Move.Snowscape,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Facade,
					Move.RockTomb,
					Move.CalmMind,
					Move.GyroBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.StoneEdge,
					Move.Psyshock,
					Move.SmackDown,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					42,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Metronome,
					Move.Amnesia,
					Move.Endure,
					Move.Charm,
					Move.BatonPass,
					Move.Encore,
					Move.FakeTears,
					Move.SandTomb,
					Move.PowerGem,
					Move.StoredPower,
					Move.DrainingKiss,
					Move.PlayRough,
					Move.BodyPress,
					Move.MeteorBeam,
					Move.MistyExplosion,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RockSlide,
					49,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					21,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					28,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HelpingHand,
					Move.Endeavor,
					Move.SkillSwap,
					Move.IronDefense,
					Move.Gravity,
					Move.EarthPower,
					Move.StealthRock,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					56,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.RockPolish,
					35,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PowerGem,
					63,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					84,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					70,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					7,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					14,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					77,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DiamondStorm,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Metronome,
					Move.Amnesia,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Endure,
					Move.Charm,
					Move.SleepTalk,
					Move.BatonPass,
					Move.Encore,
					Move.SunnyDay,
					Move.Facade,
					Move.HelpingHand,
					Move.SkillSwap,
					Move.FakeTears,
					Move.RockTomb,
					Move.SandTomb,
					Move.IronDefense,
					Move.CalmMind,
					Move.GyroBall,
					Move.GuardSwap,
					Move.PowerGem,
					Move.EarthPower,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.StoneEdge,
					Move.StealthRock,
					Move.Psyshock,
					Move.StoredPower,
					Move.AllySwitch,
					Move.DrainingKiss,
					Move.PlayRough,
					Move.MysticalFire,
					Move.DazzlingGleam,
					Move.BodyPress,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					42,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.RockSlide,
					49,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.WonderRoom,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					21,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Safeguard,
					Move.Hail,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					28,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					56,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.RockPolish,
					35,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.PowerGem,
					63,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					84,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					70,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					7,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					14,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Moonblast,
					77,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.DiamondStorm,
					91,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.MeteorBeam,
					Move.MistyExplosion,
					Move.TerrainPulse,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.Safeguard,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.RockTomb,
					Move.CalmMind,
					Move.GyroBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.StoneEdge,
					Move.Psyshock,
					Move.SmackDown,
					Move.Round,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					1,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Explosion,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.NaturePower,
					Move.RockPolish,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					60,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					5,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HelpingHand,
					Move.Endeavor,
					Move.SkillSwap,
					Move.IronDefense,
					Move.Gravity,
					Move.EarthPower,
					Move.StealthRock,
					Move.WonderRoom,
					Move.Telekinesis,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					31,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.HealBell,
					Move.Covet,
					Move.LastResort,
					Move.MagnetRise,
					Move.AfterYou,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PowerGem,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickRoom,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 50,
					},

					Move.Moonblast,
					Move.DiamondStorm,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.RockThrow,
					Move.Harden,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.RockTomb,
					Move.CalmMind,
					Move.GyroBall,
					Move.RockPolish,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.StoneEdge,
					Move.Psyshock,
					Move.SmackDown,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					60,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PowerGem,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickRoom,
					46,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 50,
					},

					Move.Moonblast,
					Move.DiamondStorm,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.RockTomb,
					Move.CalmMind,
					Move.GyroBall,
					Move.RockPolish,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.StoneEdge,
					Move.Psyshock,
					Move.SmackDown,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					60,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_Machine,
					Move.Flash,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					8,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HealBell,
					Move.HelpingHand,
					Move.Endeavor,
					Move.SkillSwap,
					Move.IronDefense,
					Move.Covet,
					Move.Gravity,
					Move.LastResort,
					Move.MagnetRise,
					Move.EarthPower,
					Move.StealthRock,
					Move.WonderRoom,
					Move.AfterYou,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					70,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickRoom,
					46,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					12,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 50,
					},

					Move.Moonblast,
					Move.DiamondStorm,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Flash,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.RockTomb,
					Move.CalmMind,
					Move.GyroBall,
					Move.RockPolish,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.StoneEdge,
					Move.Psyshock,
					Move.SmackDown,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					5,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					60,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					70,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					31,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickRoom,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					49,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					27,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					12,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 50,
					},

					Move.Moonblast,
					Move.DiamondStorm,
				),
			].flat(),
			[
				{
					ability: Ability.ClearBody,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.Diancie,
					PokemonFormBits.Default,
					{
						frontDefault: 'c7a9936a.png',
						frontShiny: 'c05d7be6.png',
					},
					[Type.Rock, Type.Fairy],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
		[
			Variety.DiancieMega,
			315,
			11,
			278,
			[Type.Rock, Type.Fairy],
			{
				frontDefault: '5b1ad55f.png',
				frontShiny: '6583977a.png',
			},
			{
				[Stat.Hp]: {baseStat: 50},
				[Stat.Attack]: {baseStat: 160},
				[Stat.Defense]: {baseStat: 110, effort: 1},
				[Stat.SpecialAttack]: {baseStat: 160},
				[Stat.SpecialDefense]: {baseStat: 110, effort: 2},
				[Stat.Speed]: {baseStat: 110},
			},
			{},
			[
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.RockTomb,
					Move.CalmMind,
					Move.GyroBall,
					Move.RockPolish,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.StoneEdge,
					Move.Psyshock,
					Move.SmackDown,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					1,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					60,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					5,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HealBell,
					Move.HelpingHand,
					Move.Endeavor,
					Move.SkillSwap,
					Move.IronDefense,
					Move.Covet,
					Move.Gravity,
					Move.LastResort,
					Move.MagnetRise,
					Move.EarthPower,
					Move.StealthRock,
					Move.WonderRoom,
					Move.AfterYou,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PowerGem,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickRoom,
					46,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					21,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_Tutor,
					Move.Telekinesis,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					8,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 50,
					},

					Move.Moonblast,
					Move.DiamondStorm,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.RockThrow,
					Move.Harden,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.RockTomb,
					Move.CalmMind,
					Move.GyroBall,
					Move.RockPolish,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.StoneEdge,
					Move.Psyshock,
					Move.SmackDown,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					60,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					12,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					5,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					31,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					70,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					27,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PowerGem,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.TrickRoom,
					46,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					49,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					18,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					8,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 50,
					},

					Move.Moonblast,
					Move.DiamondStorm,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Tackle,
					Move.Harden,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.Flash,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.PsychUp,
					Move.Hail,
					Move.Facade,
					Move.NaturePower,
					Move.SecretPower,
					Move.RockTomb,
					Move.CalmMind,
					Move.GyroBall,
					Move.RockPolish,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.StoneEdge,
					Move.Psyshock,
					Move.SmackDown,
					Move.Round,
					Move.Confide,
					Move.DazzlingGleam,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.RockThrow,
					5,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					60,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Reflect,
					18,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Sharpen,
					8,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HealBell,
					Move.HelpingHand,
					Move.Endeavor,
					Move.SkillSwap,
					Move.IronDefense,
					Move.Covet,
					Move.Gravity,
					Move.LastResort,
					Move.MagnetRise,
					Move.EarthPower,
					Move.StealthRock,
					Move.WonderRoom,
					Move.AfterYou,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Flail,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Safeguard,
					70,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.AncientPower,
					31,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.TrickRoom,
					46,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.StoneEdge,
					49,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.StealthRock,
					21,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					27,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SmackDown,
					12,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 50,
					},

					Move.Moonblast,
					Move.DiamondStorm,
				),
			].flat(),
			[
				{
					ability: Ability.MagicBounce,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.DiancieMega,
					PokemonFormBits.BattleOnly |
						PokemonFormBits.Default |
						PokemonFormBits.Mega,
					{
						frontDefault: '5b1ad55f.png',
						frontShiny: '6583977a.png',
					},
					[Type.Rock, Type.Fairy],
					VersionGroup.OmegaRubyAlphaSapphire,
					{
						[Language.Fr]: ['Méga-Diancie'],
						[Language.De]: ['Mega-Diancie'],
						[Language.En]: ['Mega Diancie'],
					},
					{
						[Language.JaHrkt]: ['メガディアンシー'],
						[Language.Ko]: ['메가디안시'],
						[Language.ZhHant]: ['超級蒂安希'],
						[Language.Fr]: ['Méga-Diancie'],
						[Language.De]: ['Mega-Form'],
						[Language.Es]: ['Mega-Diancie'],
						[Language.It]: ['MegaDiancie'],
						[Language.En]: ['Mega Diancie'],
						[Language.Ja]: ['メガディアンシー'],
						[Language.ZhHans]: ['超级蒂安希'],
					},
					'mega',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Hoopa,
	100,
	3,
	Color.Purple,
	[EggGroup.NoEggs],
	-1,
	PokemonSpeciesBits.Mythical,
	Generation.GenerationVI,
	120,
	GrowthRate.Slow,
	Shape.Arms,
	{
		[Language.JaHrkt]: ['フーパ'],
		[Language.Roomaji]: ['Hoopa'],
		[Language.Ko]: ['후파'],
		[Language.ZhHant]: ['胡帕'],
		[Language.Fr]: ['Hoopa'],
		[Language.De]: ['Hoopa'],
		[Language.Es]: ['Hoopa'],
		[Language.It]: ['Hoopa'],
		[Language.En]: ['Hoopa'],
		[Language.Ja]: ['フーパ'],
		[Language.ZhHans]: ['胡帕'],
	},
	{
		[Language.JaHrkt]: ['いたずらポケモン'],
		[Language.Ko]: ['장난포켓몬'],
		[Language.ZhHant]: ['頑童寶可夢'],
		[Language.Fr]: ['Pokémon Chenapan'],
		[Language.De]: ['Schabernack'],
		[Language.Es]: ['Pokémon Travesura'],
		[Language.It]: ['Pokémon Birba'],
		[Language.En]: ['Mischief Pokémon'],
		[Language.Ja]: ['いたずらポケモン'],
		[Language.ZhHans]: ['顽童宝可梦'],
	},
	{
		[Language.JaHrkt]: [
			'くうかんを　ゆがめる　リングで\nあらゆる　ものを　はなれた　ばしょへ\nとばしてしまう　トラブルメーカー。',
			'きにいった　ものを　リングを　つかい\nひみつの　すみかへ　あつめている。\nリングを　くぐって　テレポートする。',
			'しんのすがたは　きょだいな　ちからを　もっている。\nざいほう　ほしさに　それが　かくされた　しろ　ごと\nひきぬき　うばいさった　という　でんせつが　ある。',
			'６つの　リングと　６つの　きょだいな　うで　で\nあらゆるものを　うばうと　いわれる。ちからを\nふうじられ　ちいさな　すがたに　かえられた。',
		],
		[Language.Ko]: [
			'공간을 뒤트는 링으로\n모든 것을 멀리 떨어진 곳으로\n날려버리고 마는 트러블메이커다.',
			'마음에 든 것을 링을 사용해\n비밀의 거처에 모으고 있다.\n링을 통해 순간이동한다.',
			'진정한 모습일 때는 거대한 힘을 가지고 있다.\n원하는 재물을 손에 넣기 위해 그것이 숨겨진\n성을 통째로 빼돌려 사라졌다는 전설이 있다.',
			'6개의 링과 6개의 거대한 팔로\n수많은 것들을 빼앗는다고 전해진다. \n힘이 봉인되어 작은 모습으로 변했다.',
		],
		[Language.Fr]: [
			'Ce fauteur de troubles est doté d’anneaux qui\ndéforment l’espace et lui permettent d’expédier\nau loin n’importe quel objet.',
			'Il a la faculté de téléporter les choses en les faisant\npasser au travers de ses anneaux. Il envoie les objets\nqui lui plaisent dans une cachette connue de lui seul.',
			'Il possède une puissance considérable sous son apparence\nvéritable. Une légende raconte qu’il désirait si fort un trésor\ncaché dans un château qu’il déroba l’édifice tout entier.',
			'On raconte que grâce à ses six anneaux et ses six énormes\nbras, il est capable de dérober tout ce qui lui plaît.\nMais son pouvoir a été scellé, et il a été réduit à l’état\nd’un être minuscule.',
		],
		[Language.De]: [
			'Mittels seiner Ringe, die Raumkrümmungen\nverursachen, verfrachtet dieser Unruhestifter\nalles und jeden an die entlegensten Orte.',
			'Mithilfe seiner Ringe hortet es Dinge, die ihm gefallen,\nan einem geheimen Ort. Es teleportiert diese, indem es\nsie durch seine Ringe bewegt.',
			'In seiner wahren Gestalt verfügt es über enorme Kräfte.\nLegenden zufolge hat es einst ein ganzes Schloss gestohlen,\nweil es den darin versteckten Schatz für sich haben wollte.',
			'Mit seinen sechs Ringen und seinen sechs riesigen Armen\nkann es alles an sich reißen, was es möchte. Wenn seine\nKraft versiegelt wird, nimmt es jedoch eine kleinere Gestalt an.',
		],
		[Language.Es]: [
			'Este problemático Pokémon envía cualquier objeto a\nlugares remotos mediante unos anillos que deforman\nel espacio.',
			'Reúne los objetos que le atraen para esconderlos\nen una guarida secreta, teletransportándolos a\ntravés de sus anillos.',
			'En su forma original, este Pokémon posee una fuerza\ndescomunal. Una leyenda cuenta que una vez robó un tesoro\ndel interior de una fortaleza.',
			'Dicen que gracias a sus seis anillos y seis enormes brazos\npuede robar todo lo que se le antoja.\nAdquirió una forma reducida cuando alguien selló su poder.',
		],
		[Language.It]: [
			'È un gran combinaguai e spedisce lontano\ntutto ciò che gli capita a tiro grazie ai suoi anelli\nin grado di piegare lo spazio.',
			'Usa i suoi anelli per intrappolare qualunque cosa\ngli piaccia e teletrasportarla in un luogo segreto.',
			'Quando assume la sua vera forma, acquisisce un’energia\nstraordinaria. Secondo la leggenda, è talmente bramoso di\ngioielli che può rubare un castello intero per impossessarsi\ndei suoi tesori.',
			'Si dice che possa rubare tutto ciò che vuole grazie\nai suoi sei anelli e alle sue sei enormi braccia.\nLa sua potenza è stata sigillata, riducendo di molto\nle sue dimensioni effettive.',
		],
		[Language.En]: [
			'This troublemaker sends anything\nand everything to faraway places\nusing its loop, which can warp space.',
			'It gathers things it likes and passes them through\nits loop to teleport them to a secret place.',
			'In its true form, it possess a huge amount of power.\nLegends of its avarice tell how it once carried off\nan entire castle to gain the treasure hidden within.',
			'It is said to be able to seize anything it desires\nwith its six rings and six huge arms. With its power\nsealed, it is transformed into a much smaller form.',
		],
		[Language.Ja]: [
			'空間を　ゆがめる　リングで\nあらゆる　ものを　離れた　場所へ\n飛ばしてしまう　トラブルメーカー。',
			'気に入った　ものを　リングを　使い\n秘密の　住処へ　集めている。\nリングを　潜って　テレポートする。',
			'真の姿は　巨大な　力を　持っている。\n財宝　欲しさに　それが　隠された　城ごと\n引き抜き　奪い去った　という　伝説が　ある。',
			'６つの　リングと　６つの　巨大な腕で\nあらゆるものを　奪うと　いわれる。\n力を　封じられ　小さな姿に　変えられた。',
		],
	},
	[
		[
			Variety.Hoopa,
			270,
			5,
			90,
			[Type.Psychic, Type.Ghost],
			{
				frontDefault: '26a05b49.png',
				frontShiny: '282daf7e.png',
				backDefault: '35d9c294.png',
				backShiny: 'ed90bf40.png',
			},
			{
				[Stat.Hp]: {baseStat: 80},
				[Stat.Attack]: {baseStat: 110},
				[Stat.Defense]: {baseStat: 60},
				[Stat.SpecialAttack]: {baseStat: 150, effort: 3},
				[Stat.SpecialDefense]: {baseStat: 130},
				[Stat.Speed]: {baseStat: 70},
			},
			{},
			[
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.FirePunch,
					Move.IcePunch,
					Move.ThunderPunch,
					Move.FocusPunch,
					Move.Trick,
					Move.KnockOff,
					Move.SkillSwap,
					Move.Gravity,
					Move.DarkPulse,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.GunkShot,
					Move.FoulPlay,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.Psybeam,
					Move.Swift,
					Move.ScaryFace,
					Move.Sandstorm,
					Move.Endure,
					Move.FutureSight,
					Move.RockTomb,
					Move.NastyPlot,
					Move.PhantomForce,
					Move.PsychicTerrain,
					Move.ExpandingForce,
					Move.SkitterSmack,
					Move.LashOut,
					Move.TeraBlast,
					Move.PsychicNoise,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					19,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.CalmMind,
					Move.Fling,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Psyshock,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Confusion,
					Move.DestinyBond,
					Move.AllySwitch,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					75,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					55,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Trick,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.NastyPlot,
					68,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.ZenHeadbutt,
					46,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TrickRoom,
					50,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					29,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PowerSplit,
					29,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WonderRoom,
					50,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HyperspaceHole,
					85,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.ThroatChop,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.IcePunch,
					Move.ThunderPunch,
					Move.FocusPunch,
					Move.Trick,
					Move.KnockOff,
					Move.SkillSwap,
					Move.Gravity,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.GunkShot,
					Move.Telekinesis,
					Move.FoulPlay,
					Move.AllySwitch,
					Move.LaserFocus,
					Move.ThroatChop,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					19,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.CalmMind,
					Move.Fling,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Psyshock,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.Torment,
					Move.Embargo,
					Move.ChargeBeam,
					Move.Round,
					Move.Quash,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Confusion,
					Move.DestinyBond,
					Move.AllySwitch,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					75,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Uproar,
					Move.RolePlay,
					Move.MagicCoat,
					Move.Recycle,
					Move.Snatch,
					Move.SignalBeam,
					Move.Block,
					Move.Covet,
					Move.ShockWave,
					Move.LastResort,
					Move.WonderRoom,
					Move.MagicRoom,
					Move.DualChop,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					55,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Trick,
					Move.HyperspaceHole,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicCoat,
					10,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					25,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					6,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.NastyPlot,
					68,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.ZenHeadbutt,
					46,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 50,
					},

					Move.TrickRoom,
					Move.WonderRoom,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 29,
					},

					Move.GuardSplit,
					Move.PowerSplit,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					35,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HyperspaceHole,
					85,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					19,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.CalmMind,
					Move.Embargo,
					Move.Fling,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.Quash,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Confusion,
					Move.DestinyBond,
					Move.Trick,
					Move.AllySwitch,
					Move.HyperspaceHole,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					75,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					55,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicCoat,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.NastyPlot,
					68,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.ZenHeadbutt,
					46,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 50,
					},

					Move.TrickRoom,
					Move.WonderRoom,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 29,
					},

					Move.GuardSplit,
					Move.PowerSplit,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					35,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HyperspaceHole,
					85,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.IcePunch,
					Move.ThunderPunch,
					Move.Snore,
					Move.Uproar,
					Move.FocusPunch,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.Recycle,
					Move.KnockOff,
					Move.SkillSwap,
					Move.Snatch,
					Move.SignalBeam,
					Move.Block,
					Move.Covet,
					Move.ShockWave,
					Move.Gravity,
					Move.LastResort,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.GunkShot,
					Move.WonderRoom,
					Move.MagicRoom,
					Move.FoulPlay,
					Move.DualChop,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					19,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.SecretPower,
					Move.CalmMind,
					Move.Embargo,
					Move.Fling,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.Quash,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Confusion,
					Move.DestinyBond,
					Move.Trick,
					Move.AllySwitch,
					Move.HyperspaceHole,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					75,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Flash,
					Move.PowerUpPunch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					55,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MagicCoat,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.NastyPlot,
					68,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.ZenHeadbutt,
					46,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 50,
					},

					Move.TrickRoom,
					Move.WonderRoom,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 29,
					},

					Move.GuardSplit,
					Move.PowerSplit,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					35,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HyperspaceHole,
					85,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					15,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.CalmMind,
					Move.Embargo,
					Move.Fling,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.Quash,
					Move.Confide,
					Move.PowerUpPunch,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Confusion,
					Move.DestinyBond,
					Move.Trick,
					Move.AllySwitch,
					Move.HyperspaceHole,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					75,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					19,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.ShadowBall,
					68,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.MagicCoat,
					10,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					25,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					6,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.TrickRoom,
					55,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.GuardSplit,
					35,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PowerSplit,
					29,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WonderRoom,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.PhantomForce,
					46,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HyperspaceHole,
					85,
				),
			].flat(),
			[
				{
					ability: Ability.Magician,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.Hoopa,
					PokemonFormBits.Default,
					{
						frontDefault: '26a05b49.png',
						frontShiny: '282daf7e.png',
						backDefault: '35d9c294.png',
						backShiny: 'ed90bf40.png',
					},
					[Type.Psychic, Type.Ghost],
					VersionGroup.XY,
					{
						[Language.Fr]: ['Hoopa Enchaîné'],
						[Language.De]: ['Gebanntes Hoopa'],
						[Language.En]: ['Confined Hoopa'],
					},
					{
						[Language.JaHrkt]: ['いましめられしフーパ'],
						[Language.Ko]: ['굴레에 빠진 후파'],
						[Language.ZhHant]: ['懲戒胡帕'],
						[Language.Fr]: ['Hoopa Enchaîné'],
						[Language.De]: ['Gebanntes Hoopa'],
						[Language.Es]: ['Hoopa Contenido'],
						[Language.It]: ['Hoopa Vincolato'],
						[Language.En]: ['Hoopa Confined'],
						[Language.Ja]: ['いましめられしフーパ'],
						[Language.ZhHans]: ['惩戒胡帕'],
					},
					'confined',
				],
			],
		],
		[
			Variety.HoopaUnbound,
			306,
			65,
			4900,
			[Type.Psychic, Type.Dark],
			{
				frontDefault: 'cb90ff21.png',
				frontShiny: '211b16a2.png',
			},
			{
				[Stat.Hp]: {baseStat: 80},
				[Stat.Attack]: {baseStat: 160},
				[Stat.Defense]: {baseStat: 60},
				[Stat.SpecialAttack]: {baseStat: 170, effort: 3},
				[Stat.SpecialDefense]: {baseStat: 130},
				[Stat.Speed]: {baseStat: 80},
			},
			{},
			[
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.FirePunch,
					Move.IcePunch,
					Move.ThunderPunch,
					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Facade,
					Move.FocusPunch,
					Move.Taunt,
					Move.Trick,
					Move.BrickBreak,
					Move.KnockOff,
					Move.SkillSwap,
					Move.CalmMind,
					Move.Gravity,
					Move.Fling,
					Move.DarkPulse,
					Move.DrainPunch,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.ZenHeadbutt,
					Move.TrickRoom,
					Move.GunkShot,
					Move.GrassKnot,
					Move.Psyshock,
					Move.FoulPlay,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.Psybeam,
					Move.Swift,
					Move.ScaryFace,
					Move.Sandstorm,
					Move.Endure,
					Move.FutureSight,
					Move.RockTomb,
					Move.NastyPlot,
					Move.PhantomForce,
					Move.PsychicTerrain,
					Move.ExpandingForce,
					Move.SkitterSmack,
					Move.LashOut,
					Move.TeraBlast,
					Move.PsychicNoise,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					19,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Confusion,
					Move.DestinyBond,
					Move.AllySwitch,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					75,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					15,
				),
				move(
					VersionGroup_ScarletViolet,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Trick,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.KnockOff,
					46,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.DarkPulse,
					55,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 50,
					},

					Move.TrickRoom,
					Move.WonderRoom,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 29,
					},

					Move.GuardSplit,
					Move.PowerSplit,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HyperspaceFury,
					85,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_Machine,
					Move.ThroatChop,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.IcePunch,
					Move.ThunderPunch,
					Move.FocusPunch,
					Move.Trick,
					Move.KnockOff,
					Move.SkillSwap,
					Move.Gravity,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.GunkShot,
					Move.Telekinesis,
					Move.FoulPlay,
					Move.AllySwitch,
					Move.LaserFocus,
					Move.ThroatChop,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					19,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Psychic,
					Move.LightScreen,
					Move.Reflect,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.CalmMind,
					Move.Fling,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.Psyshock,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.DreamEater,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.Torment,
					Move.Embargo,
					Move.ChargeBeam,
					Move.Round,
					Move.Quash,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Confusion,
					Move.DestinyBond,
					Move.AllySwitch,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					75,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					15,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.Uproar,
					Move.RolePlay,
					Move.MagicCoat,
					Move.Recycle,
					Move.Snatch,
					Move.SignalBeam,
					Move.Block,
					Move.Covet,
					Move.ShockWave,
					Move.LastResort,
					Move.WonderRoom,
					Move.MagicRoom,
					Move.DualChop,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Trick,
					Move.HyperspaceFury,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicCoat,
					10,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.KnockOff,
					46,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					25,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					6,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.DarkPulse,
					55,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 50,
					},

					Move.TrickRoom,
					Move.WonderRoom,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 29,
					},

					Move.GuardSplit,
					Move.PowerSplit,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HyperspaceFury,
					85,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					19,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.CalmMind,
					Move.Embargo,
					Move.Fling,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.Quash,
					Move.Confide,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Confusion,
					Move.DestinyBond,
					Move.Trick,
					Move.AllySwitch,
					Move.HyperspaceFury,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					75,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.MagicCoat,
					10,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.KnockOff,
					46,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					25,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					6,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.DarkPulse,
					55,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 50,
					},

					Move.TrickRoom,
					Move.WonderRoom,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 29,
					},

					Move.GuardSplit,
					Move.PowerSplit,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HyperspaceFury,
					85,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.FirePunch,
					Move.IcePunch,
					Move.ThunderPunch,
					Move.Snore,
					Move.Uproar,
					Move.FocusPunch,
					Move.Trick,
					Move.RolePlay,
					Move.MagicCoat,
					Move.Recycle,
					Move.KnockOff,
					Move.SkillSwap,
					Move.Snatch,
					Move.SignalBeam,
					Move.Block,
					Move.Covet,
					Move.ShockWave,
					Move.Gravity,
					Move.LastResort,
					Move.DrainPunch,
					Move.ZenHeadbutt,
					Move.GunkShot,
					Move.WonderRoom,
					Move.MagicRoom,
					Move.FoulPlay,
					Move.DualChop,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psybeam,
					19,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HyperBeam,
					Move.Thunderbolt,
					Move.ThunderWave,
					Move.Toxic,
					Move.Psychic,
					Move.DoubleTeam,
					Move.LightScreen,
					Move.Reflect,
					Move.DreamEater,
					Move.Flash,
					Move.Rest,
					Move.Substitute,
					Move.Thief,
					Move.Protect,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.Safeguard,
					Move.HiddenPower,
					Move.RainDance,
					Move.SunnyDay,
					Move.PsychUp,
					Move.ShadowBall,
					Move.Torment,
					Move.Facade,
					Move.Taunt,
					Move.BrickBreak,
					Move.SecretPower,
					Move.CalmMind,
					Move.Embargo,
					Move.Fling,
					Move.DarkPulse,
					Move.FocusBlast,
					Move.EnergyBall,
					Move.GigaImpact,
					Move.TrickRoom,
					Move.GrassKnot,
					Move.ChargeBeam,
					Move.Psyshock,
					Move.Round,
					Move.Quash,
					Move.Confide,
					Move.PowerUpPunch,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.Confusion,
					Move.DestinyBond,
					Move.Trick,
					Move.AllySwitch,
					Move.HyperspaceFury,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Psychic,
					75,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.LightScreen,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.MagicCoat,
					10,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.KnockOff,
					46,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SkillSwap,
					25,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Astonish,
					6,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.DarkPulse,
					55,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 50,
					},

					Move.TrickRoom,
					Move.WonderRoom,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 29,
					},

					Move.GuardSplit,
					Move.PowerSplit,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HyperspaceFury,
					85,
				),
			].flat(),
			[
				{
					ability: Ability.Magician,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.HoopaUnbound,
					PokemonFormBits.Default,
					{
						frontDefault: 'cb90ff21.png',
						frontShiny: '211b16a2.png',
					},
					[Type.Psychic, Type.Dark],
					VersionGroup.OmegaRubyAlphaSapphire,
					{
						[Language.Fr]: ['Hoopa Déchaîné'],
						[Language.De]: ['Entfesseltes Hoopa'],
						[Language.En]: ['Hoopa Unbound'],
					},
					{
						[Language.JaHrkt]: ['ときはなたれしフーパ'],
						[Language.Ko]: ['굴레를 벗어난 후파'],
						[Language.ZhHant]: ['解放胡帕'],
						[Language.Fr]: ['Hoopa Déchaîné'],
						[Language.De]: ['Entfesseltes Hoopa'],
						[Language.Es]: ['Hoopa Desatado'],
						[Language.It]: ['Hoopa Libero'],
						[Language.En]: ['Hoopa Unbound'],
						[Language.Ja]: ['ときはなたれしフーパ'],
						[Language.ZhHans]: ['解放胡帕'],
					},
					'unbound',
				],
			],
		],
	],
);
new PokemonSpecies(
	Species.Volcanion,
	100,
	3,
	Color.Brown,
	[EggGroup.NoEggs],
	-1,
	PokemonSpeciesBits.Mythical,
	Generation.GenerationVI,
	120,
	GrowthRate.Slow,
	Shape.Quadruped,
	{
		[Language.JaHrkt]: ['ボルケニオン'],
		[Language.Roomaji]: ['Volcanion'],
		[Language.Ko]: ['볼케니온'],
		[Language.ZhHant]: ['波爾凱尼恩'],
		[Language.Fr]: ['Volcanion'],
		[Language.De]: ['Volcanion'],
		[Language.Es]: ['Volcanion'],
		[Language.It]: ['Volcanion'],
		[Language.En]: ['Volcanion'],
		[Language.Ja]: ['ボルケニオン'],
		[Language.ZhHans]: ['波尔凯尼恩'],
	},
	{
		[Language.JaHrkt]: ['スチームポケモン'],
		[Language.Ko]: ['스팀포켓몬'],
		[Language.ZhHant]: ['蒸汽寶可夢'],
		[Language.Fr]: ['Pokémon Vapeur'],
		[Language.De]: ['Dampf-Pokémon'],
		[Language.Es]: ['Pokémon Vapor'],
		[Language.It]: ['Pokémon Vapore'],
		[Language.En]: ['Steam Pokémon'],
		[Language.Ja]: ['スチームポケモン'],
		[Language.ZhHans]: ['蒸汽宝可梦'],
	},
	{
		[Language.Es]: [
			'Expulsa vapor y desaparece entre la densa niebla. Dicen que\nhabita en montañas solitarias.',
			'Expulsa vapor y desaparece entre la densa niebla.\nDicen que habita en montañas solitarias.',
			'Expulsa vapor de agua por los brazos que tiene en\nla espalda. Sale a tal potencia que sería capaz de\narrasar una montaña entera.',
			'Expulsa vapor de agua por los brazos que tiene en la espalda.\nSale a tal potencia que sería capaz de arrasar una montaña\nentera.',
		],
		[Language.JaHrkt]: [
			'すいじょうきを　ふきだして　じぶんの\nすがたを　のうむで　かくす。ひとの\nたちいらない　やまに　すむと　いう。',
			'せなかの　アームから　たいないの\nすいじょうきを　ふんしゃする。\nやま　ひとつ　ふきとばす　いりょく。',
		],
		[Language.Ko]: [
			'수증기를 뿜어내어 자신의\n모습을 짙은 안개 속에 숨긴다. 사람이\n오지 않는 산에 산다고 한다.',
			'등에 있는 팔로 체내의\n수증기를 분사한다.\n산 하나를 날려버릴 정도의 위력이다.',
		],
		[Language.Fr]: [
			'Il est capable de générer un nuage de vapeur pour\nse cacher. Il vit dans des montagnes inhabitées.',
			'Il évacue la vapeur qui s’accumule à l’intérieur de son\ncorps par les bras situés sur son dos.\nCe jet est assez puissant pour raser des montagnes.',
			'Il est capable de générer un nuage de vapeur pour se cacher.\nIl vit dans des montagnes inhabitées.',
			'Il évacue la vapeur qui s’accumule à l’intérieur de son corps\npar les bras situés sur son dos. Ce jet est assez puissant\npour raser des montagnes.',
		],
		[Language.De]: [
			'Es stößt Wasserdampf aus und versteckt sich\nim dadurch entstehenden dichten Nebel. Es lebt in\nBergen, die von Menschen gemieden werden.',
			'Über die Arme auf seinem Rücken stößt es\nWasserdampf aus. Seine Kraft reicht aus,\num Berge zu versetzen.',
			'Es stößt Wasserdampf aus und versteckt sich im dadurch\nentstehenden dichten Nebel. Es lebt in Bergen, die von\nMenschen gemieden werden.',
			'Über die Arme auf seinem Rücken stößt es Wasserdampf aus.\nSeine Kraft reicht aus, um Berge zu versetzen.',
		],
		[Language.It]: [
			'Si nasconde emettendo spesse nubi di vapore attorno\na sé. Si dice che viva su montagne non frequentate\ndall’uomo.',
			'Emette il vapore generato nel suo corpo dalle braccia\ncongiunte ad anello sul dorso. La potenza del getto\npotrebbe spazzare via una montagna.',
			'Si nasconde emettendo spesse nubi di vapore attorno a sé.\nSi dice che viva su montagne non frequentate dall’uomo.',
		],
		[Language.En]: [
			'It lets out billows of steam and disappears into\nthe dense fog. It’s said to live in mountains\nwhere humans do not tread.',
			'It expels its internal steam from the\narms on its back. It has enough\npower to blow away a mountain.',
		],
		[Language.Ja]: [
			'水蒸気を　噴き出して　自分の　姿を\n濃霧で　隠す。人の　立ち入らない\n山に　住むという。',
			'背中の　アームから\n体内の　水蒸気を　噴射する。\n山　ひとつ　吹き飛ばす　威力。',
		],
	},
	[
		[
			Variety.Volcanion,
			300,
			17,
			1950,
			[Type.Fire, Type.Water],
			{
				frontDefault: '435021c4.png',
				frontShiny: '8ad8262c.png',
			},
			{
				[Stat.Hp]: {baseStat: 80},
				[Stat.Attack]: {baseStat: 110},
				[Stat.Defense]: {baseStat: 120},
				[Stat.SpecialAttack]: {baseStat: 130, effort: 3},
				[Stat.SpecialDefense]: {baseStat: 90},
				[Stat.Speed]: {baseStat: 70},
			},
			{},
			[
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					42,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.HydroPump,
					Move.FireSpin,
					Move.ScaryFace,
					Move.Endure,
					Move.RainDance,
					Move.WeatherBall,
					Move.MudShot,
					Move.FlareBlitz,
					Move.ThunderFang,
					Move.HeavySlam,
					Move.HeatCrash,
					Move.MistyTerrain,
					Move.BodyPress,
					Move.ScorchingSands,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					54,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_ScarletViolet,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.TakeDown,
					Move.DoubleEdge,
					Move.Dig,
					Move.Haze,
					Move.Taunt,
					Move.RockTomb,
					Move.FireFang,
					Move.WildCharge,
					Move.TeraBlast,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Leer,
					6,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_ScarletViolet],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.BrickBreak,
					Move.Overheat,
					Move.GyroBall,
					Move.Fling,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.SmackDown,
					Move.SludgeWave,
					Move.FlameCharge,
					Move.Scald,
					Move.Bulldoze,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 60,
					},

					Move.Mist,
					Move.Haze,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_SwordShield,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.WaterGun,
					Move.FireSpin,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					66,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					90,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					30,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.HeatWave,
					Move.WaterPulse,
					Move.EarthPower,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WeatherBall,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					84,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FlareBlitz,
					78,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					18,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Scald,
					48,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.Incinerate,
					36,
				),
				move(
					VersionGroup_XY,
					VersionGroup_ScarletViolet,
					MoveLearnMethod_LevelUp,
					Move.SteamEruption,
					1,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_ScarletViolet,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.StompingTantrum,
					Move.Liquidation,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					42,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.BodySlam,
					Move.Flamethrower,
					Move.HydroPump,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.FireSpin,
					Move.Earthquake,
					Move.FocusEnergy,
					Move.SelfDestruct,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.ScaryFace,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.Endure,
					Move.SleepTalk,
					Move.RainDance,
					Move.SunnyDay,
					Move.HeatWave,
					Move.WillOWisp,
					Move.Facade,
					Move.BrickBreak,
					Move.WeatherBall,
					Move.Overheat,
					Move.MudShot,
					Move.GyroBall,
					Move.Fling,
					Move.FlareBlitz,
					Move.FocusBlast,
					Move.EarthPower,
					Move.GigaImpact,
					Move.ThunderFang,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.SludgeWave,
					Move.HeavySlam,
					Move.Scald,
					Move.Bulldoze,
					Move.HeatCrash,
					Move.MistyTerrain,
					Move.StompingTantrum,
					Move.Liquidation,
					Move.BodyPress,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.TakeDown,
					54,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Leer,
					6,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 60,
					},

					Move.Mist,
					Move.Haze,
				),
				moves(
					{
						versionGroups: [VersionGroup_SwordShield, VersionGroup_SwordShield],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.WaterGun,
					Move.FireSpin,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					66,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					90,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_SwordShield,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Snore,
					Move.Superpower,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.ScaryFace,
					30,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WeatherBall,
					12,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					84,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					24,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FlareBlitz,
					78,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					18,
				),
				move(
					VersionGroup_XY,
					VersionGroup_SwordShield,
					MoveLearnMethod_Machine,
					Move.Round,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Scald,
					48,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.Incinerate,
					36,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_LevelUp,
					Move.SteamEruption,
					72,
				),
				move(
					VersionGroup_SwordShield,
					VersionGroup_SwordShield,
					MoveLearnMethod_Tutor,
					Move.ScorchingSands,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					46,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.TakeDown,
					Move.FlareBlitz,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.FireBlast,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.SleepTalk,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.BrickBreak,
					Move.Overheat,
					Move.GyroBall,
					Move.Fling,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.SmackDown,
					Move.SludgeWave,
					Move.FlameCharge,
					Move.Round,
					Move.Scald,
					Move.Bulldoze,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Mist,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					50,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_UltraSunUltraMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Toxic,
					Move.DoubleTeam,
					Move.Explosion,
					Move.Swagger,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					76,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_UltraSunUltraMoon,
							VersionGroup_UltraSunUltraMoon,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HeatWave,
					Move.Superpower,
					Move.WaterPulse,
					Move.EarthPower,
					Move.Defog,
					Move.StompingTantrum,
					Move.Liquidation,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WeatherBall,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					65,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FlareBlitz,
					58,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.Scald,
					32,
				),
				move(
					VersionGroup_UltraSunUltraMoon,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SteamEruption,
					1,
				),
				move(
					VersionGroup_XY,
					VersionGroup_UltraSunUltraMoon,
					MoveLearnMethod_LevelUp,
					Move.SteamEruption,
					85,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					28,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					46,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.TakeDown,
					Move.FlareBlitz,
					Move.SteamEruption,
				),
				moves(
					{
						versionGroups: [VersionGroup_SunMoon, VersionGroup_SunMoon],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.BrickBreak,
					Move.Overheat,
					Move.GyroBall,
					Move.Fling,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.SmackDown,
					Move.SludgeWave,
					Move.FlameCharge,
					Move.Round,
					Move.Scald,
					Move.Bulldoze,
					Move.Confide,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Mist,
					8,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					50,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					11,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					76,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WeatherBall,
					40,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					65,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					21,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FlareBlitz,
					58,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					15,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.Scald,
					32,
				),
				move(
					VersionGroup_SunMoon,
					VersionGroup_SunMoon,
					MoveLearnMethod_LevelUp,
					Move.SteamEruption,
					85,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_XY,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Strength,
					Move.RockSmash,
					Move.Incinerate,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					28,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					46,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.TakeDown,
					Move.FlareBlitz,
					Move.SteamEruption,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Roar,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.WillOWisp,
					Move.Facade,
					Move.BrickBreak,
					Move.SecretPower,
					Move.Overheat,
					Move.GyroBall,
					Move.Fling,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.SmackDown,
					Move.SludgeWave,
					Move.FlameCharge,
					Move.Round,
					Move.Scald,
					Move.Bulldoze,
					Move.Confide,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Mist,
					8,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					50,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					11,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					76,
				),
				moves(
					{
						versionGroups: [
							VersionGroup_OmegaRubyAlphaSapphire,
							VersionGroup_OmegaRubyAlphaSapphire,
						],
						learnMethod: MoveLearnMethod_Tutor,
					},

					Move.Snore,
					Move.HeatWave,
					Move.Superpower,
					Move.WaterPulse,
					Move.EarthPower,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WeatherBall,
					40,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					65,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					21,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FlareBlitz,
					58,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					15,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.Scald,
					32,
				),
				move(
					VersionGroup_OmegaRubyAlphaSapphire,
					VersionGroup_OmegaRubyAlphaSapphire,
					MoveLearnMethod_LevelUp,
					Move.SteamEruption,
					85,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_Machine,
					},

					Move.Cut,
					Move.Roar,
					Move.Flamethrower,
					Move.HyperBeam,
					Move.Strength,
					Move.SolarBeam,
					Move.Earthquake,
					Move.Toxic,
					Move.DoubleTeam,
					Move.FireBlast,
					Move.Explosion,
					Move.Rest,
					Move.RockSlide,
					Move.Substitute,
					Move.Protect,
					Move.SludgeBomb,
					Move.Sandstorm,
					Move.Swagger,
					Move.SleepTalk,
					Move.Return,
					Move.Frustration,
					Move.HiddenPower,
					Move.SunnyDay,
					Move.RockSmash,
					Move.WillOWisp,
					Move.Facade,
					Move.BrickBreak,
					Move.Overheat,
					Move.GyroBall,
					Move.Fling,
					Move.FocusBlast,
					Move.GigaImpact,
					Move.FlashCannon,
					Move.StoneEdge,
					Move.SmackDown,
					Move.SludgeWave,
					Move.FlameCharge,
					Move.Round,
					Move.Scald,
					Move.Incinerate,
					Move.Bulldoze,
					Move.Confide,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Stomp,
					28,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.BodySlam,
					46,
				),
				moves(
					{
						versionGroups: [VersionGroup_XY, VersionGroup_XY],
						learnMethod: MoveLearnMethod_LevelUp,
						levelLearnedAt: 1,
					},

					Move.TakeDown,
					Move.FlareBlitz,
					Move.SteamEruption,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Mist,
					8,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.HydroPump,
					50,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Haze,
					11,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Explosion,
					76,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WeatherBall,
					40,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Overheat,
					65,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.WaterPulse,
					21,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FlareBlitz,
					58,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.FlameCharge,
					15,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.Scald,
					32,
				),
				move(
					VersionGroup_XY,
					VersionGroup_XY,
					MoveLearnMethod_LevelUp,
					Move.SteamEruption,
					85,
				),
			].flat(),
			[
				{
					ability: Ability.WaterAbsorb,
					isHidden: false,
					slot: 1,
				},
			],
			[
				[
					Form.Volcanion,
					PokemonFormBits.Default,
					{
						frontDefault: '435021c4.png',
						frontShiny: '8ad8262c.png',
					},
					[Type.Fire, Type.Water],
					VersionGroup.XY,
					{},
					{},
				],
			],
		],
	],
);
